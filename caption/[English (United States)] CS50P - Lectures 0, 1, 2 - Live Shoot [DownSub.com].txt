Hello, World testing 123. Can you hear me okay?

Yes, well, so nice to see so many faces around the world.

We thought we'd make a few announcements before we begin. My name is David Malin.

This is CS fifty's introduction to programming with python,

a brand new course that we're filming live in real time.

Some of you, I I'm c have joined us on Tuesday as well,

which was the so called dress rehearsal, which means practice lectures.

So we've hopefully made some improvements since then.

Ah, so thank you for coming back if you joined us already then.

Uh, those announcements, so unrelated to today,

CS 50 X puzzle Day 2022 began a few hours ago.

If you have never participated in this,

it's an opportunity to get together with family or friends or colleagues

or anyone around the world and just solve some fun puzzles,

logic problems of sorts.

Uh, if you'd like friends to join you,

you can reassure them that they don't need to have taken CS 50 no prior CS experience,

no prior programming experience.

It really is meant to be open to anyone and everyone around the world.

So if you'd like to join,

go to that U. R. L. There a word now on today's logistics.

So we're all here of course via zoom and we also

have folks tuning in in live via Youtube and facebook and linkedin

zoom of course is interactive.

However, zoom's chat interface as many of, you know,

isn't necessarily the best and frankly with hundreds of people in the chat room,

it can get really distracting.

So we wanted to make a request here um one

if you do want to participate in the chat totally fine

to ask questions but do try to keep the chit

chat to a minimum or the distractions to a minimum,

at least during class itself will take a few

breaks for five or 10 minutes and you're welcome

to chat as much as you'd like then but

do try to keep things focused more mechanically though

the best work around that we found to minimizing the annoying pop

ups in zoom is to do this if you're on a Mac

or a Pc and not a mobile device and you look for

the chat window and zoom right now by clicking on the chat icon

and then you look at the little triangle in

the top left hand corner of the chat window,

you should see something like pop out though,

it might be different in your own human language if you

click that it'll pop it out literally as a separate window.

And then honestly what we do here is we just drag it to like the bottom corner of

your computer so that you can't see it and it's sort of out of sight out of mind

this in computer science is what we call a

work around this is not like a proper solution,

but at least it will get the annoying pop ups out of your way if you'd like to do that,

I don't think you can do something like that on mobile.

If you'd like to follow along now today to go to this U. R. L.

And you'll see all of today's slides,

you'll see source code that is python code that I wrote in advance.

So all of today's resources and the recording,

if you have to leave early will be there as well.

We're gonna go through officially three lectures.

We're going to focus on functions and variables. First take a lecture zero.

We're then going to focus on conditional is doing things if for else if or else.

And then lastly if time permits, we're going to focus on loops.

Don't want to keep everyone here all day.

So we'll do our best to fit everything into the time.

We're going to start though by doing a very short introduction.

That will just be a minute or so and

then we'll stop and restart with lecture zero itself.

Lastly, if you'd like to follow along at home, let me step over here for a moment.

You can go to this U. R L.

Here code dot CS 50 dot io this is a free cloud

based version of a program called Visual studio code or V.

S code. This is a very popular tool nowadays for writing code.

You can install it on your own Mac or pc,

you can download and install python itself onto your own mac or pc

but invariably there's technical support, headaches,

something goes wrong and so many of us have different computers,

different operating systems, different settings.

The easiest way to participate today if you

want and the easiest way to take this course

is going to be to use this tool instead.

It is a cloud based version of that very

same program with everything pre configured with that.

Said lectures as you know,

tend to go quickly and the goal is not to allow enough

time hands on to go through every one of today's examples.

So please do not feel like you're falling behind.

Don't feel like programming isn't for you if you can't keep up the

goal today is not to keep up doing things on your own,

you're going to do that in the courses.

Problem sets the programming

assignments just so you know,

alright with that said uh some final logistics,

we have a tradition of taking a souvenir photo and any of our large zooms.

If you would like to opt into this, turn your camera on now.

If you would like to opt out of this, turn your camera off now

and in just a moment we'll go ahead and put on your best

smile a wave and my colleague Huangshan is gonna take dozens of screenshots.

So here we go. If you'd like to be in the souvenir photo that will post online

now is the time to smile and look

very excited to be learning programming or python for the very first time.

Hopefully we'll catch you with a good smile. A good wave

function is clicking right right right on all of the zoom tiles.

Since with hundreds of us here today,

there's going to be a lot of different pages.

I'm going to switch things up and use my

other hand here now just to keep things interesting.

Maybe you can make it even more interesting, but we'll see what,

what frame we catch you on. All right. We are officially done there.

And lastly, just to test out all of the audio, let me step over here and see

if maybe just two or three folks would like to say hello and where you are in the world.

If you'd like to say that and feel free to say as much in the chat to before we begin.

Hello and where you are in the world.

Any volunteers here.

Let me see if my colleagues carter and wrong shin can spotlight a few Janice.

Do you want to say hello first?

Still muted I think.

Hello? Can you hear me? Yes, now we can. Hello?

Oh, hi. Um, glad to be here. My name is Janice. I'm in phoenix Arizona.

And um,

this is my first time my first year like self study computer

and glad to be here and thank you for the opportunity.

Nice, Well, welcome. Glad you could join us about a couple more hellos.

Let's see who do we have next carter? Uh, Khalid if I'm saying that right.

If you'd like to say hello next.

Hey, how you doing?

We can Yes. Where in the world are you?

I'm from Tunisia North Africa.

Nice. Well, thank you for staying up with us today.

Yeah. Thank you. Nice to see you. Okay, how about one more.

Hello, carter over to ralph if I'm saying it Right.

Hi, David and all the CS 15. I'm from the Philippines.

I'm just starting my coffee right now to keep me energized. Let's go. Nice.

Well, welcome. A perfect way to begin.

Um and as you may know with zoom, there's always technical difficulties.

Some people might be muted by accident or it

might be a little slow sometimes with Q&A.

That's just gonna be the case for these live streams are

very talented team here in addition to cleaning everything up after.

Well, generally tighten up the audio too.

So even if it feels a little slow today, if and when you or others watch online,

it should move even more quickly.

We'll cut around any zoom slowness. Alright, give us just a minute to get ready here.

We're going to do a quick overview of the course for just a minute or so,

then we'll stop and then we'll dive right

into the first lecture programming with python.

So glad to see everyone will begin in just a moment.

Alright. And Andrew. Do you guys need to cut anything or anything like that.

Okay.

And do we want to start? I think we'll start this over here. Yeah.

Actually you want to start on a wide shot, can we? Well, we have the footage anyway.

Right. If we want to go camera three then two then one

or maybe just camera two and one for this,

sorry, three and two for this.

Okay.

Hello world.

My name is David Malin and this is

CS fifty's introduction to programming with python.

A new course that will introduce you all the more

to a very popular programming language known as python.

This is of course that you can take before during or after.

CS 50 otherwise known as CS 50 X itself,

which is more general purpose introduction to computer science itself.

CS 50 P.

This course,

by contrast is going to go all the more deeply into python as a language

and give you all of the more skills by which to solve problems with it.

Now, python is a language that's very popular these days,

not only for general purpose programming,

just solving problems that might come to mind.

It's very popular in the world of statistics and data science

in biomedical engineering in web development even, and that's why.

And among the reasons why python is just so popular these days,

you can use it in so many different ways over the next several weeks.

What we're gonna do is introduce you to

not just this language and programming more generally,

but a number of industry standard tools nowadays as well.

In fact for this course you'll be able to use a very

popular tool as well known as visual studio code or V.

S code but we're gonna have you use a cloud based version thereof.

There's no need necessarily to install the software on your own Mac or pc.

You can do that and you will do that by the end of the course if you would like.

But early on it will be a lot easier to use

this free cloud based version of their of at this U.

R. L. Here.

Now you won't need to use this throughout every class but rather for the courses,

problem sets or programming assignments

but more on those in the days to come.

V. S code itself now is gonna look a little something like this.

And in a nutshell, what you're going to see is that there's gonna be a file

explore up here where all of your files

that you yourself create are going to appear the

code you write meanwhile is going to be written

and editable way up here via these tabs.

And then down below, is there going to be something called a terminal window.

And this is going to be not a graphical but a command line interface, a cli interface

to an underlying server to which you will have access. But all that in the days to come

in terms of curriculum itself will focus on the

course's first lecture on things called functions and variables.

Functions are like actions and verbs that allow you

to get the computer to do something and a

variable is a place you can store data so that you can use and reuse it later.

Will then introduce you to conditional

conditional czar like forks in the road whereby you can decide to

do this or do this or maybe even this other thing.

It allows you to ask questions and then do something based on the answer.

Well then explore loops,

disability and python and programming languages more generally

to do something again and again and again.

Something that you very, very well might want to do with solving a particularly

large problem too.

Well then talk more technically about things

called exceptions which are mechanisms in python

and other languages for handling and detecting

errors in your own code or someone else's

will introduce you to libraries,

third party code written by other people that

you can somehow integrate into your own programs

so as to solve the problems you care

about more without having to reinvent others wheels.

Well then introduce you to unit tests,

a standard mechanism for not just writing code but

testing your own code so that you can be

much more confident that what you use what you

shipped to the world is in fact correct.

And then we'll explore file input and output i o

that is the ability to read files that have already

been saved to write files that you now want to

create will be able to do that programmatically with code

and then we'll look at regular expressions.

A feature to that exists not only in python but other languages that allows

you to define patterns via which you can match other sequences of text.

For instance, when a user registers for an app or a website,

you can validate somehow that they've actually given you a U R L.

Or an email address or some other type of text that you expect.

And then lastly we'll focus on object oriented programming or rop

a general poached to programming that allows you to solve larger,

more complicated programs a little more readily by allowing you

to model some real world concepts in your actual code.

And along the way will you have an opportunity to learn all

the more each of these concepts by way of the courses,

problem sets or programming assignments via which you yourself will write,

test and then ultimately submit code All this and more.

This is CS 50's introduction to programming

with python.

We're going to just take a quick break here.

We're going to fix some of our hardware and

then we're going to resume with lecture zero.

We'll be back in just a moment here.

All right,

this is CS Fifty's introduction to programming with

python and this is our week on actually.

Can we start that over?

Sorry.

Sorry. Hello,

fix this.

Let me just think for a 2nd Carter.

All right.

This is CS fifty's introduction to programming with python and this Oh sorry,

one more time, forgot.

Mhm.

All right. This is CS Fifty's introduction to programming with python.

My name is David malin and this is our week on functions and variables.

But odds are many of you. Most of you have never actually programmed before.

So let's start by doing just that.

Let me go ahead here and open up my computer and

on it a program called Visual Studio Code or V.

S code which is just a very popular program nowadays for actually writing code.

Now you don't have to write code using this particular tool.

In fact, all we need at the end of the day is a so called text editor.

A program for writing text and heck if you really want,

you could even use something like google docs or Microsoft word,

you'd have to save it in the right format.

But really at the end of the day,

all you need is a program for writing text because that's what code is

text. Now.

Within this particular program,

I'm going to have the ability to create one

or more files via this top portion of the screen

and I'm going to do so by diving right in and doing this at the bottom of my screen.

At the bottom of my screen is a so called

terminal window and this is a command line interface or cli

interface to the underlying computer,

be it your Mac or your Pc or even some server in the cloud.

And what I'm going to do here is literally write code

and then the name of the file that I want to code, for instance, Hello dot pi.

As we'll soon see any program that you write in python generally has a file name that

ends in dot pi to indicate to the computer

that it's indeed a program written in python.

Now, you'll see here at the top of my screen, I've got a blinking cursor.

Now you'll see here at the top of my screen, I have a blinking cursor align one,

which is where the very first line of my code is going to go.

And then just a tab that reminds me of the name of this file. Hello dot pi.

And without even knowing much python,

I'm gonna write my very first program here as follows.

Print, open parenthesis quote.

Hello, comma world, close quote and close parenthesis.

And you'll see that at my keyboard. Some of my thoughts were finished for me.

I only had a type one parenthesis and the other one automatically appeared.

And that's just the feature that will see of tools like this tool here.

Now, even if you've never programmed before,

odds are you can guess in for what this simple

program is going to do and it's only one line.

Print open parenthesis, quote. Hello world. Close quote closed parenthesis.

Indeed, when I run this program, ultimately,

it's just going to say hello to the world.

And in fact, this is a very famous,

perhaps the most canonical program that you can write is

your very first program in python or any other language.

And so that's what I've done here.

But on my Mac, my PC, even my phone,

I'm generally in the habit like you of running programs by

double clicking an icon or just tapping on the screen.

But I see no such icons here.

And in fact,

that's because my interface to at least my current Mac or PC or

some server in the cloud is again only a cli command line interface,

which even though it might feel like it's a step back from

the menus and buttons and icons that you and I take for granted

every day you'll find we think that it's ultimately a much more powerful

interface and incredibly popular to use among programmers in the real world.

So to run this program,

I'm gonna have to use a command and I'm gonna move my cursor back down

to the bottom of the screen here where previously I already ran one command,

the command code which has the effect of opening ves code in my computer and

then I passed in the name of the file that I wanted to code up.

Now, I have a chance to type a second command and you'll see,

I see a second dollar sign.

The dollar sign here doesn't indicate any kind of currency or money.

It just is the symbol that's generally used to indicate your prompt

where the command line interface wants you to put those commands.

Now the command I can run here

is going to be this. I'm going to run python of hello dot pi now. Why is that?

Well, it turns out that when I actually write code in a language like python,

it's of course stored in that file.

Hello dot pi

but I need to interpret the code top to bottom left

to right so that the computer knows what to do.

Indeed, at the end of the day, even if you don't really know much about computers,

you've probably heard that computers only understand zeros in one,

the so called binary system.

Well, if that's the case,

then something that says prince and parenthesis and

quote unquote Hello world is not surely zeros

and ones we have to somehow translated into

the zeros and ones that the computer understands.

Now, fortunately, so long as you've installed such a program in advance,

there's a program as well as a language called python.

So python is not only a language in which we're going to write code,

it's also a program otherwise known as an

interpreter that you install for free on your own

Mac or pc or some server in the cloud and you can then run that program,

that interpreter passing to it as input the name

of your file like mine here Hello dot pi.

And then that program that interpreter will handle the process of reading it top

to bottom left to right and translating it effectively into those zeros and ones

that the computer can understand.

So let's do just that. Let me go back to V. S code here.

I already typed out python of Hello dot pi but I didn't get

hit enter and that's what's now going to kick off this command.

And hopefully if I didn't mess any of this up,

I should see my very first program's output to the screen

and

voila,

hello world.

So if you two have typed exactly that same

code and have executed exactly that same command,

you will have written your very first program in this case

in python.

Well now let's take a step back and consider what is it that we

actually just did and what is it we're looking here on the screen.

Well, first and foremost in most any programming language,

you tend to have access to what are called functions.

A function is like an action or a verb that lets you do something in the program.

And generally speaking,

any language comes with some predetermined set of functions,

some very basic actions or verbs

that the computer will already know how to do for you,

that the language really will know how to do for you and you,

the program or the human can use those functions that

will to get the computer to do those things.

Now,

the program in question here Hello dot pi is using

one function and you can perhaps guess what it is.

That function is of course going to be this function.

Print and that print function of course,

doesn't print some preordained string of text that

is to say it prints whatever it is.

You want it to print and here to do.

We have another piece of terminology in the world of programming namely arguments.

An argument is an input to a function that somehow influences its behavior.

The people who invented python of course didn't necessarily know what it is.

You and I are going to want to print to the screen.

So they designed this print function using these parentheses with

the ability to take as input some string of text,

be it in english or any other human language.

That is what you want. This function ultimately to print onto the screen.

And what is it that the programs ultimately doing on the screen?

Well, it's printing of course,

it's showing us Hello world on the screen and

that's generally in programming known as a side effect.

It can be visual, can be audio in this case,

it's something that appears on the screen and

functions therefore can indeed have these side effects.

One of the things they can do as this verb er

action is to display on the screen as a side effect,

something like those world.

Words that we wanted.

Hello world,

So that's my first program and you know, I'm feeling pretty good,

everything worked as planned.

I didn't make any mistakes.

But honestly when you're learning how to program and

even once you've learned how to program years later,

you're going to make mistakes and those mistakes of course or refer to

a term you might already know which is that of a bug.

A bug is a mistake in a program and they can take so many forms and take

comfort perhaps in knowing that over the coming

weeks you're going to make so many mistakes.

You're going to have so many bugs in your code just like I did.

And just as I still do and those bugs themselves

are just mistakes that are problems for you to solve.

And over the weeks to come we're going to give you a lot of tools,

both mental and technical via which you can solve those problems but just

don't get discouraged if when writing your program for the first time,

it doesn't even work that first time.

It will with time with practice and with experience.

So let me deliberately now make a mistake that there was

a non zero chance I might have done accidentally already.

But I got lucky.

Let me go ahead and just suppose I forgot to include something

like the closing parenthesis at the end of this line of code,

You know, the code is almost correct.

It's like 99% of the way there, but now that I've pointed it out,

it's pretty obvious that it's missing that closed parenthesis,

but even little seemingly minor details like that that you and I as humans wouldn't

really care about and if you're sending an email or a text message or whatever,

it's just a typo, it's not that big a deal.

It is going to be a big deal to the computer,

a computer is gonna take you literally and if you

don't finish your thought in the way the language expects,

it's not going to necessarily run at all.

So let's do this,

I'm going to go ahead here and clear my screen

down at the bottom just so I can start fresh and

I'm gonna go ahead and run this version of my

program after having made that change by deleting the parenthesis,

I'm gonna go ahead and type python again of hello dot pi

and this time when I hit enter, I'm hoping I'm gonna see hello world.

But here we have now a whole bunch of errors. One name

now, here we have an error on the screen. A so called syntax error which refers to

my having made a mistake at my keyboard and if this one,

fortunately is pretty straightforward.

It indeed says that

this open parenthesis was never closed and so that's

probably pretty intuitive now what I need to do,

I need to of course to close it.

Unfortunately, sometimes the error messages,

we'll see in the coming weeks are not going to be nearly that user friendly,

but they're too again with experience with practice.

Will you get better at debugging such programs?

Let me now make sure that I indeed fixed it correctly. Let me go ahead. Run now.

Hello dot py and hit enter And voila,

we're back in business.

Well, let me pause here and see

if we have any questions now about

python itself writing or running even the simplest

of these programs.

Any questions here from the group?

Let's go ahead and call on Jeremiah. Your question.

Thank you sir. I

I

want to ask if it is not possible

to run the Covid are using a common line interface.

Sorry, the terminal window, is it possible to run the

in the terminal window?

Your, I'm sorry, your audio is breaking up a little for me. Can you say it once more?

No,

I think we lost you Jeremiah.

Okay, let's move on to another question.

And if Jeremiah,

you can still hear me go ahead and ask via the chat and we'll

see if we can come back to that Horatio if I'm saying that right,

your question.

Okay.

Mhm

Okay, well, first of all, thank you for this. Great curse.

So my question here is something you mentioned

that you can write code inside of word,

even if if you wanted to you just have to format it correctly.

So

could I want to write code inside a word or for example Microsoft Excel.

And what's the barrier to doing that And why why does

visual code studio is is the tool that we choose?

What makes it better than Word or Excel. If all we need to do is write text.

A really good question and allow me to very explicitly say to

the entire internet that you should not write code with Microsoft word.

I mentioned that only because it's a tool via which you can write text and code is

at the end of the day just text but it's not the right tool for the job.

We don't need bold facing underlining paragraphs and the like we generally

want something much simpler than Microsoft word or google docs and Soviets.

Code is an example of just a more general purpose text editor.

Its purpose in life is to allow you the human to edit text.

Nowadays these text editors come with many more features.

In fact you'll notice that even in my code here, even though it's just one line

there's a bit of color to it. The word print for me is appearing in blue.

The parentheses are black and we'll see as we might write more lines of

code more and more of the lines will come to life in various colors.

Now that's just one feature of a text editor will see to that.

It has features like this built in terminal window.

It's going to have a built in tool for debugging or finding problems with

code and it's just a very popular tool nowadays but there are many,

many others out there.

You're welcome to use them for this course and beyond.

We just happen to use this one in large part to because you can also use V.

S code nowadays

for free in the cloud.

About one other question here on programming with python

or Hello world or syntax more generally.

Thanks for that question Jeremiah, I think we have you back

once again. And I was trying to ask if

it is not possible to run the computer using the terminal window

I think I heard. Is it not?

If it's possible to run the program without the terminal window.

Are you okay? You froze for me again, but let me in for what the question is.

So in this environment as I've configured my computer,

I can only run these python programs via the terminal window.

Now, that's good for me,

The programmer or the person who's trying to learn how to program.

But it's not very good if you want to ship

this software and have other people use your actual code.

You can absolutely write programs and then allow other people to use,

not a command line interface, but a graphical user interface or gooey G.

U I.

This is just one mechanism and perhaps I think

the best one with which to start writing code

because eventually it's going to give us a lot

more control allow me to forge ahead here.

But please feel free to continue asking questions along the way if only via the chat.

And let's consider now how we might go about improving this program,

lets go about improving this program to make it a little more

interactive.

And not just assume that everyone is going to

want to be greeted more generically as Hello World.

Let's see if I can't get this program to say something like Hello,

David or Hello Jeremiah or hello, Horatio or whatever the actual user's name is.

Well to do this, I'm gonna go ahead and do this. I'm going to go back up to hello dot pi

and my code editor up top

and I'm going to go ahead and ask the user for some input now to do that.

I think I'm gonna need another function.

And indeed,

python comes with many functions among which

are print and another function called input.

And if I use this function called input inside of its parentheses,

I can now put a prompt a string of text, so to speak

that I want to prompt the user with in order to get

their input and I'm going to say something like what's your name?

Question mark.

And then I'm gonna add a space and then I'm gonna go ahead and close my quote there.

Alright now I'm gonna go ahead and for now still print Hello world.

This program is not done but I want to see how far I've gotten in my terminal window.

I'm going to run python of Hello dot pi

enter. Okay, we're making progress.

It seems that this new function input is indeed prompting me the human for inputs.

I'm going to type in my name, David and it enter.

Unfortunately it doesn't really do anything with my name.

It just outputs it immediately.

Alright well I could fix this right,

I could go up to line two and I could change world to David and then back

in my terminal window here I can do python of hello dot pi enter what's your name?

David enter and there we go. All right now I'm up and running now my program is working

as intended. Of course.

This isn't really working as intended here.

Let me go ahead and try pretending to be my colleague carter here.

Well carter's name is this. I'm gonna go ahead and enter and I'll see. Of course.

Hello carter.

Well obviously not because I've hard coded, so to speak,

I've written literally my name inside of the strength so we need some way now

of actually getting back what the user's input

is and doing something with it ultimately.

And for this we're going to leverage

another feature of programming specifically a feature

of some functions which is that they can have return values as well.

If you think of input as being again this action, this verb,

you can actually personify it as maybe a person like a friend of yours that you've

asked a question of and you've asked your friend to go get input from someone else,

go ask that person their name.

And if your friend comes back knowing that person's name, well,

wouldn't it be nice if they handed that name back to you?

That's kind of what we need metaphorically.

The function to do is get the user's input and then hand it

back to me so that I the programmer can do something with it.

But if it's going to be handed back to me,

I kind of want to put it somewhere so that I can then print it back on the screen.

I need to do the equivalent of take out like a piece of paper

or post it note right down on this piece of paper what it is,

the human has said so that I can then feed it into as input that print function.

And to do that we're gonna need one more feature of programming

namely variables and odds are almost everyone is familiar with variables

from math class way back when X and y and Z.

And the like well programming has that same capability.

This ability to create a variable in this case, in the computer's memory,

not just on a piece of paper and that variable can store of value a number, some text,

even an image or video or more variables.

Just a container for some variable variable is just a container for some value

inside of a computer or inside of your own program.

So how do I go about expressing myself in this way?

Well,

I think what I'm gonna do is introduce a variable

that's a little more interestingly named than X or Y.

I could just say this X equals

input. But I'm gonna use a better name than a typical mathematical variable here.

And I'm going to literally call my variable name. Why?

Well, in programming, because I have a whole keyboard in front of me,

I can use more descriptive terms to describe what it is I'm writing.

And now though there's an opportunity to consider a specific piece of syntax.

We've seen parentheses, we've seen quotes,

all of which are necessary when passing inputs to a function.

But this equal sign here that's in between input on

the right and name on the left is actually important.

And it's technically not an equal sign per se.

It doesn't mean equality as much as it means assignment.

So in python and many programming languages,

a single equal sign is the assignment operator.

And what that means specifically is that you want to assign from right, two left,

whatever the user's input is.

So the equal sign copies from the right

to the left.

Whatever the return value of the function on the right is

so again the input function clearly gets input from the user.

That's why I was able to type my name or carter's

but it also sort of behind the scenes hands that value that return value back to me,

the programmer.

And if I use an equal sign and a variable no matter what I call it,

I can store that input in that variable.

So as to reuse it later.

So now sitting in the computer's memory

somewhere is a container containing David quote,

unquote or carter quote unquote or whatever the human has typed in.

But here it's easy to make a mistake I suppose I decide to try to print that name.

And so I kind of on a hunch type in this Hello common name.

Just kind of plugging in the name of the variable.

Well let me go ahead here and run python of hello dot pi and hit enter.

That's going to prompt me for my name. And let me type in my name. D. A V I. D.

But I haven't hit enter yet

and perhaps via the chat. What's going to happen here when I now hit enter?

I'm hoping it says Hello David.

I'd be okay if it says hello world but I don't want it to say what it's actually

gonna say and yet what we're seeing in the

chat is well it's probably gonna say literally hello comma

name. So that's not quite right.

So we need another way of printing out the

value inside of that variable rather than just this word

name. Well, let me try this in a couple of different ways. Let me try this as follows.

Let me go ahead and maybe undo this because

I've gotten pretty good already at saying hello.

So let's let's you know, let's draw that line in the sand and just say all right,

let's get at least get hello comma out the door.

Let's now print name. And just on a hunch, I'm gonna try this.

I'm gonna use print again because you can use

these functions as many times as you need.

And I'm gonna pass to the name to the print function. The variable called name.

But notice I'm being a little clever now.

I'm not putting it in double quotes because we've seen

already that double quotes means literally print out N A

M E I'm getting rid of the quotes this time

in hopes that now by passing the variable called name

to the function called. Print

it will in fact go about printing the contents

of that variable that is its so called value.

Alright, let's go ahead and do this here,

python of hello dot pi enter what's your name, David.

And now crossing my fingers still I say hello comma. David.

All right. So it's not the best program.

I'm I'm kind of cutting some corners here, so to speak.

I'm saying hello, David on two separate lines. So it's not as elegant.

It's not as pretty.

It's not as grammatically appropriate in english as just

saying it all in one breath on one line.

But at least I've solved the problem just not very well yet.

But let me take a step back now and perhaps introduce

a couple of other concepts with which we should be familiar,

which is as our programs get longer and they're no

longer just one line or two or even three.

Eventually our programs are going to become dozens of lines,

maybe even hundreds of lines long.

Let's set the stage for success moving forward,

it turns out that python and a lot

of programming languages also supports something called comments,

comments are notes to yourself in your code and you

include comments by way of a special symbol in python.

It's going to be the hash symbol typically.

And that allows you to write the equivalent of a note to yourself.

But in a way that's not going to break your code.

The computer actually ignores your comments. It's just there for you.

It's just there for your teacher.

It's just there for your colleague with whom you're sharing.

Ultimately, that code.

So if I go back to V. S.

Code here and I just want to add some comments to this program to

explain to my teacher to myself to my colleagues what this program is doing.

Well, let's go ahead and do that. I'm going to go at the very top of my program

and online one. Now I'm gonna move that original line of code down a bit.

I'm gonna add a hash and I'm gonna say something like this. Ask user for their name.

Now I don't have to use that language. I don't have to use that that text.

I could use any human language whatsoever. It doesn't have to be english.

But I'm gonna now below that

just say something like this,

say hello to user and you'll notice that the s

code by default is kind of graying out my comments.

They're no longer blue, there's no red, there's no color in them.

And that's just because their notes to myself and

the computer ultimately is going to ignore them.

But what we have now is to comments. Ask user for their name.

And then a second comment, say hello to user.

And I've just kind of commented each chunk of code like each line or lines,

plural of code

that are doing something noteworthy. Why?

Well, tomorrow morning when I wake up having, you know, slept for quite some time,

forgotten what it is.

I did the previous day.

It's convenient with comments to just see in

english or your own human language what it

is this program is doing so that you don't have to read the code itself.

And better yet

if there's maybe a mistake down the road,

you can read what your intention was and then you can look at the

code and figure out if your code is now doing what you intended.

So this isn't really necessary for a program this small.

It's pretty obvious with just one or two or three lines what the program is doing.

It's just as fast to read the code than the comments.

But getting into this habit is generally a good thing

to comment your code every one or few lines,

so as to remind yourself and others what it is your intent and your code is doing.

What's nice about comments to is this

comments can also serve to be sort of a to do list for yourself. There's this notion in

programming of pseudo code, pseudo code isn't a formal thing.

It's not one specific language.

It's just using english or your own human

language to express your thoughts succinctly methodically algorithmic.

Lee, so to speak.

But pseudo code therefore,

because it's not python and it's not necessarily english,

it just kind of allows you to outline your program even in advance.

So for instance, if I wasn't sure today how I wanted to go about writing this program,

but I didn't know what I want to do.

I could have started today by just writing this in Hello dot pi. No code.

I could have written just a couple of comments to myself.

Step one, ask user for their name.

Step to say hello to user then once I've outlined my program in

pseudo code then I can go in there and say All right.

How do I ask the user for their name while I can do input quote unquote,

what's your name?

Question mark.

And then on the left here I can maybe put a variable and assign it to that.

Okay, how do I say hello to the user?

Well, I know I can use print to say things on the screen. Let me say hello, comma.

Uh and let me Okay, let me now print the person's name.

So again, pseudo code is a nice way of structuring your to do list,

especially if you have no idea how to write the

code because it breaks a bigger program down into small

bite sized tasks. All right. Let me pause here to see if there are any questions on

comments, pseudo code,

return values

or variables.

Any questions we can clear up here.

Yeah. How about a question from juliana if I'm saying it right.

Hello? Hello, can you hear me? We can hear you

okay. Yeah.

My question is does the function input work for

any type of information or only four words?

Really good question.

Yeah, really good question.

So according to its documentation and we'll

look more at formal documentation soon.

Input is going to expect what's called a string.

That is a sequence of text, be it in english or any other human language,

but it's indeed going to be expecting text with which to prompt the user.

Good question. How about another question from the group. If we could

yeah, Mohammed.

I wanted to ask how I make several land comments.

Let's say that again. How can you do what?

A comment in several lines,

a comment in the cli

and many lines many lines of comment.

Oh, how do you do many lines of comments?

If if I'm hearing you correctly, sure you would just keep doing them like this.

You just prefix each of the lines with a hash symbol like I'm doing here.

There is another technique for doing multi line comments

in python that actually tend to have special meaning.

You can do three double quotes like this and then anything in between here

is a comment. That's another technique.

Or you can use single quotes as well, but more on those I think another time.

All right, well, if you don't mind,

let me forge ahead here and see how we might improve this program further and also

introduce a few other features that we might want to take into account over time.

So it turns out that we can certainly improve on this program because

it's a little disappointing that I'm cutting this corner and saying hello comma.

And then on a new line printing out name,

like we can do better and most programs you use on your

phone or your laptop certainly keep text together when people want.

So how can we go about doing that?

Well,

there's a few different ways and in fact the goal

here is not so much to solve this one problem,

but to demonstrate and emphasize that in programming, python and other languages,

there's so many ways sometimes to solve the same problem.

And here's one way to solve this problem.

Let me go in here and let me go ahead now and say hello, comma.

And let me just add to the end of that the user's name.

So I'm using Plus and kind of an interesting way. This is not addition per se.

I'm not adding numbers obviously,

but I do kind of want to add the person's name to the string of text.

Hello comma. Well, let me go now down to my terminal window and run python.

Hello dot pi again enter, what's your name? I'm gonna type in David enter

okay, it's better.

It's better. But there's a minor bug, albeit aesthetic here.

There's missing space. But let's just use some intuition here.

While if I'm missing the space after the comma,

why don't I go ahead and just add it manually here,

let me now rerun the program python of Hello dot pi enter.

David enter

and there we go.

Now we have something that looks a little prettier in terms of english grammar.

Hello comma, space, David.

And now if we rewind,

you might have noticed before or wondered why I

had this seemingly extra space after my question mark,

namely here,

there's a space after the question mark before the double

quote and that was just for aesthetics to I wanted to

move the user's cursor one space to the right so that

when I type their name or they type their name,

it's not immediately next to

that same question mark there. But there's other ways we can do this.

It turns out that some functions print

among them actually take multiple arguments.

And it turns out that if you separate the inputs to a function,

the so called arguments to a function with a comma, you can pass in not just one but 23,

four or 5 onward.

So let me go ahead and pass in not just hello comma space,

but that

followed by name.

And this is a little confusing potentially at

first glance because now I've got two commas

but it's important to note that the first comma is inside of my quotation marks,

which is simply an english grammatical thing.

The second comma here is outside of the quotes,

but between what are now two separate arguments to print.

The first argument is hello comma space.

The second argument is the name variable itself. So let's see how this looks,

python of. Hello dot pi enter

what's your name? David enter.

Okay, I've kind of overcorrected now I've got two spaces for some reason.

Well it turns out and this is subtle when you pass multiple arguments to print

it automatically inserts a space for you.

This was not relevant earlier because I was passing in one big argument. Two.

Print all at once by using that plus operator.

This time I'm passing in two because of the Kama.

So if I don't want that extra space, I don't need to pass in one myself,

I can just do this.

And now notice if I run this program again, python hello dot pi

type in my name, David.

Now it looks grammatically like I might want.

Now, which of these approaches is better.

This approach uses a function print with two arguments Hello,

comma and the name variable.

The previous version recall technically used one argument

even though it looked a little curious,

it's one argument in the sense that the computer just like

mathematicians are going to do what's inside of parentheses first.

So if inside of parentheses you have this string of text, Hello,

comma and a space which I need to add back, then you have a plus,

which means not addition per se.

But concatenation to join the thing on the left and the thing on the right.

This ultimately becomes the english phrase Hello, comma space, David.

And then what's being passed ultimately to

the function is technically something like this.

But it's doing it all dynamically,

it's not me typing in David as I secretly as I discreetly did earlier.

It's figuring out dynamically what that value is after concatenation.

Hello with the value of name. And then passing that ultimately to print as the

sole argument.

Let me pause here to see if there's any questions on

numbers of arguments now.

Two functions

Questions on this. Yeah. How about over two

Sherman

your question?

Hello? Hello, David. I have a question actually with the return values actually.

So

the question here being which are using rhythm values? Can we use a function

many times to solve a certain problem which we can encounter many times in our code.

You can you can use a function many different times to solve some problem.

What will soon see though is if you find yourself as the

programmer solving a problem the same way again and again and again.

It turns out you'll be able to make your own function so that you

don't have to keep reusing the basic ones that come with the language.

How about one other question from uh, zigun if I'm saying that right?

Yes. So hello. Um

I was curious about the coma and the plus sign.

So after plus sign, can we give just one variable and after coma again,

we give multiple variables like what is the difference?

Um in

a good question.

So,

in the context of strings and I keep using that

term string is a technical term in a programming language.

And again, it means a sequence of text, a character, a word, a whole paragraph even.

So the plus operator is not just used as we'll see for addition of numbers in python,

like we do on paper, pencil,

but it also is used for concatenation of strings on the left and the right.

If you did want to combine not just two strings left and right, but a 3rd and 1/4.

You can absolutely keep using plus plus plus plus and chain them together,

just like in math.

Eventually that's going to start to look a little ugly, I dare say,

especially if your line of code gets along.

So there's better ways that will actually soon see

a good question as well.

Well,

let me come back to the code here in question and see if we can't show you just a couple

of other ways to solve the same problem along the

way emphasizing that what we're technically talking about here.

Yes. Our strings.

But there's even a technical term for these strings in python, it's just stir,

so to speak, str for short for string.

As you may know if you programmed in other languages.

People who invent programming languages like to be very

succinct to the point. So we tend to use fairly short phrases to describe things

not necessarily full words.

So while you might say string technically in python,

what we're really talking about these sequences of text are technically stirs.

This is an actual type of data in a program,

but we'll soon see that there's other types of data in programs as well.

In fact, let's see if we can't improve this in one other way.

I like the progress we've made by keeping everything on the same line. Hello, comma?

David?

All on the same line. What more though could we do in terms of solving this problem?

Well, it turns out that we didn't have to give up entirely with using print twice.

Let me rewind a little bit and go back to that earlier

version where I wasn't really sure how to solve this problem.

So I was using print once to print out just the Hello and the space and the comma.

And then I used print again to call to print name. That strictly speaking wasn't bad.

But there was this visual side effect that I just didn't like.

It just looked ugly to have these two lines of text separate from one another.

But there's another way to fix this.

Clearly,

it seems to be the case that the print

function is automatically out putting a blank line,

It's moving the cursor automatically for me to the next line because that's why I'm

seeing Hello on one line and David on the next and then my prompt,

the dollar sign on the line below that.

So print seems to be presuming automatically that you wanted to move

the cursor to the next line after you pass it some argument.

But you can override that behavior again,

functions take arguments which influence their behavior.

You just have to know what those arguments are and it turns out

that if we look at the documentation

for python's print function, we can actually look up at this u R l here

dot python dot org is where all of python's official documentation lies.

If I poke around,

I can find my way to more specifically this U R L

here where I can find all of the available functions in python

that and the documentation therefore, and if I go a little more precisely,

I can even find specific documentation for the print function itself.

And rather than pull that up in a browser,

I'm gonna go ahead and highlight just one line from that same U R l, which is this.

And this is easily the most cryptic thing we've seen yet.

But this is the official documentation for the print function.

And one of the best things you can do

when learning a programming languages honestly learn to read

the documentation because truly all of the answers to

your questions will in some way be there.

Even though admittedly it's not always obvious.

And I will say to python's documentation isn't necessarily the easiest thing,

especially for a first time or a novice programmer.

It to just takes practice.

So try not to get overwhelmed if you're not sure what you're looking at.

But let me walk you through this example.

This again is a line of text from

python's official documentation for the print function.

What this indicates as follows. Is this

the name of this function is of course print

then there's a parenthesis over here and

another closed parenthesis way over there.

Everything inside of those parentheses are the

arguments the potential arguments to the function.

However, when we're looking at

these arguments

in the documentation like this,

there is technically a different term that we would use.

These are technically the parameters to the function.

So when you're talking about what you can pass

to a function and what those inputs are called.

Those are parameters.

When you actually use the function and pass in values inside of those parentheses,

those inputs, those values are arguments.

So we're talking about the exact same thing,

parameters and arguments are effectively the same thing.

But the terms you use from looking at the problem from different directions,

when we're looking at what the function can take

versus what you're actually passing into the function.

So what does this imply? Well, this syntax is pretty cryptic,

but at the moment just know that an asterisk,

a star and then the word objects means that

the print function can take any number of objects.

You can pass in zero strings of text, one string,

like I did two strings like I did or technically infinitely many.

If you you really want though, that code is not going to look very good.

After that we see a comma, then we see another parameter here

called sep short for separator in english and notice

the equal sign and the single quote space.

Single quote. So quote unquote space.

I don't know what that is yet, but I think we've seen a hint about it.

Let's focus though. For a moment on this.

The print function takes another parameter called end.

And the default value of that parameter is apparently based

on this equal sign and these quotes a backslash in.

And what is backslash in?

If you'd like to chime in the chat,

anyone who's programmed before has probably seen this though.

If you've never programmed before, this might look quite cryptic

backslash. N

means new line.

And it's a way textually of indicating if and when you want

the computer effectively to move the cursor to the next line,

create a new line of text.

And so technically, if we read into the documentation,

we'll see more detail on this.

The fact that there's a parameter called end

and the documentation for the print function just means that by default

this print function is going to end every line with backslash end.

You don't literally see backslash in. You see a new line. You see the cursor

moving to the next line.

Now. By that logic, let's move backwards

step for separator.

The default value of separator

is apparently a single blank space.

Well, where have we seen that while recalling an earlier example when I passed in.

Not just one but two arguments to the print function

recall that they magically had a space between them.

In fact they had that space plus my own space.

And that's why I deleted my space because at that point it was extra.

So this just means that when you pass multiple arguments to print by default,

they're going to be separated by a single space by default.

When you pass arguments to print,

it's the whole thing is going to be ended with a new line

now just by knowing this.

And let me literally wave my hand at the rest of the documentation for another day.

There's more things that print can do, but we're going to focus just on set and on end.

Let's see if we can't leverage this now to solve the original problem.

The original problem was this.

I don't like how Hello, comma, David is on two different lines.

Well,

that's happening again because print is automatically printing out a new line.

So let's tell it not to do that.

Let's tell it by passing a second argument to the first use of print

to say end equals quote unquote,

not backslash n which is the default automatically.

Let's make it quote unquote. Nothing else.

Let's override the default value. So there is no new line.

There's literally nothing there. And let's see what happens.

Let me now go down to my terminal window and clear it

and I'm gonna run python Hello dot pi enter, I'm going to type in my name,

David and I think now everything is going to stay on the same line because and it did

this line here. Five is going to print out Hello comma space.

But then nothing at the end of it because I changed it to be quote unquote.

The second line is going to print the name,

David or whatever the human's name is and it will move the cursor

to the next line because I didn't override the value of end there

just to see this more explicitly.

If you do something cryptic, like, well, I have no idea what's going on.

Let me just put in temporarily three question marks here.

We'll see the results of this to let me go back down to my terminal window. Run python.

Hello dot pi, what's your name, David. And now you see literally really ugly output.

But you see literally what's going on. Hello, comma space,

then three question marks, End that print statement. And then you see D A V I D.

So not a good outcome, but it demonstrates just how much control we have here. Two.

And let me rewind further recall that in our other version of this

when I passed in Hello, comma and name,

they were separated by a single space. So python of hello dot pi

D A V I D enter. That just worked.

Well, what if we override the value of sep for separator instead of being one space,

we could say something like question mark, question mark,

question mark Just to wrap our minds around what's going on there.

Let me now do python of Hello dot pi

David enter

and you see to these two inputs hello comma and the name

are now separated in an ugly way by three question marks.

Because I've overridden the default behavior of cep.

And even though the documentation uses single quotes,

I've been in the habit of using double quotes in python, you can use either

strictly speaking,

it doesn't matter but you should be consistent

and I generally always use double quotes.

Python's documentation though always uses

single quotes

questions now on these types of parameters and allow me

to propose that we give these an official name.

Up until now when we've been passing values to print,

those are called positional parameters,

positional in the sense that the first thing you pass to print gets printed first.

The second thing you pass to print after a comma Gets printed 2nd and so forth.

But there's also these things we've now seen called

named parameters named SCP separator or end E N.

D. For the line ending. Those are named parameters because one they're optional.

And you can pass them in at the end of your

print statement but you can also use them by name.

Okay. Uh Mateen if I'm saying that right? Your question.

Um Yeah I do have my voice. Sorry,

this may be a weird question but I was wondering what if someone

wants to like add actually quote quote quotation marks within the quotation marks.

Yeah I like how you think this is what we would call a corner case.

Right just when we've made right this is this is all sounding great.

At least as far as programming goes. But wait a minute.

What if you want to print a quote? That's a really good question.

Well let's see if we can't figure this out.

I suppose that I want to print out not just the user's name.

Let me simplify this further.

Let me go ahead and get rid of a lot of this and let me just say something like hello. Um

Maybe I'm being a little sarcastic here Hello friend.

You know in that kind of tone.

Well this is not gonna work actually because you

are trying to use quotes to be like friend

and finger quotes but you're also trying to end

the sentence and if I try running this,

let's do this, python Hello dot pi you'll see that this is just invalid syntax.

Perhaps you forgot a comma and this is actually a bit annoying.

Sometimes the error messages you see are misleading.

Like the computer,

the language doesn't really know what's going on so it gives its best guess but

it's not necessarily correct but I can solve this problem in a couple of ways.

I can do this.

I can change my outermost quotes to single quotes because recall a moment again I

said you could use double quotes or single quotes so long as you're consistent.

So that's fine.

If you use single quotes on the outside,

you can then use double quotes on the inside and you'll see them literally.

So for instance if I run python hello dot pi there we go. Hello friend.

But there's another way if you insist on using double

quotes as you might want to just to be consistent,

you can also use that backslash character again,

we saw the backslash in a moment ago and that meant

we don't want a literal end to be in the output.

We wanted a new line.

So the backslash actually represents what's called an escape character.

An escape character is one that you can't just type necessarily

once on your keyboard you need to express it with multiple characters

so I can actually put back slashes

in front of these inner

double quotes so that the computer realizes, oh wait a minute,

those aren't literal,

those aren't quotes that finish or start the thought their literal quotes.

So now let me go back to my terminal window,

run python of hello dot pi enter and now it's working as well.

So escaping is a general technique that allows us to do that too.

And if I may let me rewind now on these examples

and go back to where we left off with my code,

I'm just undoing all of that because I want to get back to

the point ultimately of specifying now a final way of solving this problem.

Well, it turns out that we have yet another way we can solve this problem,

which is perhaps

the most frequently done now, or at least the most

elegant when it comes to setting us up for longer and longer

uses of strings.

You can use a relatively new feature of python that allows you to do this.

You can literally put not the name of the variable

like that in your string because we already saw.

This is wrong, right. If you do this, you will literally see Hello, common name.

But what if I do this?

What if I put curly braces or curly brackets around the variable name.

Notice V. S code is actually very subtly changing the color of it.

Soviets code knows something interesting is going on here.

Let me run this program but I'm not done yet

python. Hello? Dot pi enter D A V I D enter. Okay. Obviously not what I want,

but I need to tell python that this is a special string.

This is what we're gonna call a format string or an F. String.

A relatively new feature of python in the

past few years that tells python to actually

format stuff in the string in a special way and the symbol via which you do.

This is a little weird, but this is what the world shows.

If you put a lower case F at the beginning

of the string right before the first quote mark,

that's a clue to python, that this is a special string.

Let me format this in a special way for you. Let me now. Rerun the program python.

Hello? Dot pi enter D A V I D enter and now we see the goal this whole time. Hello, comma.

David.

We don't start with this way because I think if we did this the first way you'd be like,

why are we doing this?

What are all these magical symbols?

But this is just yet another way to solve the same problem.

Some people might argue. One way is better. Some people might argue that it's worse.

But ultimately

this is just another way to solve the problem

questions now on these F strings

or anything else.

Let's see how about we call over to

Piyush if I'm saying it right.

Uh can you hear me? Yes, we can hear you.

Hi.

Um so my question was it was related to the plus

operators that you've been using to calculate the two strings.

Could you use the plus operators to pass in parameters

in the same way you use the commerce to pass parameters.

A good question. But short answer. No.

As we've seen it thus far,

the plus operator is for concatenation two strings on the left and on the right.

The result of which is that you get a

brand new string that has the two things joined together

comma is the way that you separate for any function.

Individual arguments to that function.

So we've seen that we can use one or the other.

But that's because I'm solving the problem in a different way.

If I'm using the plus to concatenate two strings left and right,

I'm ultimately passing in one final string to the print function.

If I don't want to do concatenation,

if I've forgotten that I can use plus in that way I can

pass in two arguments to the print function separating them by a comma.

But one other question if we could yes, Shivani shivaji, if I'm saying it right,

still muted though you're a muted and zoom but we don't hear your microphone.

Still nothing. I'm afraid

if you don't mind,

let us bounce to someone else but feel free to ask in the chat and we'll come back.

Elijah, if you can hear me your question.

Oh

elijah say again. You were frozen for me.

My

okay, now we can hear you. What's your question?

Yeah.

Okay. I'm not sure if Elijah can hear me.

Why don't we come back to questions in just a moment if we could.

Apologies for the audio difficulties.

But let me propose that we consider now yet other things we can do with strings.

And it turns out that even as we've been doing

some relatively simple operations here,

we've generally been trusting that the user is going to cooperate.

And that is to say that they're going to actually type in what

we want them to type now just because they type a string though,

doesn't mean it's gonna look the way we want you.

And I honestly as humans are actually in the habit on websites

and apps of like accidentally hitting the space bar a lot,

either at the beginning of our input or at the end,

maybe because the space bar tends to be so big,

it's pretty common to get accidental spaces before or after some users input.

You and I are definitely in the habit

of not necessarily capitalizing words like we should if

we're sending text messages were probably being a little

quick and just sending everything in lower case.

For instance, if that's your style, if your phone is not fixing it for you,

maybe in a formal letter, you would capitalize things properly,

but you and I as humans,

we can't really be trusted to type things in a nice way necessarily when using

some piece of software, be it an app or website or something else.

But it turns out that strings themselves come with a lot of built in

functionality and you can see all of that in python's own documentation here.

The string

data type that we've been talking about comes with a lot of functionality built in

that means that we can manipulate the user's input to

do more than just join it with something else.

Like hello,

we can actually clean it up or reformat it in

a way that hopefully looks a little better for us.

So let me go back to my code here and let

me just demonstrate what might happen if the user doesn't cooperate.

If I go ahead here and run python of hello dot pi enter,

let me just sloppily hit the space bar a few

too many times why I just wasn't paying attention.

And I'm gonna type in my name D A V I D.

And I don't know, I hit the space bar a couple more times, like it's kind of a mess.

It's all lower case. That's not gonna necessarily look grammatically right?

It's got spaces here and here.

The program is going to print exactly that and that looks really bad.

At least if we're prioritizing aesthetics and grammar,

like why are there so many spaces after the comma.

This is not a very nice way to greet your users, but we can clean this up.

It turns out that built into strings, which again, is this data type, so to speak.

This type of data in python is the ability to actually do things to that string.

So let me do this. I can actually go ahead and do something like this.

Uh name equals name dot strip. And what does this do

remove white space from string.

And what do I mean by this?

Well, on the right hand side notice I've written the variable name called name.

I've then used a period or a dot and then I seem to be doing what's a function right.

Any time we've seen this function thus far, we see it's the functions name,

print or input, then we see a parenthesis, then another parenthesis.

And that's exactly what I see here.

But I'm using this function a little differently technically

this function is in this context called a method.

And what do I mean by that? Well, if name is a string a K A stir.

Well, it turns out according to the documentation,

there's a lot of functions that come with

strings in python and you can access that

functionality by using the name of a string,

like literally name here, then a period,

then the name of the function and then an open parenthesis and a close parenthesis.

Maybe some arguments inside of those parentheses,

but in this case it doesn't need any arguments.

I just want to strip the space from the left

and the space from the right of the user's input.

But that's not enough. I want to remember that.

I've stripped off that white space on the left and the right.

So I'm going to use the equal sign again here

and notice that just as before this doesn't mean equality.

This means assignment from right to left.

So when this line of code here. Name, dot strip

returns to me

a k a return value.

It will return the same thing that the user typed in but with no

more white space to the left or to the white to the right.

So then the equal sign assignment is going to copy that value from the

right to the left there by updating the value inside of my name,

variable.

So you cannot only assign values to variables.

You can absolutely change the value of

variables by just using the assignment operator,

the equal sign again and again and again and

it will just keep copying from right to left,

whatever the new value should be.

So now if I rerun this program, python of hello dot pi

enter,

I have D A V. I let's do it again. Space space space space space, D A V I D.

In all lowercase space space enter.

It's better.

It hasn't fixed my capitalization so I'm still

being a little sloppy with the first D.

But it has stripped off all of that extra space.

Super minor detail. Right? Like this isn't all that exciting.

But it just speaks to the power of what you can do with just a single line of code.

Now, what else can I do here? Well, I could capitalize the user's input.

Let me go ahead and try this. It turns out that I could also

uh do this name dot capitalize.

So let me go ahead and capitalize uh user's name and again I'm

making comments and there's no one right way to write the comments,

I'm just using some short english phrase is here to remind myself of what I'm doing,

what's now going on here.

Well, let me go ahead and run python. Hello Dot py enter

space. Space. Space space Space D A V I D. Space space enter.

Okay, now it's looking prettier. Right.

No matter how the user typed in their name, even a little sloppily,

I'm now fixing that.

But let's let's try something. I'm getting a little curious here. How about this

Space? Space Space Space Space D A V I D. Space malin. I'll use my last name now enter.

Okay, so ironically capitalized is not really capitalizing everything we want.

It's clearly capitalizing what?

Just the very first letter.

So it turns out that again,

there's other functions in python that come with strings.

And if we poke around the documentation scrolling through a U R l.

Like that, I bet we'll find another solution. One of which is actually this,

let's actually change this to title.

There's yet another function that come with strings

called title that do title based capitalization.

Just like a book or a person's name capitalizing the first letter of each

word and this is just gonna do a little more work for us.

So let's go ahead and run this. And as an aside, I'm kind of tired now at this point

of typing python python python all the time.

It turns out that when using a command line interface like this,

you can actually go back through all of your old commands.

What I just did a moment ago was I hit the up arrow.

That immediately goes back through my history of

all of the commands I've ever typed.

So this is just a faster way now for repeat myself than typing everything manually.

Let me go ahead and hit enter

space. Space. Space. Space. Space. D. A. V. I. D. Malin space, space all lower case

enter Now it's it's looking better now.

I've capitalized things and clean things up. But what about my code?

I've got like eight lines of code now, four of which are comments,

four of which are actual code.

Do I really need this much? Well, not necessarily. Watch what I can also do in python.

Let me not bother capitalizing the user's name separately.

Let me say this and capitalize capitalize user's name.

I can chain these functions together.

I can add title to the end of this and now what's happening?

Well again with a line of code like this,

you first focus on what's to the right of the equal sign.

Then we'll get to the left of the equal sign. What's on the right of the equal sign?

This line here.

Well what does this mean?

Get the value of the name variable like D. A. V. I. D. Space.

Then strip off the white space on the left and the right.

That is going to return a value.

It's going to return D A V I D space M A L A N without any white space to the left or right?

What do you want to do with that return value?

You want python to title case it that is,

go through every word in that resulting string and

fix the first letter of the first word,

the first letter of the second word and so forth.

And then now we can finish our thought,

copy the whole thing

from right to left into that same name variable.

And you know what, I can take this even one step further.

Why don't we go ahead and do this if we want? Let me get rid of all that.

And let me just do strip and title all on that first line.

And now we've gone from like eight lines of code to four.

It's a lot tighter. It's a lot neater.

And even though reasonable people might disagree,

it's arguably better because it's just easier to read fewer lines of code,

fewer opportunities for mistakes.

It just allows me to move on with my next problem to solve.

All right, let me pause here and see if there's any questions on these methods.

A method is a function that's built in to a type of value like these functions are

or on f strings which we saw a moment ago,

which will allow me to format strings. Uh Yeah. And naveen if I'm saying it? Right.

Yes. Hi, thanks David.

Um so is there a way to remove the spaces between

the spaces that I might have added a short answer?

No. If you read the documentation at that same U R. L.

Earlier,

you'll see that strip removes from the left and the right but not in between.

In fact there's two other functions that come with strings.

One is called El Strip,

the other is called our strip that allow you to do one or the other.

If we want to start getting rid of space in the middle,

we're gonna have to do a different trick altogether.

Other questions, how about Divya?

How many functions can we combine? Like this dot strip dot title? He'll combined.

So how many we can combine?

Yeah, a really good question technically as many as you want.

But at some point your code is going to start to look really, really bad, right?

Because the line of code is gonna get really, really long,

it's eventually going to maybe wrap around again and again.

So at some point you just kind of say like uh that's

too many and you start breaking it up into multiple lines.

Like I did maybe reassigning the value to the variable as needed.

And this is actually a good question if I can pivot to video off your question.

I mean what do people think if we could go

ahead and put everyone's hands down for a moment?

Let me ask this

is the way I've done this now with strip and title and input

all in the same line better than my previous approach in zoom.

You can use the yes icon or the no icon.

If you think this version is better say yes,

if you think this previous version was better,

for instance, this one here where we had everything broken out saying no

and then we'll see why in just a moment

I proposed earlier that reasonable people

can disagree and that's absolutely the case

doing it one way or the other isn't necessarily best. At least if you can justify it.

Let me go back to the most recent version here.

Alright,

so we're seeing a lot of yeses and a lot of knows why don't

we go ahead and call on one of the yes is if we could

someone who's voting Yes.

Why do you think the current version of this code is indeed better

than the previous longer version of the code.

Let's see what someone thinks and thank you Divya for teeing this up,

Raisa if I'm saying that right,

Yeah, that's correct.

Why is this better?

I think it's more readable.

So I can say this is the name from this is the name valuable.

It gets some input and then remove the space and give it a title and there you go.

You have a hello name. I think that's pretty reasonable. It's very readable.

At least if you're in the habit as you are in english of reading left to right,

it just kind of flows very naturally.

As a result,

the line to devious point is not really that long.

It's certainly fitting nicely onto the screen. So I think that's a good argument.

How about a counterpoint though?

Someone who voted no, if we could call on someone who thinks this is worse.

Andres if I'm saying that right,

yes, yes, can you hear me? We can yes. Why are you a no,

because it's not a reliable at all.

It seems like uh

it's a very longer line. So I think it's better to surprise.

Yeah, I I think that's persuasive to right, it's getting a little longer.

And even though my sentence here, what's your name is relatively short,

you could imagine that this could get even uglier quickly.

If I were asking a longer question of the user that's gonna

make this line of code even longer and therefore less readable.

It might be less obvious to me or my colleagues

that I am calling strip or that I am calling title.

It might be kind of an unexpected surprise.

So I think that's reasonable to in short, there is no right answer here.

And in fact part of the process of getting better at

programming is getting your own sense of style or working for

a company where they might prescribe which way is better than

the other because they just want everyone doing the same thing.

Even though reasonable people might disagree.

Ultimately though,

so long as you have what's a pretty good argument in favor of one way or the other.

Like ultimately that's what's important if you're just doing things

because you don't really know which one is better.

That's not great.

But if and when you start to acquire opinions and if your boss, if your teacher,

if your colleague, your friend can challenge you and say wait,

why did you do it like this?

You should at least have an answer.

They might not agree with you but at least have

an answer and that should be sufficiently persuasive in general.

Alright, so we've seen so much,

so many examples thus far involving strings but certainly programs

and programming languages can manipulate other types of data as well.

Let's go ahead and transition into another. Very common type of data in python.

In programming more generally

namely integers. Otherwise known in python as in

I n T. So just as stir str is short for string.

So it's in in python, short for integer. Well what's an integer?

Well just like in math, it's a number like negative two,

negative 1012 and all the way toward negative infinity.

All the way toward positive infinity. But there's no decimal point in an integer.

It's just a number like negative two negative 101 and two

onward. That's an end. Of course in the world of mathematics.

there's lots of symbols that we use and we've seen plus before,

although we used it for a different purpose.

But python supports these symbols and more.

And python allows you to add numbers together plus subtract numbers,

multiply numbers, divide numbers.

And the only one here that might look a little strange to people are unfamiliar

is this percent sign but it doesn't mean percent In this context.

If you use a single percent sign in a python program,

that's actually the so called module. Oh, operator.

The operator that allows you to take the

remainder after dividing one number by another.

So we'll see examples of that before long.

But the first four of these are perhaps quite quite familiar.

Well,

it turns out that in python you cannot

necessarily you don't necessarily have to keep writing code

in a file like hello dot pi and then running it in a terminal window.

One of the features that many people like about python is that it supports this.

So called interactive mode. Like you can start writing python code and immediately

execute each of those lines

interactively.

Especially if you don't care about saving all of your lines of code,

you just want to execute code and get back some answers.

So for instance, let me go back to V. S. Code here and let me close Hello dot pi

And let me click on the little triangle over here in my terminal window.

Just to make it much bigger, just temporarily for a moment.

So I'm not creating any dot pi file now,

I'm just going to run python by itself at my prompt and you'll see when I do this,

I get some cryptic looking output and the date and time

at which the program was last updated and so forth.

But I ultimately get three triple brackets like this.

This is the interactive mode for python. So I'm running the python interpreter

and anytime I type a line of code

in the interpreter it's gonna execute it immediately.

I don't have to keep running python again and again.

It's as though in the human world if you were standing next to a human who

speak some other language and you're just having

a conversation with them back and forth,

it's all happening the translation immediately.

So what might I do in interactive mode while

I could do something like one plus one enter

that's actually code.

You might not think of it as code.

But if, you know, a bit of arithmetic and you know, numbers and you know,

plus that's valid python code and you can use python really as a fancy calculator.

But I could do other things too if I want to print to myself Hello comma world,

I can also print out that line of code there to Hello world.

So it's interactive in the sense that the moment you execute a line of code.

Boom,

you see the results were generally not going to

do that because at least when teaching the language,

we tend to want to do things incrementally and we want you to be able to see

where it is we came from and we wanna be able to try things again and again,

especially if we make mistakes but know that this is indeed a feature of python.

This so called interactive mode.

But let's focus for a moment now, not just on that interactivity,

but really on the fact that python apparently supports

integers and mathematics and some of those basic operations.

And let's see if we can't make maybe our our own little calculator.

So let me go ahead and open up the s code again and I'm gonna shrink

down my terminal window and I'm going to create a new file called calculator dot pi.

So to do that recall,

I can type code down here and the name of the file I want to create dot pi

enter.

That gives me a new tab up top.

So I have already closed Hello dot PM now in calculator dot pi.

And let's just make a simple calculator that does some addition for me.

But I'm gonna do it in a file so that we can iterate

on this and make changes for better or for worse over time.

Let me go ahead and first declare a couple of variables.

I'm going to do the mathematical thing of calling my first variable x,

my second variable Y.

And then I'm gonna give myself a third variable Z equals X plus Y.

And then I'm going to go ahead and print out Z.

Now. This program admittedly not very exciting or interesting.

In fact it's a little less interesting than printing

stuff on the screen like before with strings.

But we'll build on this and see what other

features exist in python that we can leverage.

So hopefully if python knows it's math as well as

I do when I run python of calculator dot pi

I should see hopefully that one plus two equals

indeed three.

Alright, so not that surprising and not that interesting.

And honestly this isn't the most useful program because it's

always going to calculate one plus two equals three.

Let's at least make this program say a little more interactive. Right?

We already know from previous examples how we can get input from the user.

Let's bring back that input function. And let's do this.

Let me go ahead now. And at the top of my code, let's change X to not be the number one.

Always let's change it to be whatever the return value is of asking the user for X.

And I can use any english or human language I want here. I'm gonna say what's X.

Just like I asked before,

what's your name and I'm gonna do the same thing for why I'm going to use input again.

But this time changed the question to be what's why?

Alright, at this point,

I think I'm gonna leave the rest of the code the same Z equals X plus Y.

And then print Z. But what's nice now is that?

I think I have a nice interactive calculator. Right now.

It's not going to do one plus two all the time.

It's going to do whatever the user types plus whatever the user types.

So let's try this. Let me go ahead and run the program. All right, let's do it.

One is going to be X two is going to be Y.

And of course everyone in agreement one plus two equals three.

Huh?

What's going on there?

Either your math class misled you or I have misled you.

Why don't we call on someone here to see if

you can help us reason through what the bug is.

What's the mistake on jolly if I'm saying it right,

still muted.

Can you hear me? We can Yes.

What do you think it's Anjali,

Anjali.

And I think the issue is is that it's concatenate

ng strings because you use the plus operator instead of adding

Perfect. So, perfect intuition we've seen that Plus

is used a little differently in the context of strings

because it concatenate that is it joins the two strings

and that seems to indeed be what's happening here,

even though the user types a number.

But the interesting thing here is that when you get user input because

they're using a keyboard on their Mac or pc or their phone,

it is always going to be text.

It might look like a number,

but by default it's coming from the keyboard as a string that is as text.

And so how do we go about resolving this?

If ultimately we don't want to treat those inputs as strings,

we want to treat them as actual numbers. Well we need another function.

And it turns out in python that you can convert sometimes

from one type of data to another type of data.

For instance from string to end

by doing something like this.

Let me go back into my code and let me change X before adding it to Y.

To be whatever the integer version of X is,

plus whatever the integer version of Y is.

So it turns out that in is not only a type of data in python, it's also a function

and it's a function that if you pass in an input like a string.

So long as that string looks like a number like one or like two,

it will convert it to an actual number that you can perform mathematics on instead.

So if I now go back to my terminal window and run python and

let me show you another trick calculator is kind of a long word.

It's a little tedious to type, notice what I can do in my terminal window

in a command line interface in general.

If I start typing C A L for calculator, I can actually hit tab to finish my thought.

So auto complete is possible in a terminal window like this,

type the first letter or few letters and then boom with tab.

It'll finish your thought for you or you can go back in

your history like I did with the up and down arrows.

Let me go ahead and execute this. What's X. One, what's X two and there we go.

Now we have a general purpose calculator that's going to support, not just

addition of one and two, but now any two integers that the user types.

And let me now improve this. Right.

We've seen how we can make improvements to code and

I don't know if it's gonna necessarily be better,

but let's try this.

Do I really need the Z. Variable.

It's worth noting that I'm creating a variable called C. Z.

And then I'm immediately using it on the next line of code.

Now,

that's not that compelling because if you're creating

a variable and then immediately using it,

but never again using it.

Did you really need to take the time to introduce another symbol

and another variable just to use it once and only once.

Well, maybe not. Maybe we don't really need Z in this way.

Maybe I should go and do something

like this.

Maybe I should get rid of Z here.

Maybe I should change this to be intent up here,

change this to be into up here doing something that's pretty interesting now,

even though it's a bit of new syntax notice that you can nest function, so to speak,

you can put one function call.

That is the use of a function inside of the use of another function so that the

return value of the inner function becomes the argument

to or the input to the outer function.

Just like in math if you have parentheses, parentheses, parentheses,

your teacher probably taught you to focus on what's inside the

inner most parentheses first and then work your way out.

Same thing with programming. That's what python is gonna do.

It's gonna look at what's inside of the parentheses first,

it's going to get the answer and then it's

gonna pass the return value to the outermost function.

So what happens online one now is that the

input function gets called first then the result of that

quote unquote one becomes the input to the in

function and same online to the output of what's why

becomes the input to this end function and now there is no Z.

I could just do print X plus y. And because I've taken the time to convert

each of those strings to an integer, I think we're okay.

So let me try this python of calculator dot pi enter one and two

and we're still getting three not 12 or not 12. 12 were indeed getting three.

And we've additionally gotten rid of the

variable because we didn't necessarily need it.

It seems especially if only using it once we're here to

let me put everyone's hands down for just a moment.

And let me ask as before this version now,

which uses intent around the invocations of input and does not use Z.

Is this better than the previous version? If you want to vote? Yes, go ahead.

Or if you prefer the old way, vote? No.

The old way. I'll undo all of this as we vote instead looked like this.

All right. And let me go back to now. The newest version, let's take a hand of the yes.

Is someone who thinks this latest version is better.

Let's hear your thoughts. Why Michael.

Mhm.

Hello from Greece.

Hello?

Uh I think this way is better because it allows us

to immediately see what the X and Y variables are with integral

and so we know what to expect from them.

And also the print argument is more intuitive. We avoid too much closer in the code.

I think those are all good reasons. It's nice and succinct.

The lines of code are not very long.

I don't need to know what Z is because it doesn't exist. It just see print X plus Y.

I like that.

But someone who prefers the older way where

we did have Z and we more explicitly passed

individual variables to the in function Raul, if I'm saying it right Your thoughts?

Yeah. Hi.

I think that the earlier version is better because when, uh,

I mean if user can put something else other than in, let's say,

I mean let's say that like one and two like so it will be, it will be easier to be back

this version or this version here or the old version.

Okay, that's fair. And in fact I'm I'm being very careful today as best.

I can not too mess up.

I have thus far only inputted integers when I'm expecting integers.

And Rose actually pointed to something will come back to in the coming weeks.

How do we actually handle errors?

What if the user doesn't type in the number one or the number two or number at all?

What if they type in a word like cat C A T.

That's not a number and I bet I can't convert it to an integer.

But for today I'm not gonna focus on that.

I'm just gonna hope that the user cooperates. But that's not going to be the case.

And so perhaps one way would set us up

for more success when it comes to handling those errors

now for today's purposes, which is better.

I mean, I like both and I think both of you made very valid arguments in there too.

So long as you have a justification. That

feels pretty reasonable. I mean, that's what ultimately matters.

But acquiring again a sense of the tradeoffs here?

Well,

is this way better if so why or why not just understanding what those trade offs are.

But generally speaking, prioritizing readability is a very good thing.

Making your code readable for someone else is a

very good thing and very good for you too.

So that when you wake up the next morning or

you come back the next week or the next year,

you too can read your own code without having

to waste time trying to remember what you did.

And simplicity tends to be a good thing to keeping your code simple.

So is as you get more comfortable with programming,

you might be tempted to try to like combine an entire program into one long line.

For instance, let me do, right. Just that

don't technically speaking, we don't really need X in a variable,

we don't really need Y in a variable.

We could also do this, I could just get rid of X and Y all together.

I could then now eliminate that and make it just one line of code.

Okay, so in some sense, you might be inclined to think, wow, that's really nice.

You made it one simple line of code.

I would argue this actually isn't that simple.

Now, I think I'm starting to nest too many things, I have to think about print

and in

an input. I then have to notice that Okay, I've opened two parentheses.

I've closed two of them. There's a plus.

You're making me think too much and any time you make me think you're wasting time.

And anytime you complicate the look of the code like this,

you're just going to increase the probability of mistakes

and tactical mistakes or logical errors in your code.

So of all the things we've done, this is the only one that I would argue.

Yes, it's one line and it's nice and compact. It's just not readable enough.

I would shy away from doing this.

Especially since two of those function calls are getting input

from the user but they're two reasonable people might disagree

but that's the kind of like visceral reaction you should

have sometimes when code starts getting a little too complicated.

A little too clever. Perhaps for its own good.

Alright, well it's not just integers,

we have access to let me propose that we transition from integers

to one more data type here, namely afloat.

So again, a string is a sequence of text and n

is an integer, like negative 10 and one Afloat is a number with a decimal point

properly called a floating point value.

And you can think of the floating point as being the decimal that might be over

here or over here with some number of digits to the left or the right.

Mathematically. It's a real number, a number that has a decimal point in it.

So that's a third type of data that python supports right now are calculators

somewhat naively assuming that the user is only going to type in integers,

but if I want to support floating point values too,

I think I can just make a couple of tweaks.

Let me propose that we go back to V.

S code here and let me consider that if I want to support the user

typing in numbers that are real numbers that is floats with decimal points,

I think it will suffice for me to do just something like this.

I can convert the user's input to a float instead of an integer,

but otherwise the rest of my code can stay exactly the same.

But let's go ahead and try this.

Let me go ahead and run this program here and run python of calculator dot pi.

And let's go ahead and add these two numbers together X now and Y.

And let's go ahead and say how about 1.1

and 2.2

And I get 3.3. Oh, I didn't want to show that.

Ah,

apologies. Need to fix something. Sorry guys, um

give me one second to fix this

and

mm hmm,

let's do that instead. Sorry for the pickup.

Alright, um

sorry,

we're going to make some movie magic here and I'm gonna pretend that didn't happen.

Except everyone on the internet knows that it did. There we go.

Alright, here we go.

Do you want to go to the white hot or medium.

Okay.

Uh what did I say? Something like?

Yeah

suppose we actually want the user to be able to

type in these floating point values with decimal points.

Let's see how we might go about modifying the code.

So I'm gonna go back to V s code here and instead of just

converting the user's input X and Y to inter jurors online one and two.

Let's just make a simple change.

Let's actually convert it to a float on the first line

and a float on the second line here.

Now I think if I go down to my terminal

window and run python of calculator dot pi let's type

in a number like 1.2 with a decimal point and

3.4 with the decimal point and there we go.

We have 4.6 as the final answer.

So that wouldn't have worked before if I was only expecting integers from the user.

But now that I'm support expecting Floating point values and accommodating

it I can actually now do floating point arithmetic as well.

But suppose that I don't really want the final

answer to be a floating point value like 4.6.

I would be happy if we just round to the nearest integer.

So I want to support the user typing in

floating point values with decimal points but at the

end of the day I just want to round

the results to the nearest possible integer for instance.

Well it turns out that here to

python comes with some functionality built in and in fact if we return to this U

R l from earlier where in all of the python built in functions are listed.

There's one called round which does exactly as we would expect.

It takes as input a number and then rounds it for us for instance

to the nearest digit to the nearest integer.

But if we look a little closer to that documentation as we can here,

I'll provide an excerpt.

This is what the function looks like in the documentation and recall that earlier.

We looked at the documentation for print and this is similar in spirit

that this shows us not just the name of the function but it's

available parameters that is inputs that we can provide when using this function.

But this is a little cryptic too. Just like Prince was and it adds some syntax.

So let's see

the name of this function here is of course round and its first argument is a number.

Notice this time there's no star, there's no star objects like there was for print.

The round function takes just one number as its first argument period.

That's it's positional

parameter.

But notice this syntax and this is a convention in programming or technology.

More generally

generally speaking when you see square brackets and documentation like this.

This means that you're about to see something optional.

And so what this means is that if you want to specify more precisely

the number of digits that you want the round function to round two.

You can specify it here by adding a comma and then that number.

So if we read the documentation,

if you don't specify a number of digits you just specify

the number two round it rounds to the nearest integer.

But suppose you wanted around to the 10th place or the hundreds place.

That is one or two digits after the decimal point.

You could additionally pass in comma one or comma to

to be more precise. So that's what the documentation there is saying.

Let's see if we can't then translate this to

some actual code for us. So if I go back now to V.

S code and I consider that I want to go ahead and round X and Y.

I can do this in a couple of ways. I could do round X plus y.

But you know I'd actually kind of prefer to break this now out into two lines.

I don't have to and reasonable people here might disagree but

I'd like to revert to a scenario where I'm printing Z so

that I can just a little more clearly to myself to

others say Z equals the rounded result of X plus Y.

It's not necessarily the better way to do it but I'm a

little more comfortable with breaking out my thoughts one at a time,

especially if I want to start commenting each of these chunks of code.

All right,

let me go down to my terminal window now and run python of calculator dot pi what's X?

Let's do 1.2 again

Then let's do 3.4. And now it was previously 4.6 but now

it's been rounded up to the nearest integer which of course is going to be five.

Alright. What if I wanted to change this a little further?

What if I wanted to support maybe really big numbers,

big numbers irrespective of rounding.

Let's just do something like this.

Let me go ahead and run python if calculator that pie again.

And let me just add 999 plus one and notice I don't have to type decimal points.

Even though I'm converting to float my program

will just allow me to type decimal points.

But I don't need to oblige the answer.

Of course here should be And is in fact 1000 whether or not we round.

So that's just arithmetic with integers here.

But in the US we tend to format long numbers by putting commas

after or before every triple of digits.

Other countries flip it and they use periods and commas instead.

That's a system setting.

You can change that on your own Mac or pc or device for python or any language.

But for me I'm using the US approach here which

is periods for decimal points and commas for separators.

What if I wanted this to be output it as one

comma 000.

Just to make it a little more clear that it's 1000 and not something like 100.

That's even more useful when it's like 1,000,001 comma 000, comma 000.

Wouldn't it be nice if we could automatically output those numbers as well?

Well it turns out that we can,

there is a way using python

to actually specify

that we want to include commas like this

and here we have an opportunity to bring back our old friend the F string

first. Let me do something that's not that productive

first. Let me do this. Let me print out the value of Z.

But wait a minute I can't just say quote unquote

Z because that's literally gonna print Z on the screen.

So let me wrap it with those curly braces like I did before.

But that too was not enough.

I literally needed to add an F at the beginning of my

string to tell python that this is an f string of format string

that now is going to print out.

Not very interestingly just the value of Z itself so

that I'm going to great lengths just to print Z when

really I could have just passed Z as the sole

argument but just to ensure that I haven't broken it.

Let's do this again. 999 plus one enter. Okay, it's still 1000.

So I didn't make anything worse but notice

And this syntax is unfortunately a bit cryptic.

Notice that I can actually do this,

I can put a colon after the Z and I can put a comma thereafter.

This looks very cryptic, admittedly.

And even I have to constantly look things like

this up in the documentation to remember the syntax.

But here let me run it again, python of calculator dot pi 9991.

And now notice that the number has been automatically formatted for me.

If I were in a different country or locale,

I could absolutely override this to use periods instead of commas or vice versa.

But in this case here it's just happening for me automatically.

So there too, we see a hint of what it means to really format a string.

There's even more power, more powerful capabilities built into that.

All right, let me pause here to see if there's any questions now on floats on rounding

or on this use of F strings

questions. Yeah.

How about we go to

Yes. Faiza if I'm saying it. Right.

Mhm.

Yeah. So the F street. Could you elaborate on the definition of it? Sure.

An F string is just any string of text that's surrounded by quotes

like to double quotes or two single quotes that starts with an F.

At the very beginning

we have seen F strings before because among their features are the ability

to plug in values inside of the string,

inside of those curly braces that we saw earlier earlier.

We did that to say hello, Common name, butt plug in the value of name here.

I'm using F strings for another feature.

They have a lot of number formatting capabilities built in and if you use this

admittedly cryptic syntax of putting not just Xeon curly braces but Z colon comma.

According to python's documentation,

that is the pattern you used to tell it

to automatically add commas to your long numbers.

That's all

Good question.

How about 1, 1 other on these on format strings floats rounding or the like

Yeah, how about over to Ethan

mhm

Yes, so I have a question.

So when using floats um is there like a cap on how many decimal points you can have?

Really good question. So floats. Yes. And this is a problem.

We'll revisit before long floats cannot represent numbers infinitely precisely

in a nutshell because computers only have so much memory,

they only have a finite amount of memory.

You and I only have a finite amount of hardware inside of the computer.

So at some point they're going to have

to round right now I'm rounding automatically effectively.

Computers will eventually have to do that for us

but we'll see that as a fundamental problem.

Before long

allow me to turn back just for a few final examples on float before we introduce a

few final examples that allow us not just to use functions but to make our own.

Let me propose that we also try our hand at a bit of

division here.

Let me propose that we modify this calculator now to still take a couple of floats.

But let's now just do something a little simpler than a little different from this.

Just doing X,

divided by Y and let me go ahead and get rid of my

format string and just keep it simple for now printing out Z instead

and what are we going to see here? Well just some simple division.

So python of calculator dot pi

let's do something like two divided by three and of course I get 30.66666.

And to Ethan's question a moment ago, it does seem to be finite.

It's not rounding in a weird way here, but I only seem to see so many digits.

That's a uh an inevitability of using a float in this way by contrast.

Just so you know,

integers nowadays in python can be as big as

you want them to be unlike other languages,

there is no upper bound on how big an impact can be now in python

but there is a bound on just how precise a floating point value can be.

Alright now that I've got some simple division working here,

let's go ahead and round this.

It would be nice to round this really long number of

0.6666666 and so forth to maybe just two decimal places.

We've seen how to do this with round though, at least in its documentation,

let's just round this not to the nearest ent

by passing in just X, divided by y. Which is one argument.

Once the math is done inside of the parentheses,

I don't want to pass in just one argument I want to pass in two so that

I can specify in digits number of digits

which recall was the second parameter for round.

Let me go ahead and run python of calculator dot

pi I'll do the same thing two and then 3.67.

So here too, we see a way of rounding now,

not just to the nearest integer but to his nearest number of digits,

but there's another way to do this here.

And in fact this evokes r r f F string. Example again, let me go ahead and change this.

Suppose that you didn't remember the round function or

for some reason you didn't want to use it.

You instead want to just use a format string.

Well let's go there, let me do quote unquote Z.

But let me surround it with those curly braces.

Let me add the F at the beginning and again, this is not interesting yet.

This is just gonna print out Z but I'm adding a

lot more complexity to turn it into an F string.

But notice I can do something else after my variable name after the colon.

If this were going to be a big integer,

I might want to use a comma like before

to separate each triple of numbers with commas.

But I don't, I'm going to use a different sequence

of characters, I'm gonna say 0.2 F. And this too is one of these very cryptic things.

I have to constantly look up because I forget if I don't use it that often,

so don't be intimidated if this looks especially weird.

But this is according to the documentation, the way you specify using an F string,

how many digits you want to print?

So let me run this version of the calculator type in

two and then three we get the exact same thing.

But again,

this is just consistent with my claim that in programming we can so very often

solve the same problem

in multiple ways. This is just now the f string approach

to that very same problem.

Alright. Which one is better? It depends in this case they're pretty equivalent.

You can imagine that being useful to use a function sometimes

so that you can pass in an argument like end digits

as that second argument or you can imagine just deciding in

advance that you want .2 and then writing it like this.

Alright. We have a final goal at hand here as we focus on

these fundamentals of python.

Let's transition now to considering exactly

how we might.

Sorry, let me fix that.

Alright, let's try,

let's transition now from focusing on strings and integers

and on floats to focusing now on functions themselves.

We began today by focusing on how you can use functions

that come with python.

But wouldn't it be nice if you could invent your own functions?

Especially if to our point earlier you find yourself

solving the same kind of problem again and again.

It's nice that python comes with the print function because it's

really useful to be able to print things on the screen.

But wouldn't it be nice if you could print specific

things on the screen by just calling your own function?

Well, let me propose that we do this. Let me go back to V.

S code here and let me propose that we go back to hello dot pi.

I'm gonna reopen hello dot pi where we left it before.

And I'm going to go ahead now and propose that we consider

how we can start improving this further by making our own function.

I have written so many programs today

that just say hello and each time I'm using print.

But wouldn't it have been nice if from the beginning of today we could

just call a function called hello that just says hello for us now.

The authors of python years ago didn't think that we need a special

function just to say hello but I would like that to exist.

I'm saying hello so many times. I just want to be able to call a function. Hello.

So I'm gonna start from scratch here?

I'm gonna delete all of my code from earlier and I'm going

to pretend for the moment that a function called Hello exists.

And I'm gonna do just as I did before,

I'm gonna get the user's name with the input function asking what's your name?

Question mark. And now I'm going to call a function Hello.

And then I'm going to print out the user's name.

Now I will admit hello doesn't exist. So bad things are about to happen.

But let's see what let me go down to my terminal window.

Let me run python of hello dot pi I think the first line is going

to be okay because that worked before and indeed it's prompting me for my name.

So let me type in David

The second line of code is apparently calling a function

that looks like it's called Hello. Because why is it a function?

It has a parenthesis and closed parenthesis immediately after it.

And that's what every function we've used has looked like.

But python is not going to recognize this one. When I hit enter. Now I get a name error.

Name Hello is not defined. Did you mean help?

I didn't although it's opportune, that's what I need at this point is some help

but I am encountering this error because why

the function just doesn't exist. So how do I make this function exists?

Well, I need to create it myself using this keyword

def def for define.

So here too,

just as stir is short for string and into short for integer DEF is short for define

if and when you want to define, create invent your own functions you can do.

So using now this keyword in python.

So let me go back to my code here and let me propose that we define this.

Perhaps in this way

at the very top of my file, I'm going to first take a moment

to define a function called Hello. Using death.

Hello open parenthesis, close parenthesis colon.

What this means now is that python is going to treat every line of

code that I indented underneath this one as the meaning of this new function.

Hello.

So DEF is important as is the space I get to choose

the name of the function and I'm choosing to call it Hello?

The parentheses with nothing inside means that this function

at the moment is not gonna take any inputs,

no arguments there to the colon means stay tuned for some indentation.

Everything that's indented beneath this line of code

is going to be part of this function

is going to be a super short function. One line of code.

It's just going to print out quote unquote. Hello.

But now on lines one and two, I have invented my own function. Hello?

Noticed these dots that have now magically appeared here.

This is just a setting of my text editor V. S code in this case.

That's just making super explicit to me that I've hit the

space bar four times or equivalently the tab key once,

which is converted automatically to four spaces.

Generally speaking,

I'm going to need to make sure that all of

my indented code lines up now so that python knows

that it's all part of the same thing but it's

easy in this case because it's just a single line.

But now thanks to lines one and two,

the function Hello will absolutely exist when I'm ready to use it online. Six.

So let me go down to my terminal window and run python. Hello dot py enter.

Here comes my name again. And now when I hit enter I now see Hello David. Alright.

We've kind of regressed though. Right? This is not nearly as pretty as it once was.

I think we can probably do better than this by improving things further.

Why don't we consider though how we might say parameter arise the

same function that is to say can we customize hello to maybe take

the user's name as input so that we can say not only hello

but the person's name all on one line all in one breath.

Well I think we can do this. Let me propose that we do this as follows.

Let me go ahead and up in my code. Let me inside of these parentheses.

Let me come up with my own parameter name.

I have complete choice here and I'm going to say that the name of my parameter will

be the word to why because I want my function to sound like the verb it represents.

Hello but who do you want to say hello to?

Well I'm gonna call my parameter for this function to just

because in english it kind of sounds nice to me.

Hello to. Who do you want to say hello to?

That's why I'm calling this parameter to instead of

something simpler like X or Y or Z.

Alright well what do I want to do with the word to?

Well I can do a couple of different things

we've seen like so many different ways to implement.

Hello.

Let me just add a comma there for grammar sake and then

let me put the word to after that is the second argument

to the function. Hello.

There's other ways we can do this and we've seen so

many but this one looks a little clear to me.

I'll say

what's going to happen next. Well I don't think I need this extra print line here.

I think what I'm gonna do is this I'm going to

go ahead here and print out not the person's name manually.

I'm going to

instead say hello, parentheses name.

So what am I now doing on lines one and two.

I'm defining my very own function called Hello.

But this time that function has been designed to take a parameter,

a single parameter as input.

And I'm using the value of that parameter,

which I called to to plug into print so that

I see not only hello but also that person's name.

What am I doing on line five. Same as always. I'm just getting the user's name.

Line six. I'm not only calling Hello, I'm passing as input.

The name variable as an argument. So that that's what gets passed into Hello.

And what's happening here is essentially this even

though the variable is called name here,

when the function itself is called,

the computer assumes that that same value is now called to.

So name is essentially copied to another variable called to

so that in the context of hello, I can say hello to

that variable instead

and we'll see in a moment what happens if we don't

keep those uh straight let me go ahead and run python.

Hello dot py enter what's your name? And now I'm crossing my fingers enter.

There we go. We're back in business.

But now I have my own custom function called Hello.

That's allowing me to say hello to a specific person.

And here's where now things can get really fancy.

What if you wanted your hello function to say hello to someone specific.

But you know what if you don't know who you want to say hello to.

You want to say hello to the whole world.

You can give parameters default values.

We've seen that, recall that with print,

there was a default value for sep for the separator,

there was a default value for end the line ending.

We can do that too. And here's the syntax,

if you want the value of this parameter by default,

if not provided by the programmer to be equal to quote unquote world,

you literally do that

in the same line,

you're defining the function and I'll admit it's starting to look

more cryptic but I'm still just defining a function called Hello.

It takes a parameter called too but I'm assigning

it with the equal sign a default value of quote

unquote world just in case the programmer doesn't call Hello

with an argument and we can see this here.

Let me change my code to use Hello in two ways.

Online five, I'm gonna very simply call Hello? No arguments

then online. Six, I'm going to get the name.

Line seven I'm gonna call Hello with an argument so you'll see Hello.

Now, being used in two ways. Let me go ahead and run python Hello dot pi

I'll type in my name.

Oh, interesting notice I already see Hello world,

but that's expected because line five happens before line six but once I type my name

now the program is going to be a little more polite and say hello to me

personally. So there too.

We see with relatively simple but new syntax how you can implement functionality

very similar in spirit to what the print function gave us automatically.

Now you have control over doing that yourself.

But let me point out that there's this term worth knowing here

that can explain why I had to do things the way I did

when writing your own functions, when using someone else's functions.

You need to be mindful of issues of scope, scope is a technical term

but just refers to the location where of variables value

is valid,

where a variable value is valid,

no alliteration intended or just where it's available to you to use now,

what does this mean?

Let me go back to my code here

and let me propose that instead of calling this variable to as I did,

which was very deliberate.

Let me go ahead and maybe naively and and honestly incorrectly do this.

Let me get rid of the word to in the parameter and let me just say name over in here.

Let me just say name over in here,

nope, sorry, I gotta rewind

um

let me sorry, rewinding here,

uh huh,

scope.

Suppose that I hadn't been as careful as I was by choosing

a parameter name of two and a variable name of names.

Suppose that I had done something like um I don't want to do this.

Sorry, just thinking for a second.

Okay,

bye.

Now notice I had very deliberately named my

parameter to the hello function to why because it

just sounds nice to my ear Hello to and it sort of does what it says,

but I technically could have used the same variable name here name,

but I deliberately didn't because again,

when you call the function passing a variable into it as an argument,

technically you're passing in a copy of that variable.

And so if I were to do I want to do any of this.

Alright, I'm gonna rewind, apologies everyone.

Okay.

Um

now if we look back at my definition of hello

recall that I used the parameter name of two.

Why? Because I just liked how it sounded to say hello to someone specifically.

I could have used the same name for that parameter literally name N

A M E as I did in the rest of my code.

But generally speaking, that's not necessary.

And it honestly might have confused me if I used

the same name as my variable as my parameter,

but I absolutely could, but it would end up being a copy of what I'm passing in.

But let me now make this point to one of the whole point of defining

your own functions is one just to avoid having to repeat yourself again and again,

you don't have to actually keep reinventing the wheel and

keep using the print function again and again and again.

If you just want to say hello, wouldn't it be nice. Now if I could kind of move this code

that I wrote for defining the hello function.

And just to be dramatic,

I'm going to hit enter a whole lot of times

50 lines down and put my definition of hello,

way further down in this file.

Why?

Well, just from the spirit of out of sight, out of mind,

because if I now rewind to the start of my program

now, you can sort of take for granted that oh, hello is a function. Why?

Because it's their online one and it

has an open parenthesis and closed parenthesis,

which up until now has meant call this function and then online to we're getting

a variable from the user by typing in their name and then we're calling Hello

passing in that value.

Well,

at this point I can just take for granted that hello exists even if

its way down further in the file or as we'll see in future weeks,

even if it's in a different file altogether.

But there's a problem here and let me go ahead and run this version of Hello dot pi

notice that as soon as I run the interpreter python Hello dot pi I see a name error.

Name Hello is not defined again. Did you mean help?

Well, again fitting,

I do need some help here but I didn't mean to call the function help.

The problem here though,

is that python is just taking me literally and

I have defined python I have defined my function.

Hello all the way down here but I'm trying to use it way up here and that's not allowed,

python's interpreter is going to take you literally and if you use a

function it must already exist by the time you are calling it.

So how do I fix this? Well apparently I can't do that.

I have to define any functions I want at the very

top of my file but that too could get me into

a bit of trouble eventually because if I constantly have to

define a function above where I want to use it,

you're kind of writing code and reverse.

You're constantly writing functions up here up here up here as

opposed to like writing your code logically top to bottom.

So let me fix this in a more standard way, which is to do this.

Generally speaking,

you do want to put the main part of your code at the top of

your file and in fact I'm going to go so far as to define my function

called. Main.

It's not a requirement but it's indeed a convention.

And this just connotes to the reader that this is the main part of my program.

I'm going to get rid of my empty hello call now and only pass in one version with hello,

name.

And then down here a couple of lines further down,

I'll actually define my hello function.

Why is this good will now notice online three.

I can use the hello function I wrote because I've implemented it. Sorry dammit.

Sorry, I'm getting off track here.

Um

Okay.

Unfortunately,

now that I've reordered the functions in this way by putting the main

part of my code at the top and hello at the bottom.

So that my logic kind of flows top to bottom.

If I go ahead and run python of hello dot pi, enter,

nothing whatsoever happens. If I do it again. Nothing whatsoever happens.

Well, why in the world is this?

Well,

just because I've defined a function called Main

and I've defined a function called Hello.

Doesn't mean that I've actually called that is used either of them.

Yes, I'm using Hello inside of Main,

but no one is telling python to actually use or call main.

So in order to tidy this up, the last thing I need to do in this file, it seems,

is actually call my main function.

And in fact by calling my main function in this way it

gets me out of trouble because now I'm defining Main first,

but I'm not calling Hello yet.

I'm defining Hello next. But I'm not calling Hello next.

I only at the very end of this file call Maine

which has the effect of running this code up here,

which has the effect of running this code down here and it allows me

therefore to organize my file and order my functions in any way I want,

including Maine at the very top

and solving ultimately that problem of python, not knowing what's going on.

And there's one final flourish we can add here now that we've implemented.

Hello, you'll notice that Hello only has the so called side effects.

It only prints out something to the screen. Well what if I also want my function

to not have a side effect per se, but actually hand me back a value.

Recall that the input function returns the value, the string that the user typed in,

recall that the in function returns the value, the float function returns the value

that was passed into it.

Well, you can use one final keyword here, literally return

to return a value explicitly yourself. In fact, let me go back to V.

S code here and I think we'll return our attention

to calculator dot pi and see if we can't implement

one other version of calculator calculator dot pi that actually

has our own function that even returns a value.

So I'm gonna go ahead and open up a calculator dot pi.

And I think this time I'm going to throw everything away as

before and I'm just gonna start practicing what we're preaching here,

define a function called main, which is now going to be the main part of my function.

Let's go ahead and now declare a variable called X.

And assign it to the converted version of

the user's input after asking them what's X.

So again, a line of code quite like we've done before.

And suppose now that what I want to do is square this value.

I want to take the number that the users typed in and raise it to the power of two.

So two squared would be 43 squared would be 94 squared would be 16 and so forth.

Well, how do I go about implementing a function literally called Square,

which actually doesn't come with python

built in. Well, let me assume for the moment that it does exist.

And let me say something like this,

let me go ahead and say that printing how about X squared is

comma

square of X. So what have I done? I've defined a function called main.

Inside of which are two lines.

Let's do that.

So what have I done?

I've defined a function called main and I've implemented two lines.

The first of these lines prompts the user for a value X.

And converts it to an end and stores it in a variable called X. Online.

Three I then say X squared is.

And then I passed a second argument to the print function,

whatever the return value is of a square function, but square doesn't exist.

And I'll show you this here.

If I now call main at the bottom and I run python of calculator dot pi

I'll see that X is two and then I see a whole bunch of errors. A name, error.

Name, Square is not defined. So this isn't a typo here.

It's just the function doesn't exist but I think I can make it exist here.

Let me go ahead and define another function called square.

This one is going to take in a number and

I'm going to call it generically in as many a programmer

would just to represent any old number and then what

do I want to do in order to square N?

Well, a number squared is really just itself times itself. So I'm going to do this

end times end but it's not enough just to do the math yourself and

times and you're gonna have to return the actual value and times end.

And that's our new keyword here.

When I now do this,

Watch what happens python of calculator dot pi enter

X se shall be two X squared is four.

Let me go ahead now and say X is now three X squared is now nine.

So I've implemented my very own function that returns the square of a value.

And because I'm using the return keyword that ensures that I can pass the

return value of this just like the return value of input or into or float

to another function like print instead and here too,

there's going to be so many ways to solve the same problem.

I can actually raise end to the power of two. We've not seen the syntax before.

But if you use 22 asterisks like this.

Two stars that raises the thing on the left to the power

on the right or it turns out there is in python,

a function called POW for raising something to the power that takes two arguments,

the first of which is the number, the second of which is the exponent.

So there too, there's just so many ways to actually solve that same problem as well.

So ultimately, what have we done here?

Thanks.

Sorry.

So ultimately what have we done here?

Alright, we're gonna do that cleanly.

So ultimately what we have we done here, we first introduced functions,

these actions or verbs,

many of which come built into python that you can just use in your own code.

We then introduced variables via which you can store those return values and

then maybe do something more with it at the end of the day

to you now have the ability to create to invent your own functions

to solve simple problems like hello or in the weeks to come.

Much more sophisticated, more challenging, more fun problems

as well.

Alright, that was the end of our functions and variables.

Class I want to be mindful of folks time,

but let's go ahead and take a 10 minute break here.

A 10 minute break here and we'll resume if your schedule

permits with our look at condition als next as well,

see you in 10

Alright, testing 1, 2 3. Hopefully you can hear me again

casual. Start here. Yes. Okay, good. I see some hands back.

Thank you all first and foremost.

You are amazing for spending so much time here with us.

I know this is a lot and especially if you're new to programming.

This is really a firehose.

We're gonna do some movie magic now where we're going to

now create the material for the second week of the class.

Certainly. No worries.

If anyone needs to go to work, go to sleep, go anywhere else during this.

But thank you for bearing with us. Happy to have you here.

What I think will do is we officially are aspiring to

film lecture one which is our second and lecture to,

which is our third.

Um, we're gonna probably do both which means we will run long but totally Okay.

If you need to go again,

go offline, everything will be posted right after anyway.

If you want to continue getting a sneak peek,

but we have everything set up so I think we're

gonna keep going ahead here when the course finally goes

on the internet officially on the index and youtube and

the like these lectures will be tightened up in shorter.

So the final lecture will not be four or five hours certainly.

Um, maybe take a couple of questions or a couple more hellos before we resume.

Yeah, rhetoric. Any questions?

Hi, can you hear me? Yes. Where are you from?

I'm from. Canada. Nice,

welcome.

Thank you. I just um, I just want to go back to the school part.

Uh it is a little confusing to me where you via Hello dot by uh

file.

Okay, say that again where we load the file?

No hello? Hello dot pi

That's the file name.

Hello? Dot

yes. Okay. Hello? Dot

yeah.

So so when you talk about this code

um correct me if I'm wrong,

my understanding is let's say we passed in a parameter at the beginning,

this is the final version of your code, but at the beginning we define

our hello, our main,

yep. Okay,

yeah, so something like this, so we define dysfunction and then we passed in the

the parameter to

and then we did we wrote the code to function inside the function

and then we invoke the hello function somewhere in line six for example.

So when we talk about this code instead

because we define a different variables called name,

then we asked the user to put or input their name and stuff like that,

then we invoked the hello, We passed in the name as argument.

So when we're talking the scope,

I was to correct me if I'm wrong if the example of out of scope,

if we passed in the the parameter that we used to define the function.

Hello up there, that too. And then we passed that in as arguments instead of name.

When we invoke the hello function, would that be out of scope?

A good question. And let me try to answer if I may by way of example.

So this was that final hello example and recall that the point I made

was to use a different name for the parameter than for the variable.

And just to show you what could I could have done, I could have done this,

I could have used literally the same word.

That's not a problem.

But I wanted to make this point and we'll come back to this. I think eventually

this program still works. It still says Hello, David.

But suppose I do something like this in my hello function.

Suppose I'm being a little malicious and I changed my name to dummy like this.

Notice that if I run this program python of hello dot hi, David.

Notice that it says hello, dummy as you would expect.

But let's do this. Let's call the hello function twice, passing in name twice.

And notice logically what's happening on line two, we get the user's name online.

Three we call hello passing in name,

which means that I'm now calling the hello function which is changing name to dummy

and then it's saying hello, dummy

and then line four executes Finally, after we've changed name to dummy,

the point I was hoping to make with scope is this when I type in my name here.

Oh,

that's not the point I wanted to make

um

will it give you an error?

If you try and access a parameter outside of its scope,

it should give us an error correct because let's say for example you define

the to parameter inside the hello function

and then you invoke the hello function out

the function. Hello function.

And then you use the parameter the argument too when you're involved it.

That should give us an error because that would define an outside school. Yes.

And I'm sorry, I was trying to be too clever there with my example.

Let me pare it down to something much simpler.

So in this version of hello dot hi now notice I got rid of the two

but I'm still trying to use name inside of the hello function.

So here if I do python of hello dot pi and type in my name.

David here I do get a name error because name is not defined.

And so this is technically what scope means scope

is again the context in which a variable exists.

And so if you define a variable inside of main like I'm doing here online too,

you cannot use it online. Seven unless you pass it in.

And sorry for such a long answer to that.

Um That's a point I could better have made in person

for the first time.

Okay,

let's do one more question then we'll dive into something called

conditional which will be much shorter than the first lecture.

Who do we have here. How about um

just reading from our list of hands, a meal if I'm saying that right?

Yeah.

Can you hear me? Yes. Where are you from?

I'm from reservation. So it was my first time to join CS 50. I loved it.

And I have my question about functions,

can we define a function that already exists?

Good example.

Yeah. Good question. Can you define functions that already exist?

Well when in doubt. Let's try it.

In fact this is a good habit to get into as a

program or you can answer almost any question for yourself like this.

Let's try this. So let me go up here, I'm gonna simplify all of this.

Uh Let's go ahead and create our own print function.

That's let's say how are we gonna do this? Uh Let's see.

Well let's do it this way. Let me do this on the fly.

Um Let's redefine my hello function like this. So print now I can try to be cute.

So one version of my print function says hello to the person in question.

The second version of my hello function always says hello dummy.

This is kind of cute now because we can see which one actually gets called.

So let me go down into my terminal window. Run python.

Hello dot pi I'll type in my name and now to answer the question

it overrides. So you can in fact override an existing function name.

And the most recently defined version is what's going

to get called whether it's yours or something else.

So I finally got to work for the dummy example in Alright, well, let's do this.

I know there's still some questions but let's forge ahead

with our second topic which will indeed be shorter.

Goal of which is to give you all the more

building blocks via which to tackle programs on your own.

Alright, give us just a moment to get settled and or do you need a moment in back?

Okay. So I'm gonna go over here.

Alright. Here we go. Forgive me for introducing myself again.

But people on everyone else on the internet won't know if we did these.

All back to back.

All right.

All right.

All right. This is CS fifty's introduction to programming with python.

My name is David Malin. And this week we focus on conditional,

conditional or conditional statements in python

and other languages are this ability

to ask questions and answer those questions in order to decide.

Do you want to execute this line of code or this

line of code or this other line of code instead,

they allow you to take the proverbial forks

in the road within your own code logically.

So, how might we go about making some of these decisions?

Well, it turns out that python comes with a lot of built in syntax for instance,

here are just some of the symbols you can use in python

to ask questions admittedly mathematical questions,

but we'll start there If only to keep the example simply simple early on.

This first symbol as you might know from math represents greater than

the second symbol might not look too familiar because we

usually write it all as one thing on a piece of

paper but on a keyboard if you want to say

greater than or equal to you'd use this symbol instead.

This of course means less than

this means less than or equal to. And this one's a bit of a curiosity.

We've seen in our look at functions and variables,

how we were able to assign values to variables using a single equal sign.

But that equal sign didn't represent equality.

It represented assignment from right to left.

That's great because it solved that problem.

But it kind of left us in a bit of a bind because how do we now compare?

Two things left and right.

Well, in python and in many languages you actually use two equal signs.

So two equal signs represents equality comparing the

thing on the left and the right.

One equal sign as always represents assignment,

copying the thing from the right to the left.

Lastly, this last symbol represents not equal to so the exclamation point or bang,

followed by an equal sign means not equal to some value next to it.

Well, to ask the questions using these symbols or any others,

we're going to need another keyword in python and that keyword quite simply as

an english is if you can ask questions in python code along the lines of

if the answer to this question is true, then go ahead and execute this code for me.

So let's go ahead and write some of these examples here. I'm going to go over to V.

S code

and let's go ahead and create a program first called compare dot pi.

The goal of which is simply to

write code that compares values and makes decisions based on those values.

So python of compared dot pi is going to give me a brand new. Oh that's interesting.

Oh damn it.

Uh Andrew. I'm not sure the best friend.

Let's go ahead and type code of. There we go.

Let's go ahead and type code of compare dot pi in order to create a

brand new file called compare in which will start to express some of this logic.

All right, well what do we want to compare?

Suppose we want to compare for the sake of discussion. Just a couple of integers.

But we'd like those integers to come from the user so that we can

make decisions based on numbers we don't know the values of in advance.

Well, let's go ahead and do this as we've done in the past.

Let's declare a variable like X.

Let's assign it equal to the return value of the in function and

pass to the in function the return value of the input function,

asking the user a question like what's X.

Question, mark?

As we've done in the past,

let's do this one more time with why asking the user for the value of why and again,

converting that ultimately to an end as well.

So with this amount of the story, we have two variables X and Y,

each of which has values.

And ideally we should be able to now compare these values.

So suppose I want to make a decision based on the values of these variables.

I'm going to use the keyword if and I'm going to use

some of those mathematical symbols to actually ask the question itself.

So how about this?

If X is less than y,

then let's go ahead and just print as much out quote unquote X is less than Y.

So this isn't a very interesting program yet.

I'm literally just stating the obvious based on the math,

but it's allowing me to now introduce some

new syntax and exactly what is this syntax?

Well, it's this

not just the keyword if, which I've added here at the start of line four,

but then I asked my question here,

X less than y. X is one variable on the left, why is one variable on the right?

And of course the less than sign is expressing the mathematical question I have.

What I've highlighted here is technically called a bullion expression,

A bullion expression named after a mathematician

named bull is simply a question that

has a yes or no answer or technically a true or false answer.

And that's nice because if there's only two possible answers,

it's very easy for me and in turn the computer to

make a decision do this or don't do this thing.

Now notice if you come from other languages,

you might notice that I have not typed any parentheses.

They are not in fact necessary, at least in this case in python,

but I have typed a colon at the end of

the line and even more importantly at the next line,

I have begun my line with some indentation hitting the

space bar four times or just hitting tab once,

which will automatically be converted to the same.

That indentation is what tells python

that line five should only be executed if the answer to line four's question

is in fact true. So if X is less than why that phrase will be printed thereafter.

Well, let's add a few more lines of code.

How about another question, If X is greater than Y,

then let's go ahead and print that X is greater than Y.

And let's do one final question. If X equals Y, then wait a minute,

what have I done wrong here? Right. A good I hear I don't want to assign Y two X.

If X equals equals Y is how I express equality, let's go ahead and print out

X is equal to Y. So I now have three conditions.

If you will one question asking X less than Y. One asking X greater than Y.

One X skiing X equals equals Y. Let's run the code.

Well, down here in my terminal window,

I'm going to run python of compare dot py and hit enter

What's X? Let's go with one.

What's why? Let's go with two.

This should of course execute that first line of code

and tell me indeed that X is less than why.

Exactly as I would expect there. Well, what just happened though in code?

Well, let's take a look perhaps at this same code visually,

particularly if you're a more visual learner.

This I dare say, is what just happened.

So what you're looking at here is which generally known as a flow chart.

It's a logical diagram

that allows us to depict with shapes and with arrows exactly what control flow is

happening inside of my program that is to say what's happening from top to bottom.

Well,

let me go ahead here and zoom in on the top and

consider that the program starts where this oval here says start.

So that's just logically where you start reading

the picture no matter how it's laid out.

So what's the first question I asked will notice that this first arrow from

start leads down to this diamond and this diamond is asking a question X.

Ah this is wrong. Um

let me think for a second Andrew. I flipped a couple of things. So sorry everyone.

XLs N Y.

Oh man. Um

X. Greater than why I have to.

Let's do this. I hate to do this to folks.

And I just need a few minutes to fix these diagrams.

I changed the code at the last minute but I forgot to change the

diagrams and rather than ask you all to pretend that it looks right.

Let me take a few minutes to fix it. So it is Right. So I don't confuse.

So we'll be back in five or so. My apologies.

Don't make it. Can I verbalize two people room resume?

We're live. Okay. Alright.

So if you're still there and with us,

we're about to resume carter and I fixed all the diagrams.

My apologies never make changes right before class

or during class, but still.

Okay.

All right

tuned.

All right.

Oh, I think the best way I can cut over here. Uh

Okay.

Okay. Ready.

Here we are.

Yeah.

Alright.

So this

or do that again?

Sorry.

Okay.

I was at lecturing, but I think

you can if we can just cut to me walking, you know?

Mhm.

You wanted me to stay here?

Okay, We'll stay here. All right.

All right.

Now, if you happen to think more visually,

let's translate that code into this picture here.

So, what we're looking at here is a flow chart.

It's a diagram of this program's logic and more technically it shows the program's

control flow that is the ability of U. N. Code to control the flow of a program.

Generally from top to bottom.

In fact let me go ahead and zoom in on the top of this flow

chart and you'll see an oval at the very top that says quite literally start.

That is irrespective of what shape or lay out the diagram is is where your

own thinking and logic should start when trying

to wrap your mind around this program.

Notice that there's an arrow from start to this diamond

shape and inside of that diamond is a question.

A boolean expression

X less than Y. And this shape just means based on the answer to that question.

Go left or go right.

Specifically go left if the answer is true or go right if the answer is false.

Well the inputs I typed were one and two respectively for X and Y.

So of course one is less than two. So that's why my program printed out quote unquote,

X. Is less than Y.

But recall the code. The code then proceeded to ask two more questions is X.

Greater than why

is X equal equal to why?

Well the flow chart depicts those questions to notice that no

matter whether the question had an answer of true or false.

The arrows both converge back down to this

second diamond shape here and that second diamond shape

asks the second question X greater than why that too has a true or false answer.

So we go one way or the other but if X is one and why is to then no, the answer is false.

One is not greater than why.

So logically in the flow chart you follow the false

arrow this time and notice along that false arrow.

You don't print anything this time.

That's why we only saw one print out on the screen.

But there was still a third question and this flow chart captures that as well.

Now there was still a third question and this flow chart captures that as well.

The third diamond asks X equals equals why?

Now that too has a false answer in this case

because one of course does not equal equal why?

And so we again follow the third false branch here

and that leads us of course to stop and stop.

Just indicates. That's it for the program. So I think that's correct.

And that particular flow chart does happen to

represent the actual code that I wrote.

So it's correct.

It does what it's supposed to do and answered the question

correctly by printing on the screen X less than y.

But what is perhaps poorly designed about it? Let's make this first distinction.

It's not enough necessarily for the code that you write

to be correct and do what you intend longer term,

especially as our programs get longer and more sophisticated, more complicated.

We're gonna want them to be well designed to

thoughts on in what way this program is arguably not well designed

even though it's correct.

Let's see here. Khalid

if I'm saying that right, your thoughts

Yes,

got it too many ifs I think it's getting repetitive.

We can make our code more concise maybe. Yeah, it seems a little repetitive.

I'm asking if this, if this,

if this and yet logically I should know the answer to some of those later questions.

Once I figure one out and in short, if you look at this diagram here,

notice that no matter whether I go left or I go right,

I'm always asking three questions, no matter what,

all of those arrows lead to the first, the second and the third diamond.

So I'm asking three questions no matter whether

any of those answers are true or false.

Well, how might I go about improving this?

Well, let me propose that we introduce another keyword to our python vocabulary,

namely Elliff and this too.

It's kind of a succinct one.

It's a conjunction of else if in english,

which allows us to ask a question that takes into account whether

or not a previous question had a true or false answer.

Well, what do I mean by that?

Well,

let me go back to my code here and let me propose that we now improve upon this here

by asking ourselves ultimately.

How can we ask fewer questions and let me go ahead here and propose

that instead of asking if if if

let's make these conditions potentially mutually exclusive.

That is to say don't keep answering questions once we get back a true answer.

So I'm going to change my code up here as follows.

Instead of asking if if if I'm going to say if X less than y,

LF X greater than Y el if X equals equals Y.

So I'm going to implicitly just like in english,

take into account that I'm only going to keep asking myself these questions.

If I haven't yet gotten a true response, think about the logic here.

The english if X is less than Y

online, four print out X is less than why.

Well, if that's the case,

you're done logically because if the english is saying if X less than Y else,

if X greater than why those are going to be mutually exclusive.

If the answer to the first question is true,

you don't have to keep asking questions to

which you already logically know the answer.

So let me go ahead now and run this program and I think the

behavior is going to be the same python of compared dot pi what's X,

let's do one, what's why let's do two

X is less than y.

Now.

Honestly,

I didn't really notice the difference when I ran the program and honestly my Mac,

my pc my phone nowadays are so darn fast.

These kinds of improvements aren't gonna necessarily

feel any faster until we're writing bigger,

faster programs,

but it's laying the foundation for writing better code longer term

now, what is the improvement I've just made?

Well, if previously my diagram looked like this

which was problematic insofar as I was asking three questions no matter what,

even if I already figured out what I want to print on the screen,

this new version of the program that says if l if

l if might look a little something like this instead.

Now it got a little wider,

that's just because we drew the arrows to be a bit wider here.

But let's focus on just how many questions are getting asked.

Let me zoom in at the top as before and let me propose that we note that

the start oval is at the very top and it's asking us to ask one question first.

X less than Y is one less than two. But notice here, let me zoom out.

If one is indeed less than two. We follow this longer arrow

down mark. True. We print out quote unquote X is less than y.

But then we immediately follow this next arrow down to the icon that says stop.

So that's what's implied by doing.

If L if L if if we get back a true answer right away to that first.

If we're going to print out X less than Y and then stop.

Were logically at the end of the program.

So this picture is just representing graphically what the code is actually doing.

But suppose I typed in something else. Suppose that my code actually

I ran and I typed in two for X and one for why?

That is to say the answer to the first question is now false.

But they answer to the second question is now

true because of course 12 is greater than one.

Well let's go back to the diagram,

same as before we start at the very top where it says start

the very first question up here.

Now X less than y is an answer of false because no two is not less than one.

So we follow this arrow to the next question. This diamond is X greater than why?

Well, yes

two is greater than one. So now we follow this left arrow which is true.

We print out quote unquote X is greater than Y

and then stop. So what's the improvement?

Well, in the first case we got lucky and we only had to ask one question and boom,

we're done

This time we had asked two questions but then boom,

we're done only if X happens to equal.

Why

do we actually find ourselves logically getting all the way

down to this final Elliff in my code and pictorially

only if X is equal to Why do we find

ourselves going all the way down to the third diamond?

The third question asking, is it

equal to why or not?

Now, hopefully the answer at that point is not false.

We've included a false arrow just so that the

program itself is well defined but logically we shouldn't actually

be getting there anyway because it's got to be less

than or greater than or equal to in this case

we'll let me pause here to see if there's any questions now,

either on the code version thereof here

or on this diagramming of that very same logic

questions here on this

control flow, this if Yeah, hope your question

ah countries supposed to put them out at the end. A good question and yes.

So that's gonna be my my third and final approach.

And if you don't mind, let's pivot there right away.

Hope is identifying a third keyword that indeed exists

in python that allows us to be even better

at expressing this logic to design this program even

better and that's going to solve a particular problem.

So if I take us back to our code here

notice that what I've highlighted earlier, LF X equals equals Y.

It's not wrong to ask that question.

In fact, if you're trying to be especially thorough,

it makes perfect sense to check if X is less than y greater than why or equal to y. But

why don't I need to ask this third and final question. Hope is indeed right.

So we'll put his solution in place in just a moment. But logically

why is hope? Right, why do I not need to even ask this third question? Someone else?

Aldrin if I'm saying that right

um Yes um we don't need to ask if X is

equal to y anymore because logically if the two conditional,

evaluate to false,

there is only one um conditional that will evaluate to true and that is X is equal to y.

Exactly.

If we're all pretty comfortable with math and comparisons here,

of course X is either gonna be less than y greater than Y or equal to Y.

But once you rule out the first two scenarios,

logically it's got to be the case that X must

equal Y if it wasn't the case that it's less

than or greater than Soho proposed that we use this

other keyword else and how do we use this?

Well, exactly as we might in english,

let me go back to my code here and instead of

bothering to ask is Aldrin notes the third and final question.

Let's not ask a question at all.

Let's just have this catch all, so to speak, a final line of code that says else,

just assume that X is equal to y.

Therefore printing it as well.

So what's the upside of that?

My code is still gonna work exactly the same and again, my computer so darn fast,

I don't even notice that it's working even faster

than it was before,

but we would notice these kinds of things if we were

doing a lot more work a lot bigger programs here,

but let me run python of compared dot pi let's do for instance is one and two

still works for that. Let's do two and one

still works for that. Let's do one and one. And it indeed now works for that.

But in these cases now let's consider the path.

We just went down previously our diagram when we had if

l if l if in place looked a little something like this

and notice they began,

we might have asked one question or two or worst case three whole questions,

but we can do better than that.

Using else as hope proposed.

We can whittle this diagram now down to this and

even though it looks like the diagram is getting bigger,

notice that it's having fewer building blocks inside of it.

There's fewer arrows and there's fewer nodes in this picture.

Let's start at the top. Now start

leads us to the first question still X less than y If the answer is true, great.

We can say as much X is less than y and we can stop if it's not true.

If it's false, we can ask the next question, X is greater than why, true or false.

If it is great, we can print X is greater than why and stop else.

If it's not the case that X is greater than why the answer is false.

We can just immediately logically say x is equal to Y.

We don't have to add the third question at all.

We can just immediately conclude there. So what's the implication here?

You can see with these pictures, a relative decrease in the complexity of a program.

The first one was very long and stringy

with lots and lots of questions unnecessarily.

Ultimately the next one got a little shorter and this one is even shorter still.

And again the fewer lines of code you have,

the less likely you are arguably to make any mistakes.

The easier it is for other people to read. And so generally

this readability, this simplification

is indeed a good thing.

Well,

let's go ahead and add another piece of

capability into python and that's this one here.

Just like in english where you can ask this question or this other question,

you can say the same thing in python using literally this word or

so. Let me go back to my python code here

and let's propose how we might ask a couple of questions at once this time,

perhaps this time considering how we might ask not whether or not

it's greater than or equal to and caring about the precise answer.

Let's take a coarser approach here and let's just try

to determine is X greater is X equal to Y

or not.

Well,

let me go ahead and delete some of this code and change the question we're asking,

Let me do this.

Well, if I care about whether it's equal or not.

Let's check the possible scenarios if X is less than Y or x is greater than Y?

Let's go ahead and print out X is not equal to Y now? Why is that?

No pun intended?

If X is less than y? Well it's obviously not equal.

If X is greater than Y, it's obviously not equal. So we can conclude X is not equal to Y.

So if we instead want to make sure that it is equal to, we can just use hopes else.

Using print, quote unquote X is equal to Y. And again, why is this?

Well if X is less than y or X is greater than Y, they're obviously not equal.

Otherwise logically they must be equal in fact.

So let's run this, let's go ahead and run python of compare dot pi what's X. One?

What's Y? Two? Okay, X is not equal to Y. Let's do it again. But two for X.

One for y, X is not equal to Y and one third time.

How about X is one and y is one, X is now equal to Y.

Now, if we want to compare that visually too,

let me propose that the picture looks a little something like this

and again this is the exact same thing

logically but it's a pictorial representation thereof.

What's the first question? Well, if X is less than Y.

Well then we follow the true arrow and we say quote

unquote X is not equal to Y and then we stop

but what if X is not less than why? What if it's greater than why?

What if it's two and one respectively

Then the answer to X Less than wise. First question is false. So we go here.

We asked the second question because of the ore

and that asks is greater than why if so notice this.

We can kind of reuse some of the same parts of this picture and just say

X is not equal to why we don't need to add arrows and add boxes unnecessarily.

We can reuse lines of code picture,

parts of the picture just as we have lines of code and then we stop.

Lastly we have the following.

If we know that X is not less than why we know that X is not greater than why?

It must be the case that X equals Y. We don't need to ask a third question.

Another diamond. We can just immediately print as much and then say

uh stop as well. Well, what could I do here? I bet I could improve this code slightly.

And if we really want to be nitpicky,

I would argue that this is now really just a minor

refinement but it's a good habit to get into thinking about.

Could my code be better? Could my code be simpler?

Could I improve this code further? It's subtle but could I improve the design?

Could I ask fewer questions? Could I tighten it up, so to speak?

What do folks think

here?

Yeah. To Lupe, if I'm saying that right?

Yeah.

What do you think? You can ask if X is just equal to Y, then it will print X is equal to Y.

Else X is not equal to Y.

Perfect recall one of the other symbols we saw on the available list earlier.

We can check, not just less than or greater than or equal to.

We can literally ask the question. Is it not equal to?

Why are we wasting time asking if it's less than or if it's greater than?

Well, if all you care about is is it not equal? I think we can do exactly that.

Let's just ask the one simple question we do care about.

And so let me go back up here and let me just say not both of these questions,

let's get rid of the ore.

Let's just say if X is not equal to y, then go ahead and print X is not equal to Y.

And that too. I think it's gonna work exactly the same.

But the picture now looks a little bit different.

Noticed that this was our flow chart earlier.

That represented that same logic and there's a bit of complexity. You gotta go left.

You gotta go right based on the answer to these couple of questions.

Now in this version,

it's really getting

simpler bug. Sorry,

we did it in the opposite direction. We're gonna fix this.

Here we go.

If we go there. Not more complicated going left, going right.

If we now take into account what this version of the program looks like.

It's even simpler. Perhaps the simplest one we've seen yet.

When we start off the program,

we ask just one and only one question is X not equal to why?

And if so true, we go ahead and print out X not equal to y.

If the answer is false, then of course it must be equal to why? So we say that instead.

And if we really want,

we could invert this if I go back here to my code and if for whatever reason,

you just prefer to think in terms of equal or

not equal as opposed to not equal or equal.

It's really up to you, we could change this to be equals equals.

But I'm gonna have to change my print statements to be in the opposite order.

So let me go ahead now and reverse these two here

and move the second one first and the first one second.

So now when I execute this code, I'm asking still just one question.

So it's still just as good just as succinct.

But now the diagram,

instead of looking like this is going to change the not equal to equal, equal.

And we just need to make sure that we print out the right thing accordingly.

And again here too, just as the code is getting a little more compact,

a little more compact with fewer and fewer characters.

So are these diagrams,

these flow charts capturing the relative

simplification of each of those programs to

All right, let me go ahead and pause here to see

if there's any questions now on any of these versions of code.

Go on.

Yeah, let's see question from

what do we have here? Okay. Question from Abdullah, if I'm saying that right?

Oh,

still muted though.

Yeah, thank you.

Um actually,

I have a question about the scope because in C plus plus and

see if we initialize a variable inside the if an if statement,

we cannot we cannot access the variable outside

it was the epicenter.

So it is the same case in bison

if you uh

if you declare variable where I'm not sure I follow the question,

but inside the if statement inside the block of the if statement,

so can access this N, C plus plus,

where we cannot access this variable outside the if statement.

So it's the same case in bison uh know if I've not done that here,

but if I had declared a variable inside here,

like Z equals three Z would be available everywhere else in the program.

It is not scoped to the if condition alone.

Not relevant here though, with this example,

but it does work differently from C and C plus plus and java

and other languages in that way.

Another question on

these flow charts,

these comparisons and these optimizations. Akshay, if I'm saying it Right.

Yeah, I have a couple of questions. What if indentation is not used?

If indentation is not used, Your program will not work.

So python is a little different from a lot

of languages in that it enforces the indentation requirements.

Some of you who have been programming for years might not

necessarily be in the best habit of inventing your code properly.

And one of the features arguably of python

is that it makes you invent your code or it will not

just work. And I think did you have one other question?

I think we lost you.

Yeah,

actually,

yeah. Is the golden necessary.

Is the colon necessary? Yes. The colon two is necessary.

So with python,

what you see is what you get here and indeed

it needs to be indented and the colon is necessary,

python does not use in the same way by convention as C and C, plus plus

and java curly braces to connote blocks Instead,

it relies indeed on this indentation.

Well,

let me propose that we introduce one other keyword here in python

to see exactly how we might combine additional thoughts and that's going

to be literally the word and the conjunction of one or two

or more questions that we might want to ask it once.

And let me propose here that we explore this

kind of logic by way of another program altogether.

In bs code whereby I'll go ahead now and create a new program,

say called grade dot pi let's consider exactly what

grade a student should get based on their score.

On an exam or a test or a quiz or some other assignment like that.

I'm going to go ahead and run.

I'm gonna go ahead and run code of

I'm gonna go ahead and run code of grade dot P to

give myself a new file and I'm gonna go ahead and start by

just getting the user's score again on some assignment or test or

the like and I'm going to store it in a variable called score

equal the return value of the input function which is going to

convert whatever the user's input is when prompted for this score.

So again the user should just obliged by giving me a number

like zero or one or two or hopefully much higher than that.

Like 97 98 99. 100 assuming the test or assessment is out of 100% points.

Now, how could I go about assigning a grade to the students score?

Well in the us it's very commonly the case that if you get between 90-100, that's an a.

And if it's between 80 and 89 it's a B.

If it's 70 and 79 it's a C and so forth, all the way down to f. Which should be easy.

But we'll see that there's a bit of a jump. So how might I express this?

Well I can use conditional and I can ask a

few questions and then print out the student's grade accordingly.

So let me express it like this.

If the students score is greater than or equal to 90 and

the students score is less than or equal to hunt 100.

So it's in that range. Let's go ahead and print out that their grade shall be an A.

Because they're in the nineties above grades range

L if the score is greater than or equal to 80

and the score is less than or equal to say 89.

But here I have some options logically I can

actually express myself in any number of ways.

And maybe just to be a little cleaner I'm going to say and score is less than 90.

So I'm using less than instead of less than or equal to.

So I'm making sure that their boundaries between these grades are correct.

Then I'm gonna go ahead and give the students a B.

If it's in the eighties elliff score is greater than or

equal to 70 and the score is less than 80.

I'm gonna go ahead and give them A. C. L.

If the score is greater than or equal to 60 and the score is less than 70.

I'm going to go ahead and give them a. D.

And here's where it's a little anomalous at least in some schools here

else I'm gonna go ahead and give them uh an F. So we're skipping any altogether?

And we're gonna give an F. Instead for the grade. So that's the catch all.

And I think logically I've gotten this correct at least

based on where I went to school growing up.

Such that it's going to give an A. Or a B. Or C. Or a. D. Else. It's going to assume

that you got an F.

Well let's try just a few of these here let's run python of grade dot pi

my score is let's let's start strong 100. Alright. I got an A.

Didn't do as well the next time maybe it's a 95 still in

a starting to slip further so I got an 89 the next time.

That's now say A. B.

And let's say I really had a bad week and it's now like a 71 that's now A. C.

Or I didn't even submit it at all. That's A.

And F. Altogether. Right? So it seems to work. That's not really an exhaustive test.

But at least based on some sampling there. My code seems to work as I expect.

But let's see if we can tighten this up. It's not wrong.

It's correct and indeed according to my own specifications.

I dare say this code is correct but can we tighten it up

can we reduce the probability of bugs now or down the line?

Can we increase the readability of it? And can we increase the efficiency of it.

Can we get the computer

to have to answer fewer questions and still get the same result?

Well, let's see what we might do.

Let me just kind of switch things up if only to

demonstrate that we can use these symbols in different ways.

I could say.

As I've done if score is greater than or equal to 90, but I can actually do this,

I can flip it around instead of saying greater than or equal

to let's say 90 is less than or equal to score.

And here Let's say if 80 is less than or equal to score and here 70

is less than or equal to score. And then lastly, 60 is less than or equal to score.

So it's the same thing logically.

I'm just kind of switching things around just like you

could do on paper pencil if you really wanted.

But now notice this trick and this is not possible for those of you

have programmed in C or C plus plus or java or other languages.

Notice what I can do here is actually combine these ranges.

Notice that I'm asking two questions to boolean expressions is 90 less than

or equal to score and is score less than or equal to 100.

Well, python allows you to

nest these things like this and chain them together and just

like you would on paper pencil in the real world,

You can encode in python do this, which is just a little cleaner.

Right? It's tightening up the code a little bit.

It's fewer keystrokes it's faster to type it's easier to

read moving forward so that's arguably better as well.

So that's one improvement. It's largely aesthetic in this case.

It's still asking the same number of questions but

it's doing it a little more succinctly still.

Well what what what more could I do here next?

Well you know what each time I'm deciding these grades I don't

think I have to ask two questions I don't have to ask.

Is it greater than 90 and less than 100? Is it greater than 80 and less than 90.

If I kind of rethink my logic I can maybe do this better.

Still let me propose that we simplify this further

and just do this.

If we know the input for the moment is going to

be within zero and 100 we can make some assumptions.

We could say something like if the score is greater than your equal to 90.

Well the student gets an a.

L. If the score is greater than or equal to 80 the student gets A. B.

L. If score is greater than or equal to 70 they get a C.

L. If

The score is greater than or equal to 60 they get a. D. else they get an f.

So what have I done here.

Well instead of asking two questions every time checking the

lower bound and the upper bound of that range,

I'm kind of being a little more clever here by asking if the score is greater than 90?

Well, they've obviously gotten an A. Or better.

If the score is greater than or equal to 80

they should probably get an A. Or a B. Right?

If your score is greater than 90 and greater than, sorry,

if your score is greater than 80 well,

you either deserve an A if it's really strong or a B if it's just above 80.

But because of the if l if logic,

we've already checked as the students score greater than 90.

And if it's not, then we're asking the question well, is it greater than 80?

So you implicitly know it's somewhere in the 80 to 89 range else, you know,

it's in the 70 to 79 reach else?

It's in the next range down.

So it's a minor optimization that allows us to ask fewer questions.

But again, it's making the code arguably a little more readable,

Certainly more succinct and then hopefully

more maintainable, longer term.

Any questions then on these types

of changes and this type of logic with our code.

Any questions here?

Let's see question from

Yes, if I'm saying it. Right.

Oh yes, if you're there.

Yes, I am. Yes,

your question.

What if we don't use a lift at all, what if we

uh right the court in f in oil go?

Yeah, if you just. Oh, if you just use ifs like I did the first time around.

Yes.

So that's a good question because it's actually

going to have an unintended effect here.

Let me get rid of the F temporarily and just focus on a through D.

If we revert to where we began today's story

with conditional saying if if if if now our cleverness

here of using broader strokes and not using an upper

and lower bound ranges is going to come back to

be a downside. Let me go ahead and run python of gray dot pi and suppose my score is 95.

I am so darn excited. I want my A but nope, I just got an a a B a C. And a D.

So logically that's broken things because if

you don't make these conditions mutually exclusive,

every one of those questions is going to get asked and therefore answered.

And even if your grade is above a 90, it's also logically above an 80. Above a 70.

Above a 60. And if I had kept it in there, I would have failed as well with an f.

Really good question. Other questions here

on this form of logic

Patrick from you.

Uh can you hear me?

Uh you know, I was just,

I was curious because so the idea that you were mentioning in that

is that uh if you don't have like a point to stop at,

then it's just gonna keep going through and following the entire thing.

Um but my question wish it with it was I guess

like, would there be any,

I guess better way to kind of clean up

even just this simple statement like we had before,

the previous one that you had with the Elvis.

Oh, I I I like your enthusiasm for simplifying things further.

I'm gonna go out on a limb here and say this is about as good as it gets,

at least using only conditional statements.

I can, if my mind wanders,

think of a slightly more clever way to do this

maybe with something called a loop or another programming construct.

We don't have that yet in a vocabulary.

But yes, there's absolutely other ways to do it, but I think not yet,

if we want to restrict ourselves to just words like if and or else

uh an l if and and and the like,

well, let me propose that we pivot now to use another approach here,

that uses one other symbol that up until now we've not really had occasion to use,

Let me propose that we implement a program

that will call parody

and mathematics parody can refer to whether a number is even or odd.

And that's kind of an interesting question and turns out it can be useful in other

applications to to I just asked the question is a given number even or odd,

maybe that the user typed in and let me go

ahead and write a new program called parody dot pi

via code parody dot pi in my terminal.

And let me propose that we use this as an opportunity to introduce

the last of those arithmetic symbols,

at least most of which were familiar with addition, subtraction, multiplication,

division,

but there's been on this list before this last one here a percent sign and it

doesn't mean percentage in this case when used

as an operator in programming in python.

Rather it represents the so called modular operator

for modular arithmetic or at least in our

case we're gonna use it to calculate the

remainder when dividing one number by another.

Well, what do I mean by that?

Well, if you take a number like one divided by 33 does not go into one. Eat cleanly.

So you have a remainder of one.

two divided by three has a remainder of two,

Three divided by three has a remainder of zero because it divides cleanly.

Four divided by three has a remainder of one, because you can divide it in once,

but then that leaves one, so it has a remainder of one.

And then lastly something like five divided by three has a remainder,

of course of two.

So that's all we mean by remainder.

How much is left over after dividing one number by another?

Well, if I go back now to my code and I consider how I might implement the question

is this number even or odd. Let's consider how we might implement that.

Since it's perhaps not necessarily obvious how we can use this additional building

block but it turns out it's gonna be very useful longer term.

Well let's first just get a number from the user in a variable called X.

And I'm going to set that equal to the conversion to end

of whatever the user inputs after asking them what's X question mark

And we've done that before many times. How do I now determine if X is even or odd?

Well it turns out if I have access to

a programmatic operator that tells me the remainder.

I think I can do this.

In fact let me just ask the group and this is just from grade school math. Perhaps.

What does it mean for a number to be even

to be clear a number like 02468, 10, 12, 14, 16. Those are all even numbers.

But what does that really mean? Elena if I'm saying that right?

Yes. Hello. Even numbers that can divide it exactly by two. For example 2468 and 10.

Perfect.

And we could go on all day long literally

since there's an infinite number of those even numbers.

But it's nice that you formulated it in terms of a question that

we can ask very clearly is this number cleanly divided by two.

That is can we divide it by two with no remainder A remainder of zero.

Well that's perfect because if we have this operator this percent sign

that allows us to answer just that. What is the remainder?

We can presumably check is the remainder of zero or is it one?

Do we have nothing left over or do we have one left over?

Well, let's ask that if X divided by

two has a remainder of zero as Elena proposes,

let's go ahead and print out something like quote unquote

even and just say as much to the user else.

I think we can assume that if a number is not even,

it's going to be odd if it's indeed an instructor.

So I'm gonna go ahead and print out quote unquote odd instead.

And let's go ahead and now run python of parody dot pi. And my prompt, what's X?

Let's start with 22 is in fact even let's start with 44

is in fact even let's get let's get interesting with three.

Three is now on. And I think we could do that all day long and hopefully get back.

Indeed, exactly that answer.

But what more could we do here? How could we improve upon this?

Will recall that we have the ability

to invent our own functions and let me just

propose for the sake of discussion that we're going

to eventually find that it's useful to be able

to determine if the number is even or odd.

And so we'd like to have that functionality built in

and I don't think python has a function for telling me just

that but I can invent it using codes like just this.

So let me go into my earlier version here and let me propose that we do this.

Let me go ahead and write a main function.

I'm going to get back into that habit of defining a main function to represent

the main part of my program and I'm gonna do what I did before.

I'm going to get an integer from the user's input,

asking them what's X question mark.

And then I'm going to ask this question for the moment.

I'm going to naively assume that the function already exists.

But that's a useful problem solving technique.

Even if I have no idea yet where I'm going with this,

how I'm going to invent and function that determines if a number is even.

I'm just going to assume that there's a function called

is even and I'm going to call it blindly like this

if is even passing in X,

then go ahead and print quote unquote. Even

so if this magical function called is even returns true

as its return value. I am going to print out that it's even

else. Otherwise I'm going to assume that it's of course odd.

Now, the one problem with this program, even if I call main over here

is that is even does not exist and this program would

break if I ran it right now but that's okay,

I have the ability to recall to invent my own function.

So let me define with def a function called is even I want this function

to take an argument and I'm gonna call it in just a number generically.

I could call it X.

But again,

I don't want to confuse myself as to which exes which So

I'm going to give it a different name and that's fine.

I'm just gonna call it more generically end for number

and then I'm going to do this.

I'm going to say if N percent to equals equals zero. Just like before then.

And here's the magic you the programmer can

actually return what are called boolean values.

We've seen in python that python has stirs or strings,

ints or integers, floats or floating point values,

all of which are different types of data.

In python,

python also has 1/4 data type called bull for a boolean value.

And even though this is just adding to our list,

the nice thing about bulls is that they can only be true or false

and it can be any number of an infinite possible values.

A bull can only be true or false and it must

be capital T and capital F if you're writing itself.

So if I go back now to my code and I consider exactly what I want to return here.

Well, if N percent to equals equals zero,

that is if n divided by two has a remainder of zero.

Well I think it's even to Elena your definition. So let's return true

capital T

else.

If it doesn't have a remainder of zero,

I'm pretty sure mathematically it's gotta have a remainder of one.

But it doesn't matter.

I know it's not even so I'm going to

return false and we've returned false instead Capital F.

And now that we've defined both Maine and is even and I'm calling main at the bottom.

I think I've got this right python of parody. Dupuy enter

what's X. Let's try something simple like to

and it's even let's do it again. What's X? How about four? Even once more? What's X?

How about three?

And it's odd

now, what have I done here?

I've just made the point that if I want to create my own function

called is even that answers this question for me that I can now

use in this program and heck maybe future programs that I write.

I now have a function that no one gave me.

I gave myself that I can use and reuse and I can even perhaps share it with others.

I'm using that function now online. Three just to make a decision.

I'm using a conditional up there and my bullying expression

something that's true or false is going to be

not something explicit like X less than Y.

Or Y. Greater than X. Or the like

it's going to be a function call. I'm using a function as my bullying expression.

But that's okay because I know because I wrote it

that that function is even it returns true or it

returns false and that's all I need in a conditional

to make a decision to print even or print odd.

So let me pause here to see if there's

any questions now on how I've implemented is even

using this bull.

Let's see, question from

we have here a niche if I'm saying that right?

Hello. Hi David as well. Thank you for this wonderful class.

Uh, day before yesterday and today.

Uh,

I have just one query like basis on the background of Java uh there when

we used to pass the argument we can also pass the address of the variables.

So is there any sort of this concept in python

short answer? No.

Those who are unfamiliar with java or other languages or C or C plus plus,

there's generally ways to pass values in different mechanisms

that allow you or disallow you to change them

in python,

know everything we're going to see is actually in fact

an object but more on that down the line.

Good question.

How about another question here on is even on bulls or our own functions here upon.

Yeah. Actually,

when you define these functions, what if you want to tell the like,

is that doesn't mean function executed by itself or

how do we tell it to executed by itself?

Like not specifically mentioning it if you get it.

Well, so the fact that I've defined two functions here Maine.

And is even it's just useful because now I have a chunk of code

for maine and a chunk of code for is even but it's up to

me to actually call one or more of those functions and that's why I've

adopted this convention at the bottom of my code of calling Main explicitly.

Otherwise,

the only thing you're doing is defining functions but to kick

start the actual process I want to call main here.

But again, it's just a convention. I could have called that main function.

Anything else

but programmers by convention indeed.

Call things main and you're required to call things Main even

and other languages if I've answered that. Right.

How bout time for one more question here

on these bulls and these is evens.

Let's see how about over two.

Anjali.

Hi. So I actually had a question about defining a function if that's okay.

So if you define one, are you like within your code, like you made it up?

Are you allowed to use the dot operator?

Like we did name dot strip and use it like that.

Good question.

If you've created your own function,

can you use other functions like dot strip or dot

title or dot capitalized that we've seen in the past.

Um, you can use those on strings. Those functions come with strings.

You can't necessarily use them on your own functions unless

your function returns a string for the examples you gave,

I'm returning a bull bulls have no notion of white space to the left or the right.

You can't call strip, you can't call capitalized.

But if you were writing a different function that returns a string absolutely.

You could use those functions as well.

Well, let me turn our attention.

If I may back to this example here and consider as we now frequently do,

can we improve on the design of this code?

Can I make this particular program better?

And I can.

There's a couple of ways here and I'll show you

something that's now generally known as something python IQ.

There's actually this term of art in the python world where something is python IQ.

If it's just the way you do things in python, which is to say we've seen already,

there's so many different ways to solve certain problems.

And in the python community of programmers,

there tend to be some ways that are smiled upon more than others

and they tend to relate to features that maybe only python has,

but not other languages.

And here's some syntax that you might not have seen

in languages like java or C or C plus plus.

If you've programmed before. And if you've never programmed before, this two

is going to be new.

Instead of asking a question like this.

If else using four lines in python,

you can actually collapse this into just one more elegant line if you will

instead of asking if n divided by two has a remainder of zero return true

else, return false. Let me delete all of that and just say this

return true.

If N divided by two has a remainder of zero

else return false.

Now those of you who do have prior programming

experience might actually think this is kind of cool.

You can condense from four lines into one line,

that very same thought.

And one of the reasons why python is popular is

that it does tend to read rather like english,

it's not quite as user friendly as most english or most human

languages but notice now the line does rather say what you mean,

return true

if and divided by two has a remainder of zero else false.

I mean that's pretty darn close to something you might say logically in english,

be it about

even in odd or really anything else.

So that program is gonna work exactly the same python of parody dot pi.

Let me type in two. It's still even, let me type in three, it's still odd,

but I can refine this even further and again consistent with this idea of not

just writing correct code but writing better and

better code but still keeping it readable.

I can do one even better than this.

Notice this value here is my bullying expression and

it is going to evaluate to true or false.

Is N divided by two having a remainder of zero

or not like that is by definition a boolean expression,

it has a yes no answer.

A true false answer.

Well if you're bullying expression itself has a true or false answer,

why are you asking a question in the first place?

Why ask if why say else? Just return

the value of your own bullying expression and perhaps the tightest version,

the most succinct and still readable version of this

code would be to delete this whole line,

python IQ though it is and just return

en

modelo two equals equals zero.

If it helps let me add parenthesis temporarily

because what's going to happen in parentheses will happen first

and divided by two either does or does not have a remainder of zero if it does,

the answer is true

if it doesn't, the answer is false.

So just return the question if you will,

you don't need to wrap it explicitly with an if and an else.

And in fact because of order of operations you don't even need the parentheses.

So now this is perhaps the most elegant way

to implement

this same idea now which is better.

This is pretty darn good and it's hard to take fault with this because it's so very

succinct but it's perfectly okay and just as correct to have an if and then it else,

even though it might be four total lines.

If that helps you think about your code more clearly

and it helps other people reason about it as well.

So just by adding in some of these new keywords here,

like if an L if and else we have now the ability to ask questions about values.

We have the ability to analyze input from

users and ultimately make decisions about it.

And these then where are conditional,

lying ahead is going to be the ability for us to not only

use functions and variables and also these conditional but also next loops.

The ability to do something now again

and again

and you are

Okay?

Re on the wide shot here, what's going on? Okay, so thank you so much.

That was our second lecture.

I know this is a crazy long day now and I

certainly understand if people need to go do many other things.

Um We are still here in awake so I think we on our end at

least are going to proceed with the third and final lecture which focuses on loops.

It'll be about that same length.

It won't be as long as the first if you need to go to work to sleep to breakfast,

that's totally fine.

But we're gonna take a 10 minute break here and when we come back we'll

do the final segment today on loops which will be the courses third lecture.

So we'll see you in 10 if you'd like to stay with us,

we still have about five minutes in the break but thought we'd use

this as an opportunity for any Q and A If folks have questions,

we won't start yet, but if anyone has questions about Patrick from you,

Yeah, you can hear me still everything good. Okay.

Yeah, no,

I was just wondering David with the uh the

functions that you were mentioning the example before,

just because you know,

like the understanding I have is that you more or less just embedded.

Most of the functions inside of there to call upon them by sequence.

So I was just kind of curious like when you had uh yeah, if you have the example there,

um let's see this one.

Yeah, yeah. So exactly that one.

So um like in the option here, you see, you haven't even as an in your example,

is that and with the uh

variable you had before, but that team is even you have a top of X.

I'm just assuming it's basically just

a placeholder for whatever variable you input

the end here.

Yes, exactly.

So when defining a function, you specify not just the functions name,

but also zero or more parameters that you wanted to accept and I chose n.

I could've called it anything I want.

And what happens is when you call the function for instance, as I do here

a X is passed in

two and is even but in the context of his even you call it N.

And this is sort of necessary because if you think about it.

When we looked at the documentation for the print function.

The humans that invented the print function years ago,

they had no idea like what variables you and I would be passing in years later.

So they need to be able to call their variables what they

want and we need to be able to do the same.

So that's all that's happening there.

Okay. Yeah.

Thanks. Sure. Other questions if you want to call on someone function

um yeah,

ananda.

My question is can you use a switch statement in python? Yeah. Short answer.

No python does not have switch.

It does recently have something called match,

which can sort of be used like that but short answer.

It does not have switch like java and C and C plus plus. Do

you have to do if LF LF LF? All day long and instead

let's see. Uh

Yes. So can you help me? Yes.

So in the last contraction you said return en modelo two is equal to a is equal to zero.

So how is it that

it knows it will return to our faults.

Yes. So it's the equals equals.

So I want it to evaluate to true or false and that is by definition what equals equals.

Does if you're coming from C C plus plus python? Sorry, java.

In some other languages you could technically omit the equals equals zero.

You don't want to do that in python.

If you want to return true or false,

literally it's the equals equals that guarantees that the response will be a bull

and not an integer for instance.

Good question.

Others. Yeah, we have a few more minutes here. Uh

let's see uh w t if I'm saying it right

Yes. Um I had a question regarding the input function.

I wanted to know if while taking input actually know for the integral function.

When we're taking in input,

it is returning a string and when we're using the in function,

I guess it is parsing the string into an integer value.

So the question is that can we take hexi decimal input like anything

besides the usual decimal like we can do in java or other languages.

You can, if you google python in

you'll probably find your way to the documentation for the in function.

It takes an optional second argument.

That is the base that you want to use by default the basis.

10 for decimal, but you can override it to 16 or to or whatever you want

if you don't know what that means. Not to worry another time.

Let's see, Richie if I'm saying it right.

Yeah. Hi, Hi, thanks. Thanks a lot. Yeah.

My question was all of the other I think their functions that you,

you introduced and and extra and whatever you used but with bull,

unless I overlooked something you never actually used the pool and

I don't understand

when it's used or if it's used or if you did use it. Yeah. Really good.

I I did not use it because at this point I didn't want to convert anything to a bull.

I just have no reason to do so right now in our story,

the reason I used INts with an open print and a close friend and

I used flow is because I very explicitly wanted to convert something from the human

to an inch or two afloat.

But I'm not trying to convert the user's input to true or false.

I could someday, but that's not the problem we're trying to solve.

I'm just using a true or false answer instead

because because you use the equals equals. Yes, exactly. So yes.

Same answer as before the equals equals gives me back a true or false boolean value.

By contrast, the input function gives me back a stir a string value.

Okay.

So if it was some other statement that wasn't clearly bullying,

you could make it bullying by doing something like that.

Exactly.

And this is a feature in some sense of python, python is loosely typed,

which means we programmers don't have to ever well

we don't have to frequently type into float stir bull

nearly as much as you have to in languages like C, c plus plus,

java and others which are strongly typed.

So python has types but they're kind of hidden until you really need them,

which I did when I wanted to do the conversion.

About one more question before we resume.

Let's say yes,

I'm saying it right.

Yes. Hello to everyone. I would like to ask if

you can there's a certain type of coding in python that

that indicates to go back to a certain line of code

or if you just want to use loops for that.

Good question and a good segue to what we will now do is loops.

Python does not have a go to statement.

Some languages like C do um go to is generally frowned upon.

Not so much because it's bad inherently but because it

tends to be overused or misused to implement Control flow,

which is what we've been talking about.

The flow of your program

in python, you would use loops. You use functions for that.

And even in the world of C and C. Plus plus

go to is frequently frowned upon though

it has significant value in some situations,

error handling, especially.

All right, well,

let me just finish getting set up here and let me just say again personally,

you all are amazing.

I know we still have 381 people awake around the world. If we could if we could

serve you pizza or any form of food, we would but

not really possible.

But CS fifty's video players,

some of you might know have snacks zoom does not have snacks.

Our video player does but thank you again for staying

with us so long in a moment we'll get settled.

We'll dive into loops and that'll be it.

But happen to do a couple of quick questions at the end.

We just need to get out of this building eventually too,

since it's the day is ending here at Harvard as well.

All right, give me just a moment.

Mm hmm.

Okay.

All right. This is CS fifty's introduction to programming with python.

My name is David Malin. And this week we focus on loops,

disability and python and a lot of other programming languages

to do something again and again a cycle of sorts.

And let's see if we can't begin by motivating exactly why

we have this ability to do things cyclically using these loops.

I'm going to go ahead here and open up V. S.

Code and in my terminal window, let's go ahead and creates via code.

Cat dot pi a python program that meows like a cat's

and I'm going to go ahead here in this code tab.

Very simply, perhaps I'm gonna start by implementing this cat just by using prints.

We're gonna have this cat not make audible sounds,

but just print meow meow meow on the screen three times.

Well, I think the simplest way I can do this is just to print mo once

and to print mode again and to print mo one last time on the screen.

And now let me go down to my terminal window. Let me run python of cat dot pi

enter and meow meow meow!

Alright, so this program works. This program indeed works.

If my goal is to get the cat 23 times.

And let me propose,

just to help us wrap our minds around what's going on inside of the computer.

Let me propose that we consider this flow chart.

So, as before we have this flow chart that starts with this oval,

which just means start reading here and then notice it goes via arrows to a mo

mo

mo

and then it stops. It's perfectly correct. And honestly, it's wonderfully simple.

But I dare say we can find fault with my code Nonetheless,

why is my code arguably poorly designed.

Now, the answer is going to be loops in some way.

But let's see if we can identify in what way

the code is actually poorly designed in some sense.

Let's see any thoughts, Alex.

Mm hmm.

Yes.

Okay, so I mean repeating the same action like three times or even more.

Um just not a good habit, like Yeah, I'm just repeating myself.

And honestly it's not that big a deal. If we go back to my code here.

Am I really doing such a bad thing by just printing mo mo mo three times. Not really.

But let's consider the logical extension of this?

Suppose I wanted me out four times or five times or 50 times or 500 times.

Do you really think even if you've never programmed before,

is the solution to this problem really going to be

to hit copy paste 50 times like probably not.

We can probably do better than that and beyond it just being

ugly at that point having so many lines of identical code.

Just imagine if you wanted to change the code,

maybe I changed my mind and I don't want to make a cat, I want to make a dog.

So now it has to say woof, woof woof multiple times.

Now I have to change that in like 50 different places and yeah, sure.

I could do find and replace but come on.

Like we're programmers now,

there's got to be a better way than just repeating ourselves.

So I bet we can do better than that.

If we think about a little harder what we how we go about structuring this

program and we can do that if we augment our vocabulary just a little bit.

It turns out in python and in other languages too,

there's a keyword called while and while is one

way that we can express what's called a loop,

a block of code that's going to do something again and again and again,

zero times one time, two times 50 times as many times as we want.

But while rather leaves to us.

The the particulars of how we express ourselves to do something again and again.

So let me go back over to V.

S code here and let me propose that I do this while is

a construct that allows me to ask a question again and again.

And any time we've seen a question it's been in the form of a boolean expression,

a question to which the answer is true or false.

Well how could I do this?

How could I print out mo three times and asked three

times a question to which the answer is true or false?

Well what if I did some counting right? Like literally on my fingers.

And if I'm trying to count maybe down from three, I want to mow three times.

I can put three fingers up and I can

and then I can put like one of the fingers down and then

and I can put one of the fingers down and I can

put one of the fingers down.

And maybe the question I can ask every time I mo is do I have any fingers up?

Still do I have any fingers up? Still do I have any fingers up? Stone.

If the answer is true, keep going. If the answer is false, Stop.

So how can I translate that to code?

Well once we've added this wild keyword,

I think we have all the building blocks already.

Let me propose that I do this.

Let me propose that I give myself a variable and I'll call it I for integer

but I can call it anything I want and I'm going to initialize it to three.

Then I'm going to use this new feature of python while and I'm going

to ask a question the answer to which must be true or false.

And I'm gonna say while I does not equal zero.

So I'm going to ask the question while I does not equal zero. Do the following.

Notice the colon at the end of the line, notice my indentation.

And just like with functions just like with conditional,

is you indented the lines that you only want to execute as part of this other thing.

What do I want to do while I does not equal zero? Well I think I just want to

but it's not enough just to write this code.

If I were to very dangerously run python of cat dot pi and hit enter right now.

What might happen on the screen

whether you've programmed before or not? Why is this a very bad thing, potentially.

It's not gonna break things but it might

it might lose control of my computer somehow.

Any thoughts? Yeah, timo.

Hi. I think it's going to continue to print out mail since

I is always equal to three and the while is always true. Yeah, exactly.

If I'm initializing I to three that is setting it equal to three on line one.

Then I'm asking the question while I does not equal zero and that's going to be true.

It does not equal zero. It obviously equals three.

Print.

And the way a while loop works is that the python interpreter

just keeps going back and forth, it goes from line one

to line two,

then two, line three and then it goes back to line two to ask the question again.

If the answer is still true, it goes to line three, it then goes back to line two.

If the answer is still true, it goes back to line three

and to tim's point,

if you're never actually changing the value of i it's always three,

you're just gonna be looping literally forever.

And this is an accidental infinite loop. So we've got to be smarter than that.

I'm not going to hit enter because I don't want to lose control over my computer here.

Such that it's printing out mo forever.

Um fortunately if you ever do do that

and you find yourself in an accidental infinite loop

control C for cancel or interrupt is going to be your friend.

If you ever seem to lose control,

you don't need to like reboot or turn off the computer,

you can just hit control C in your terminal window and that will likely

fix it. Alright well what do I want to do then after mowing Each time?

I think what I'd like to do here is maybe something like this.

Let me update I two equal whatever the current value is uh minus one here.

Whoops, sorry minus one. So if I on each iteration in updating I to be one less.

One less. One less, It should eventually hit zero.

At which point the answer to nine two's question will now be false.

So let's see if this works.

I'm gonna go down to my terminal window and run python of cat dot pi and

I indeed get three meows. Why?

Because I've kind of wired this up kind of like a machine in software.

If you will, I've set I equal to three,

then I keep asking this question but I keep turning the gears.

I keep changing the value of the variable to make

sure that ultimately it is actually being deck remounted.

That is decreased by one until we eventually hit zero.

Now for those of you who think I'm a little more

graphically let me pull up one of our usual flow charts.

This is just a representation graphically of the exact same thing.

Notice what's happening.

I first start the program and then I initialize I to

three and then I asked the first of my questions again,

the diamonds always represent questions and the answer is going to be true or false,

Does I not equal zero?

Well it doesn't equals three. So if I follow the true line, I'm oh

and then I follow this arrow and I update I two equal I minus one at this

point in the story I presumably equals to mathematically

I follow the arrow and there's the loop.

This is why it's nice to see this graphically.

Perhaps because you can literally see the loop back and forth.

Now I ask the question again, Does to not equal zero? Well it does not equal zero.

It's too so we mow again we change I from 2 to 1. Well, does one not equal zero?

Well obviously if one is not zero, so we mow again we deck criminal.

I again I is now zero

Does zero Not Equal zero. No, it equals zero. So the answer is false and we stop.

So there perhaps more so than any of our flow charts before.

Do you really see the structure of what's happening inside of the program and you

don't have to get into the habit of making these charts or creating these charts.

But just as the first pass at what's going on inside of the computer,

that's indeed one way to visualize it instead.

Well,

let me propose that like always there's many different ways to solve

this problem and suppose you just like to think a little differently.

Maybe you don't like starting at three and then counting down to zero.

Y maybe you're just brain doesn't work that way

and you prefer to count up instead of down

totally fine.

Let me go ahead and change my code here to set I equal to one instead of three.

And here let me just change my logic rather

than checking for not equal to zero like that.

Maybe you don't like think in terms of not because it's

a little confusing and it might be let's just check that i

is less than or equal to three. So we'll be a little more explicit.

We'll count from one up through three each time printing.

But I'm gonna need to change this line here.

Let me see if we can't call on someone to change line four for me.

How do I want to change line four

to be consistent

with counting from one up to and through

three.

Let me see here. How about we call on

let's say on a part if I'm saying it right.

Yeah. So

I would be

plus one every time you. Yeah exactly. In this case we want to add one.

Not subtract one.

And in fact if you think about this, this too could end very poorly right?

If you start counting at one and you keep subtracting one, subtracting one.

Subtracting one.

I think we're gonna find ourselves with the same problem team o unidentified.

Which is that we're never going to stop because we're going to keep getting

more and more negative as opposed to ever getting up to the number three.

So I think on the part you're right, I need to change this to be I equals I plus one.

And now notice just for clarity to

the equal sign is again our assignment operator from right to left logically.

This might otherwise strike you as strange. Like how can I equal itself plus one?

Well, it doesn't until you execute this code from right to left, you add +12.

I or you subtract one from my and then you update the value of eye on the left.

The assignment copies the value from the right

to the left. Well, how else might I do this? Well, I will

say that most programmers,

computer scientists more generally tend to start counting from zero.

It's a convention and it actually has upsides.

Even in python and other languages were generally speaking,

it's a good thing to start counting from zero.

Instead of counting. Like we might in the real world from one.

Let's go ahead and adopt that convention.

Now let me said I equal to zero and I need to

make a change now notice if I don't change my logic,

this program just became buggy.

The cat has a bug. It's now mowing four times if I run it as is.

But the easiest fix here would be to change my inequality to

be this less than instead of less than or equal to now,

I'm starting at zero, but I'm going up to but not through three.

And even though this might

of all the things we've seen thus far.

See maybe the least familiar, most of us might start at 12, then three.

It's a good habit to get into.

Now start at zero and go up to but not through the

value that you care about ultimately three in this case here.

Well, let me tighten things up a bit here.

Not only will this now fix my counting

problem and now almost three times as expected,

there's a more succinct way to express I equals I plus one.

And this is because it's such a popular thing to do in code, you can instead just say I

plus equals one and that's it.

You don't need to put everything on the right hand side. This is a special syntax

that says the exact same thing,

increment I but it does it with a few fewer keystrokes.

It's just a little more pleasant to type. It's a little faster to read.

It's just a convention

those of you who have programmed in C. C plus plus, python, not python.

C, C plus plus, java, java script might have seen plus plus before or minus minus.

Sorry, python doesn't have it. So you cannot use that.

This is as succinct as your line of code might get.

Alright, let me pause here to see then,

if there's any questions about these implementations of wild loops.

Questions here on these.

Yeah. How about we go over to uh Piyush if I'm saying it. Right,

Yes, we can.

Hi.

Um So for let's say we um So for for the loop,

can we use stuff like four loops which have a certain I

value initialized to it at the at the start and it runs from

the particular condition you put into the

um

into the thing and implemented

as as you go along in the loop. Short answer.

No, you cannot do what you're describing.

But there is another type of for loop that we will soon see.

But let's come to that in just a moment. Other questions

on loops using while here.

Yeah. How about question from Depeche.

So I had a question about the flow charts.

There were certain there were certain symbols

for the certain kind of the statements

they are. They certainly used for that kind of statement that they put their

They are. So I deliberately

I deliberately use certain types of symbols,

certain shapes here whereby an oval is conventional for start and stop.

I used rectangles for any statement of code,

like an assignment or a printing and so forth.

And I use diamonds to represent questions that

you might ask conditions as we've seen.

Um if you're doing this for yourself,

if you're just trying to make sense of your code and writing it down,

you certainly don't need to use these formal symbols.

But I tried to be consistent with some best practices and in fact,

let me come back to the same picture because this was the first version

of our picture but we've since modified our code a couple of times.

This recall was the version where the question we were asking was I not equal to zero.

Let me go ahead and just change this code now to represent the next version we did.

Which recall changed our logic to start counting from one.

It changed our question to check his I less than or equal to three.

But then everything else was the same

except for the counting, which is now plus instead of minus.

And then we will find it a little bit further by counting now from zero

up to but not through three.

And we tightened up this code here by just

implementing one by using the slightly more assisting syntax.

So at this point,

these flow charts might become less and less useful

for us because once you've wrapped your mind around

the concept and hopefully the picture helps bring that concept to life.

It's certainly fine to focus entirely on the

code and only think about or even draw something

like this if you need to wrap your mind

around something more complicated than you're used to.

Well,

let me go ahead if I may and propose

that we transition to another approach of types of loops

using another keyword here, namely a four loop.

And this is a word that does exist in other languages but doesn't

necessarily have as many features as other languages might use it for.

But there is a different type of loop, knot, a wild loop,

but a four loop and a for loop is going to

allow us to express ourselves a little differently,

but to do so I propose that the easiest way is if we introduce one other idea in python,

which is that of a list and here too.

No pun intended. We're adding to the list of data types that python supports.

We've seen stirs or strings,

ints or integers, floats or floating point values, bulls or boolean expressions.

Python also has lists, which is another type of data,

but wonderfully this one's probably pretty familiar.

A list of things in the real world is a list of things in python.

It's a way of containing multiple values, all in the same place,

all in the same variable.

So what do I mean by this? Well, let me propose that

we go back to R V s code here and let me kind of

start fresh with my code here and not use a wild loop at all.

But let me use this new keyword for

the way the four loop works is that it allows you to iterate over a list of items.

So what does this look like? It might look like this.

Four I in the following list of items. 012.

This is my starting point.

And on each iteration of this loop,

that is on each execution of this loop again and again, I want to print out

now.

I'll admit I kind of like the look of this code already,

even though there's some new syntax here because

it's just shorter than the wild loop.

Right?

The wild loop had multiple lines a moment ago and it

was entirely up to me to decide what I is.

I have to check a condition.

I have to increment or deck remit I like I was doing a lot of

work relatively speaking to make that thing turned to make that loop going to go.

It was very mechanical in a sense, you can kind of,

in your mind's eye maybe see the gears turning as all

of these variables are changing and these questions are being asked.

A for loop kind of simplifies all of that and it just says if you want a variable

like I a number and you know in advance how many times you want this loop to execute?

Three times

We'll just kind of specify what it is you want I to take on his values explicitly.

In this loop, I will be automatically initialized by python to be zero.

Then Momo will be printed.

Then python will automatically update I to equal one, then Momo will be printed.

Then python will automatically update I two B two and mo will be printed.

And because that's it for the values in that list,

python will stop and it will only

a total of three times what is the list.

The list in this program is exactly that zero comma one comma two.

And notice the square brackets.

Those aren't parentheses. Those are square brackets that represent a list.

That's how you know, visually as the programmer,

that's how python knows as the language that you intend for that to be a list.

So let me go ahead and run this python of cat dot pi and it works just the same,

but it's only two lines.

It's pretty readable once you have familiarity with that construct. But

to my constant point about correctness, not necessarily being the same as design.

In what sense is this program? Perhaps poorly designed?

It seems to work at most three times.

But why might this not be the best way to solve this problem?

Even if you've never programmed before

again? Think about corner cases, things that may or may not happen.

Think about extreme cases

that really test the quality of this code? Hope your thoughts.

Ah

I think that.

Can you hear me? Yes, we can.

Okay. I think that because like we can we are saying 012

Three times

and then like if you want to 20 million, you say 123.

Yeah, exactly. And that's what I mean about thinking about the extreme cases.

If you're trying to decide for yourself if your own

code is good or someone else's code is good.

It might look so at first glance,

but do what hope did think about the extreme well what if it's not three things.

It's a million things. I mean are you really going to write out

1, 0 through a million or zero through 9.

You know 999,999,999.

Like no, you're not going to write that many numbers on the screen.

There's got to be a better way.

So let's do the better way from the get go

rather than set the stage for doing something poorly.

And the one way we can solve this problem to improve the design.

is don't just manually specify the list of values. Use a function.

Someone else's function that comes with python

that gives you the list you want.

And the easiest way to do that in python is to use

a function called Range that returns to you a range of values.

It expects as input at least one argument.

And that number is going to be the number of values you want back.

Those values are going to start at zero and go to 1 to 2 and so forth.

But they will go up to but not through the number you specify.

So by specifying range three, you're essentially being handed back 123 values.

And by default those values are 01 and two. And that's it.

But what's brilliant about this?

Is that now to hopes point if I do want to mow a million times.

I mean that is an angry cat. I can now do a million by just typing a million.

I don't have to literally type zero comma one comma two comma three comma four.

All the way up to 999,999. I just do this. So that's got to be a better way long term.

So that's indeed one improvement we can indeed make here still using a four loop.

But now using this range function.

And just to show you something else that's python IQ.

This is not strictly necessary, but it's commonly done.

There's a minor improvement we can make here, even if we're just mowing three times

and notice that even though I'm defining a variable, I

I'm not ever using it.

And it's kind of necessary logically because python

presumably has to use something for counting,

right?

It has to know what it's iterating over.

But there's this convention in python where if you need a variable just because

the programming feature requires it to do

some kind of counting or automatic updating.

But you the human don't care about its value.

A python IQ improvement here would be to name that

variable a single underscore just because it's not required,

it doesn't change the correctness of the program.

But it signals to yourself later,

it signals to colleagues or teachers that are looking at your code to that.

Yes, it's a variable,

but you don't care about its name because you're not using it later.

It's just necessary in order to use this feature this loop in this case here.

So just a minor

improvement or change their

But to really get you intrigued by what's possible in python?

Let's take this one step further. So, if we really want to be python, IQ this one.

If you've programmed before, it's kinda gonna blow your mind, so to speak,

whereby if I want the cat to meow three times, what if I actually do this?

Print

Open Parenthesis, Quote Unquote

Times three.

All right. You have to be kind of a geek to think this is cool, but this is kind of cool.

So you can literally just print what you want multiply it by the number

of times that you wanted and you will get back exactly that result.

Now, I've kind of made a mistake here. So let's see what this does.

It's not quite as beautiful as this code might look to you to some of you, to me,

let me run python of caterp. I enter.

Okay. It's a really like hungry cat or something.

It's meowing really fast, but I can fix this. I bet.

Let's think about now some of the basic building blocks we've discussed.

The problem is clearly that literally mo mo mo is being repeated three times,

but it's not as pretty as I wanted.

I wanted to be mo

mo mo on separate lines.

What might be a possible solution here while

still using this multiplication operator and think back.

We've used plus to concatenate strings.

You can apparently use multiplication to concatenate strings,

but more than once again and again and again,

how could I clean this up without reverting to my for loop

or my wild loop and still use multiplication in this way.

Yeah, musa if I'm saying it right.

Uh Yeah, we can use the escape sequence which would be a backslash and

amazing. Yes. Think back to backslash n.

Which is the way you as the programmer can express a new line in code. And I think

if I take your advice,

I put a backslash end there inside of my quotes so that at

the end of every M E O W there's a new line.

Let's see how this looks. Let me clear my screen and run python of cat dot pi.

Okay, so close, I like this. Let me call on someone else.

The only thing I don't like and I know I'm being really

nitpicky now is that it's mo mo mo on separate lines,

but there's kind of this extra blank line which I'm just

not loving aesthetically it's a minor nitpick but someone else,

what could we do now to fix this more cleanly Mohammed.

I think we can.

Yeah.

So here to like all of these things we've

seen in past weeks are kind of coming together,

right?

Recall that The print function lets you control what the line ending is by default.

It's backslash and itself, which is why at the very end of this.

Print the cursor is being moved again to the next line.

Well, we need to just override that.

So let me go into my code here and let me

change this to comma and equals quote unquote so that it's no

longer the default backslash and it's instead now going to be uh

nothing whatsoever that should eliminate then

hopefully that additional blank line.

So let me run this one last time here, python of caterp I enter

and there we have it.

So now, you know, at least this programming goes,

it's kind of cool that I can distill this into

a short line and express myself all at once.

Now, to be fair, it's a little less readable. Like now I've got backslash in.

I've got times three I've got end equals quote unquote.

So you don't have to do things this way.

My previous approach with a four loop, totally fine.

My previous approach with a wild loop, totally fine and in some sense,

perfectly well designed.

But this is just yet another way to do it.

But it's not a good thing if you or your teacher, your colleague, your friend,

are going to struggle to read your own code,

but this is a feature of python that some languages do not in fact have.

All right, well, let me propose that things get more interesting.

Still, if we're not just smoking three times only,

but we're mowing some variable number of times.

Let's ask the user how many times this cat should meow.

So let me clear the screen here and let me figure out, Well,

how do I get a number from the user?

The catch here is that if I want the user to give me a number, I'm not doing math per se.

I'm mowing. And therefore the user has to give me a positive value.

The user has to give me a positive value. So how can I insist on this?

Well, if I just do this and equals intent of input, what's in question mark?

Well, I want to check, like I could say if N is less than zero,

like if it's negative while I could do this.

Well then ask again, Aunt

input what's end question mark?

Okay, well, what if the user still doesn't give me a positive number?

What if they're being really difficult?

They're not paying attention and they typed into negative numbers?

Well, if n is less than zero, well, let's do it again and equals Right.

This does not end Well, you can't

infinitely many times. Keep checking. Is that negative?

Is that negative is a negative right?

The program would never be done written so we can do this.

I think better maybe with a loop. So let me propose this.

A very common paradigm in python.

When you want to get user input that matches a certain expectation you have that.

It's all positive that it's all negative or just something like that.

You just immediately say while true,

you deliberately and a little dangerously but

a very conventionally induce an infinite loop.

Now what is an infinite loop. It's just one that goes forever.

And we've seen how that can happen accidentally mathematically it's

absolutely going to happen when you say while true.

Why? Well the answer to the true question is always true.

So this is a way of deliberately inducing a loop that by default is gonna go forever.

So we're gonna need a way of breaking out of this loop when we have the number we want

the convention though inside of this.

Otherwise an infinite loop is to ask the question you care about.

Like give me an ent by prompting the user for input. Like what's end question mark

and then ask your question if n is greater than let's say one if it's uh you know,

I'm sorry if n is greater than zero, if n is greater than zero positive value.

Well then what do I want to do?

Well, I'm gonna do this, I want then the computer to go ahead and

break out of this block of code.

I want to break out of the loop and I literally use the keyword break.

So how do I use this? Let me come back to my code here.

Well,

I literally inside of my conditional say break and the effect of

this line will be to break me out of this wild loop

all together.

And what can I thou do down here for I in range of whatever that value, End is print

and honestly, I don't need I here.

So let me come back to that principle before let me

just change it to an underscore just to be python IQ.

If you will. So what's going on?

Lines one through four deliberately implement an infinite loop

that otherwise by default is going to go forever.

But I'm asking a question inside of that loop after getting an inch from the

user online to I'm then checking is it greater than zero or is it zero?

Is it negative?

None of which makes sense for Mario and cat like

I want the cat to meow at least one time.

So if it is greater than zero break and this break statement,

even though it's indented indented twice has the effect of breaking out of

the most recently begun wild loop.

So once the user gives you a positive value, then we get to line six. At which point we

know that many times because of line six and seven.

So if I run this now python of cat top I enter Well, what's in,

let's start with three where we began

meow meow meow!

Well this time let me go ahead and increase

the size of my terminal window just temporarily.

Let me run python of caterp I let me do it 10 times

10 times now appears on the screen.

And the takeaways here are not just that we can

mow 10 times or do something again and again,

but this is a very common paradigm in python,

when you want to do something again and again and again,

but only until the user actually gives you a value that you care about here.

And let me propose, actually,

now that we practice a little more what we've been preaching,

especially when it comes to

say,

especially when it comes to say writing your own functions.

You know, now that I'm doing all this meowing,

it might be nice to actually have a mo

function that the inventors of python didn't envision.

So, let me do this.

Let me actually get rid of all this code and let me go ahead and do this.

Let me go ahead and say, define a main function as I've done before.

And let me just blindly call mo three mo doesn't exist yet, but when it does,

that will be great.

So, let me go ahead now and define mo so,

my mojo function should take as input a parameter called in or anything I want.

And this part's pretty easy now, how do you know, in times?

Well, for underscore in the range of n go ahead and just print mo

So, same code as before. Nothing new here.

I'm just putting that logic inside of a mo function

that's gonna have this side effect of printing

and now as before, let me go down here and let me make sure I call main.

And if I now run this code python of cat dot pi

meow meow meow,

it's always going to do three because I've hard coded the three.

Well let's make one improvement here. Let me go ahead now and maybe do this.

Let me ask the user for a number.

So let's say something like this number equals get number. Alright.

Unfortunately there is no function in python called get number that gets

a positive number from the user but I can invent that.

So define get number opened

and closed for an and then inside of this function let me do this while true.

Go ahead and get a number from the user,

converting it to an ant asking them what's end question mark.

And then if n is what I want it's a greater

than zero value. A positive number.

I don't want to break this time necessarily.

Although I could I instead want to return the value so I can actually do this instead.

And this too is a feature of python.

This ability not to just break out of a block of code,

but also to return a value and code

to actually return a value gives you the

ability ultimately to return explicitly of value.

So that your function has not just a side effect necessarily,

but it actually hands back just like input does just like it does just like float.

Does an actual value

to the user.

As an alternative not to complicate things,

you can still use break to break out of the wild loop,

but then you would have to still return in down here

because recall that break gets you out of the

loop and that's all of the highlighted lines.

Sorry,

I don't have to sorry, you didn't see that. Let me remind

now to be clear,

I don't have to return and here I can still break out of

the loop as I've done in the past with code like this,

but then after the loop, I still have to return end.

And so what's happening here is that if you use break to get out

of the loop but you need to hand back a value from a function,

you still have to use the return keyword now explicitly.

Either in the loop as I did or now outside of the loop, but still inside of

the function.

All right, let me pause here to see

if there's any questions

and I'll run this once as we go to make sure that I indeed get my three Meows questions

on this

creation of my own functions here. Yeah. Patrick.

Uh

Yeah, no. So I was just trying to understand the logic to it.

David with the defined get underscore number and the apprentices.

So the whole idea ultimately is that when it goes through the entire loop and say if

we remove the brake there and we just have the return then the idea is that above,

when you have number defined as equal get number.

That's the function that you mentioned earlier. Just returns with a

three for example,

like it just basically said that this is the number that

you're getting back and hands it into that new variable basically.

Um so I'm not sure I follow, can you say, can you say that once more?

Yeah, I'm just trying to get the screen full screen so you can see the

so just like in terms of the logic of that actual loop, you know,

while True and is equal to this input.

So

just kind of referring back above under the main uh function.

So you have basically get number listed as

its own variable there because you're just basically

saying that number is equal to whatever the value is of getting number when it runs.

Okay, I think I see where you're going. I have I have misled you all.

This program will only ever mow three times. Even if I type in a million,

it's only mowing three times what I should have done up here.

If I may preempt your question now, that's what I meant to do up there. Okay. Yeah.

Yeah.

Okay, so that's yeah,

that was kind of what I was wondering because you had the value of number listed.

So I was just curious there. So yeah, my apologies.

And just so we have this if you don't mind,

I'm gonna kind of do some movie magic here and let me just

pretend that we didn't that I didn't mess this up the first time.

The last thing I'm gonna do here now is change that three,

which we hard coded earlier to actually be the

value of the variable we've gotten from the user.

So that now down here, if I run python of cat dot pi, enter what's in,

I can type in three, I get my three modes or if I only want one, I now get one

instead.

Alright, so if we now have this ability to do things again and again in these loops,

let's see if we can't solve some other

problems via which to express ourselves cyclically.

But get back some interesting answers as well. Let me propose, for instance

that we look a little more closely at these lists.

It turns out that in python and brilliant programs in general,

it's useful to have a list of values because we're going

to be able to work with more and more data,

larger and larger data sets.

So let me propose that we come back to V.

S code here and let's do something that's perhaps a little familiar to some folks

in the world of Hogwarts. And let me go ahead and code up a file called Hogwarts.

And let's see if we can't have a list of students at Hogwarts here.

So I have a new tab called Hog works dot pi.

And let me go ahead and propose

that I just defined in this program a list of students whose names I know in advance.

So I'm not gonna get user input for now.

I'm just going to know from the get go

that the three students I want to consider are these

variable is gonna be called students,

It's going to equal as I've done in the past a square bracket, which means, hey,

here comes the list.

And those values are going to be Hermione in quotes because it's a string,

harry in quotes because it's a string and then

Ron in quotes because it's a string as well.

So this is a list of length three,

it's similar in spirit to my list of length three earlier,

but that had three inches 012.

Now I have a list of three strings instead.

And this isn't very useful at the moment,

but let me just do something as a check for myself.

Let me print out each of these students. Well, wait a minute, how do I

print the contents

of a list?

Well, in the past, when we've printed a variable,

we've just printed out the name of the variable,

but I don't want to print out all of Hermione and Harry and Ron all at once.

Maybe I want to print out Hermione first,

then Harry,

then Ron.

So I need a way to express more precisely which value do I want from this list?

And the way you do this in python

is you use square brackets in another way

if you have a variable in this case called students and you

want to go inside of that variable and get a specific value.

That is to say you want to index into the list.

You use square brackets.

This way using numbers inside of the square brackets, and here's where

we see that. It is useful to think and count in terms of zero on up instead of one on up

these lists in python or shall we say zero? Indexed?

The first item in a list is at location zero.

The second item in a python list is at location one and the third is that location to,

So you're always kind of off by one mentally,

but you get used to it if you've never programmed before overtime.

So let me print out all three students.

So let me print out students bracket zero than students bracket one.

Then lastly, let me print students bracket to

and this is my third and final line.

And of course if I run this code,

it probably does what you would guess if I run python of Hogwarts dot pi,

there's Hermione, Harry and rob each on their own lines there,

but there's gotta be a better way, right?

Especially if I don't know in advance who's going to be in

this list if next year there's some new students at Hogwarts,

we can use a loop to do something automatically without having

to manually type out zero and then one and two.

Well, here's another feature of python.

You can use a four loop, not just to count from 0 to 1 to two.

You can use python to just iterate over anything, not just numbers, but strings.

So I could actually do this

for

student in students colon and then indented underneath that,

I can say print student now, it doesn't matter if I have three students or four or 400.

This two lines of code.

This loop will print all of those students for me, one at a time.

So if I now run python of Hogwarts dot pi there's the same list,

but I don't need to know in advance how long that actual list is.

Now, notice I made a conscious decision here,

I didn't call this variable underscore because this time I'm

using the variable and while I could do this now,

No, no, no, no.

Your code is getting way too cryptic.

If you're naming the variable underscore and you're using

the variable underscore now you're helping no one.

Now, you're confusing the reader yourself down in the down the line,

you should call your variables what they are.

So, a very appropriate name though,

I'm sure you could come up with others would be students

and here you could say you would stay student as well

if you'd prefer to be more succinct.

It's not unreasonable to do something succinct in a loop like this, for s in students

using maybe the same letter that the list itself begins with. But again, why bother?

Python is meant to be more readable?

If you have a list of students, iterate over them, one students at a time.

Let me pause here to see if there's no questions about lists,

as I've now defined them a list of strings in this case,

or using a four loop now to iterate over and print

each of those names.

Uh Yeah, Jawad, if I'm saying it right.

Yeah.

So is it not necessary to initiate student in this case,

or we can just declare a variable in the loop?

Good question.

You do not need to manually initialize that

python takes care of initializing the student variable

to Hermione first, then Harry second, then Ron third.

Unlike other languages, you don't need to initialize it to something yourself,

it just exists and it will work

other questions on loops and lists in this way.

Yeah. How about spanish?

Yeah. Hi, David.

David, I actually had two questions, like,

my first question is uh since you described break,

so is there any concept of continue, so that we can skip a particular case in loops?

And my second question is uh shall I shoot it like Federer, or 1x1?

Uh Well, one by one is fine, Yes, you can continue using another syntax as well.

We haven't shown that for now, We've focused only on break.

Okay, so uh as per, you know what I've got with this particular kind of for loop,

uh you know, the students is an iterable object, Right?

So can this follow work with either hash tables

or different kind of fight rebels or others?

Indeed, So we're getting ahead of ourselves there,

but there are yet other types of data in python and indeed

you can use a for loop to iterate over those as well.

Anything that is iterable, so to speak,

is a piece of data that can be used with a loop like this, but more on those.

More on those soon.

In fact,

let me transition here to show just another way

of solving the same problem because up until now,

when we've used loops, we really have relied on numbers and that's fine.

If you prefer to sort of stay in that space,

I suppose I did want to reiterate using numbers like I and 012 and so forth.

Let me propose that we could change this code as follows if you would prefer to think

about or if the program you're trying to

implement requires that you use numbers like this,

you might do this

for I in

Well,

I don't want to just say students because then I is not

going to be a number I is going to be literally Hermione,

then harry, then rob, I need to iterate from 0 to 1 to two.

Right? If I know a list with three elements. Has these locations 012.

I need to create a loop somehow that starts at zero and ends at two. Previously.

When I wanted to do that, I needed range but this too is not gonna work,

I can't just say in the range of students because students is not a number,

it's not an integer, so you can't pass it to range.

Range expects an integer.

But there is a solution here.

It turns out that there is a function in python called length or len L E N.

That will tell you the length of a list and other things down the line to.

And now I think I can assemble these building blocks in a

way that can allow me to use numbers in this way.

So range doesn't take a list of strings,

it takes a number and ideally that number is going to be three,

so I get a range of values 01 and two.

So I think I can nest my functions like this.

If I first get the length of the students list,

that's going to be three,

then I pass that return value as the argument to range,

that's going to give me back a range of values zero, then one, then two.

And what that's gonna allow me to do then encode if I want is not just this,

I could do print.

Now students bracket I and this is now where the syntax

we're seeing is getting very expressive new and perhaps unfamiliar,

but if I can do open bracket zero close bracket or open bracket one close bracket,

open bracket to close bracket,

it turns out I can actually put a variable in there

and I can express any number inside of those brackets,

so as to print these all out dynamically in a loop,

let me do this python of Hogwarts dot pi enter, there's Hermione, Harry and Ron.

And now if I'm just curious,

I just want to poke around or maybe I want to do a ranking

like who are the top three students in the school or in Gryffindor?

Well, I can print multiple things at a time.

We've seen, Let me print out not just the students at location I,

but rather let's print I first and then the student at location I.

So two things to print and we know that.

Print can take two arguments, We've seen that before.

They'll be separated by a space.

Let me go ahead and rerun this. Now.

I see that Okay, Hermione is the top student, but she's

in zeroth place. That's a little weird.

Like we don't need to show the human using

my program that we started counting at zero.

I can clean this up,

I can just add one to the eye up here and now we see sort of a top three list of students,

her Miami's number one, Harry's, number two.

And of course Ron is

number three so we can get access to all of those same values as well.

Are any questions now on

on these lists?

Any questions now on these lists?

This length. These ranges or otherwise? Yes. Uh hockey cats. If I'm saying it right.

Yes. My question is for I in range. Can you explain this once more?

Sure.

Of course. So let me rewind in time.

We started off doing this for I in 012 and

then we printed out mo three times in that way.

The way that the four loop works is that

it creates for you a variable that I've called.

I but I could call it anything I want.

It then assigns I initially to the first thing in the list,

it then automatically assigns I to the next thing in the list.

And then it assigns I to the third thing in the list.

And each time it does all of the indented code underneath.

We realized though that this is not going to scale well

if I want to do something like a million times.

So we introduced range instead that has the effect of doing the same thing.

It returns to me a range of values. A list of three things really.

So the behavior is exactly the same. If we now fast forward to this Hogwarts example.

Now though, what I'm doing is just combining these smaller ideas.

I'm still creating a four loop.

I'm still creating a variable called I I want to do

it over a range of values but how many values?

Well if I use the length function and pass to the length function,

the list of values lengths,

purpose in life is to tell me how long is this list and it's three.

So that's almost as though before I had just done something like this.

But I don't want to hard code three,

I want to dynamically figure out how many students are at Hogwarts.

So I'm just composing, composing, composing or nesting all of these various ideas.

Alright if I may let me transition now to Hog in Hogwarts still

to introduce one final type of data before we combine everything with a few final

programs.

It turns out in python

there's not just strings, not just in, its not just floating point values,

not just bulls, not just lists,

there are also what are called dictionaries or dicks,

which are a data structure that allows you to associate one value with another.

Literally a dictionary. Like in the human world.

If you were to open in the dictionary, be it in english or any other human language,

what's inside of a dictionary?

Well, it's a bunch of words and definitions.

A computer scientist though and a programmer would

describe those more generically as keys and values.

Something associated with something else.

That's all a dictionary is it allows you to associate something

with something else and notice this is already more powerful,

more interesting than a list.

A list is just a set of multiple values. But a dictionary is sort of two dimensional.

If you will just like a human dictionary,

a book it associates something with something else,

like words with their definitions.

Now,

what does this actually mean in practice will suppose that we wanted

to keep track of who is in what house at Hogwarts?

I could just have a list

of houses and I could have a list of students

and I could do something a little hack ish,

li like this, like I don't like this, but I'm going to start this way.

I could say houses equals

Griffin door and I can say houses has another value

Griffin door and then houses has another value griffin door.

And actually this is getting very

interesting.

Let's add a slither in in their slither in and will add Draco to this list.

So it's now of size four.

So

I'm sorry you didn't see any of that.

Uh We'll fix this in production standby

and you do override if need be

um

let's go ahead and still.

Here we go.

Suppose that we want to associate these students at Hogwarts, Hermione,

Hagrid Ron and Draco with their respective houses.

Well, I could do it using lists alone. Let me go back to V.

S code here and let me just temporarily.

But in a way that I'm not gonna,

like ultimately let me create another variable called houses.

Set it equal to griffin door

corresponding to Harmony's house, Gryffindor,

or corresponding to Harry's house and Griffin door corresponding to Ron's house.

And let's add Draco in there. So we now have four instead of three students.

Just so we have a little variety and he was in uh slither in.

So now we have two lists

and we could just agree amongst ourselves that whoever is first

in the students variable lives in the first value in houses.

Whoever is second in students

lives in the second house, who's ever third in students lives in the third house.

We could do that.

But honestly, that is going to break down quickly when we have a lot of students.

When we have a lot of houses. And what if we want to keep track of more things than that?

What if we want to keep track of every student's house and the patronus? This

this image that they conjure up magically? Well then we need a third list.

Like this is just going to get messy quickly.

If we're just on the honor system using

multiple lists where everything lines up logically,

it doesn't end up well when your code gets more complicated,

but I do want to implement this idea, I want to associate something with something,

a student with a house, A student with a house, A student with a house and so forth.

So how can I go about doing this? Well, let me go back to my code here

and let me propose that we do this using a python dictionary,

and this is the last of the new syntax really that Well, see here's the new syntax,

instead of using square brackets,

we're going to use curly braces for dictionaries as well.

We've seen curly braces in the context of f strings

completely unrelated.

Sometimes you run out of keys on the keyboard,

and the authors of the language need to start reusing symbols in different ways.

That's what's about to happen.

We're using curly braces in a different way now,

so let me create a variable called students.

And let me go ahead and set it equal to open curly brace and close curly brace.

This is an empty dictionary at the moment,

and here's how a dictionary works.

It allows you to associate something with something else, and you do that like this,

Hermione, quote, unquote

colon. And then the value there. Of What do you want to associate with Hermione?

Well, griffin Door, what do I want to associate harry with?

Well, I want to associate him with Griffin Door. What do I want to associate Ron with?

Well, I want to associate him with griffin Door.

Well, this is actually not gonna,

this is gonna get very ugly quickly once we add in

Draco and slithering my code is going to get too long,

it's gonna start wrapping.

So this is purely aesthetic,

It is perfectly acceptable in python and other languages to format your code a

little more readily and just add new lines if it makes it more readable.

And one way of doing this might be as follows.

I still have my curly brace up here, I still have my curly brace down here,

but notice it's a little more readable now,

in that I have my keys on the left by some things and my values on the right,

my other something, it's just a little easier to skim top to bottom.

You could format it differently as well, but I'm gonna go ahead and add in now

Draco who lives of course in in slytherin.

So now I have each of these keys on the left and values on the right,

which is really again just a code implementation of this idea.

A little chart that you might write up with paper,

pencil when associating something with something else.

So how do I now use this code in an interesting way the syntax is almost the same.

If I want to print out the very first student, Her mani's house, I could do this,

print out the name of the variable, but I need to go inside of the variable.

I need to index into it.

And what's neat about dictionaries

is that whereas lists

have locations that are numeric, 01 to Hermione, Harry Ron, respectively.

Dictionaries, allow you to use actual words as your indices, so to speak,

your indexes to get inside of them.

So if you want to print out her, my unease house,

the key you care about is quote unquote Hermione.

And what this syntax here will do notice it's not a number zero or one or two.

It's literally her manganese name.

This is like going to the chart earlier and saying, all right,

give me Hermione is Mikey.

Griffin door is the value.

That's what we're doing here sent tactically,

we're looking up Hermione and getting the value thereof.

So if I go back to my code, that should print out Gryffindor.

And if I do this a few times, students bracket

quote unquote Harry should give me Harry's house. Print students open bracket Ron.

That should give me Ron's house.

And then lastly, if I do this with students bracket Draco,

that should give me Draco's house.

Now it's a little manual. Still. I bet we can improve this.

But let me run python on Hogwarts.

Stop high and we should see Gryffindor, Gryffindor. Gryffindor

slithering,

which is exactly what we'd expect.

Now all we've done again is we've just now moved

from having just a simple list of names to again,

sort of two dimensions,

associating like we would on paper pencil

something with something else keys with values,

respectively.

Allow me if you will,

even though I realized this is getting a little fancy allow me to

escalate things slightly here and transition from looking at just for instance,

uh that pattern,

they're just hard coding those values there

to actually printing these out more dynamically.

Let me go ahead and use our loop.

And this question came up earlier as well, let me go ahead and say for each student

in students go ahead and print out, for instance, the students variable at well,

let's just say student first.

Let's keep it simple.

So this is not gonna be that interesting yet,

but when I run python of Hogwarts dot hi and hit enter, notice,

what should I see?

Let me take a question here to see what am I going to see when I hit enter now,

when I'm doing for student in students,

there's multiple, reasonable guesses here. There's only one right answer.

But let's see if

your instincts are right or we need to reveal. How about

suggestion from

a santa, what do you think is going to be printed?

Mm hmm,

I think we will see um

keys. Yeah, I think we would honestly keys. Perfect.

So good intuition, it could have gone both ways.

Could have been values the houses,

but when you use a for loop in python to iterate over a dictionary by design it.

Iterating over all of the keys.

So we should see, I think Hermione, Harry, Ron and Draco, let me hit, enter now,

enter and indeed you're exactly right.

We see just the keys. But that's not really that useful.

If what I really care about is who lives, where can I print out both?

Well, I think I can let me go ahead and do this.

Let me print out not just the student's name, the key,

but let me use the key their name to index into the dictionary, right?

If I know the word in the dictionary, let me look up its definition.

If I know the student's name, let me look up their house.

And the syntax for this, just like a list is students bracket.

And just like in the past we used I when I was a number, we can also with a dictionary,

use a string.

So if the student's name is the key,

then this syntax students open bracket,

student close bracket will go to her mani's location and get back her house,

will go to Harry's location and get back his house and so forth.

So if I do python of Hogwarts dot pi enter

now I see Hermione, Gryffindor, Harry, Griffin, Deron, Gryffindor,

Draco's slytherin.

Now, it looks like I've given them all new last names, but I can clean that up.

This is just a print thing.

Let's go ahead and change our separator from

the default space to maybe a space comma.

And just using print features. Now let me run the same program again, enter

now.

I've just got some nice pretty commas in there to make clear that her main,

his last name is not in fact

Gryffindor, but that's just a print detail.

Any questions then on these dictionaries? And what I've just done

questions on these dictionaries and this

looping

over them here.

Yeah. Let's go to

how about alexei if I'm saying it right.

Yes. Uh could we use the same way for the, you know, for for the geese on file?

For example, because it's it's looked like a juice on file.

Yes. The key and value

or we should to use some special function.

For example,

a good question for those unfamiliar what we're looking at on the screen here

resembles but is not the same thing as a data format known as Jason,

javascript object notation

similar in spirit, but it's not identical. So it's just a coincidence.

Now let's say,

but you can in python use Jason and other data to do

exactly to do this kind of manipulation to about another one other question

on this loop. And this these dictionaries. Yeah.

Right. Um, I just can't get my head around the

for student in students

does if I'm just correct me if I'm right,

does that mean it imports the list of students

and uses the indexes or in other words, for my knee

harry and Ron

as the index is in the actual um,

the list of students. So when, when I say students,

my knee

is just, you know, correct.

So this is just a feature of python When you use a for loop with a dictionary?

What happens is this if this is the dictionary here

with the keys on top and the values on bottom,

you get to choose what the variables called.

I called my variable student.

Just because it makes sense because I want one student at a time and

what the four loop does just like it did with numbers before the zero,

the one in the two.

It allows me to for instance,

set student equal initially to Hermione is name

and then the next iteration of the loop,

the next cycle sets student equal to Harry's name, then Ron,

then Draco it just kind of happens automatically.

Like that is what the python interpreter does for

you when it sees a four loop like that.

So it's very similar in spirit to iterating with a four loop over a list.

But rather than integrate over the numeric location 012,

it generates over the bold faced keys in this representation here graphically.

And allow me to give us one other example on

Hogwarts before we look at one other familiar domain,

at the risk of things escalating a little bit.

Let me propose that we continue the story with one final Hogwarts example like this.

What if we have more information about each of our students

and this is kind of inevitable. Right?

If you're implementing a program that's a database with

people or customers and employees or anything else.

You can imagine having a lot of data about anything you're

representing in your program here for the sake of discussion,

supposed that every student at Hogwarts of course has a name.

They have already a house but they also have a patronus for those unfamiliar,

this is the animal or entity that comes out of the

end of their wand when they make a certain magical spell.

The point here being is that we want to associate not

just one thing with the student but multiple things as well,

their name, their house and their patronus in this case.

Well, what my code like this look like.

Well let me go back to Hogwarts,

stop high and let me start fresh for just a moment and let me propose that I enhance

this with a bit more data and this data

is going to look as follows My students variable.

Now

I'm going to propose, we think of it as a list.

What if we have a list of dictionaries as follows.

Indeed, I want to literally implement this picture here,

so notice that my previous picture just represented a single dictionary.

But suppose I wanted to compose a list of dictionaries that is four students.

So a list of four students and suppose that

each of those students is itself a dictionary,

a collection of key value pairs, keys and values something and something else.

Well here's one other way we can do this in code. Let me go back to V. S.

Code here and what you need,

let me go back to V. S code here

and let me define a variable called students

that is equal to a list.

And I'm going to preemptively move my cursor on

two separate lines because I know this is going

to be long and I want to fit all of the elements of this list inside of it.

I'm now going to create a dictionary, one dictionary per student.

And how do I create a dictionary?

I just use those curly braces, but it's up to me to define what those keys are.

And let me propose that one key this time won't be the student's name explicitly.

It will literally be the word name and they're going to have the name, Hermione,

This same student is going to have another key called

House and the value is going to be Gryffindor And

the same students going to have a third key called

Patronus and the value of that is going to be,

I had to look it up in Otter according to the book.

Now, I'm going to create a second dictionary inside of this list.

And again a dictionary is like literally like the human dictionary of words.

It's a book that contains keys and values words and definitions.

What are the three words I'm storing in each of my dictionary's name?

House and Patronus. What are the definitions of those words? For Hermione?

Hermione, Gryffindor and Otter respectively.

For Harry, the definitions are going to be different in this new dictionary.

Let me give myself another pair of curly braces and say this name,

quote unquote colon, Harry house.

Here is again going to be Gryffindor and this one I knew

his Patronus is going to be in this case a stag.

All right.

Next a third dictionary,

the name here will be Ron and I'm gonna go ahead and do that just like this.

Next I have the house and he too was Gryffindor.

Lastly had to look this one up, Ron's Patronus was a Jack Russell terrier.

Lastly

is Draco in a 3rd, 1/4 dictionary now, so another pair of curly braces.

The name of the student is of course Draco,

the house of this student is slytherin and Draco, interestingly enough,

at least according to the internet has no Patronus

was never revealed in the books or the movies.

So it turns out this is actually a wonderful teachable moment.

There is a special keyword in python that is literally none. N O N E.

With the first letter capitalized.

This represents officially the absence of a value.

So I could a little sloppily do something like quote unquote,

but does that mean I didn't get around to typing it or not?

It's a little clear semantically to say literally none.

A special keyword in python.

To make clear that I know Draco has no Patronus, it's not just an oversight on my part.

Now that I have this, what do I have in the computer's memory, I have a list.

How do I know it's a list because I see a square

bracket at the beginning and another square bracket at the end.

That's just my visual clue.

Okay, I don't know necessarily what else is going on here,

but there's a list of something.

What is in that list?

Well here to the syntax is our clue because this line two

starts with a curly brace and ends with a curly brace.

I just know that is a dictionary, a collection of key value pairs.

Now this all fit on my screen perfectly so I didn't

bother moving all of the key value pairs onto new lines.

It would have made it really tall. So I kept it all together here this time.

But how many keys

does this first dictionary have?

Put another way in her manganese physical dictionary.

How many words are in that dictionary? Three.

The words are name, House and Patronus.

What are the three definitions or values of those words in her mouth?

Chinese dictionary, Hermione, Gryffindor and Otter respectively.

And the same story goes for harry

then for Ron, then for Draco,

I have by design chosen to give them dictionaries that

have all the same keys all the same names.

But they all have unique values and that's my design.

That's my prerogative as a programmer. So why is this useful at the end of the day?

Now I have access to a whole collection of interesting data about

all of these students and I can still do a loop,

I can say for students and students

that's going to allow me to iterate over this list of students and

let me go ahead and print out just one thing at a time.

Let me print out the current students name.

So, as complicated as the dictionary is,

this should be pretty comfortable.

Four students and students is just going to iterate over every student in the list.

1234 total.

The next line is just gonna print out the value of the name. Key.

It's like opening a physical dictionary,

looking up the word name and giving us Hermione, Harry Ron and Draco,

respectively from each dictionary.

So if I run this version of Hogwarts and hit enter

there, I get all three of their names. But what if I want more information than that?

I want both their names and their houses. Well, just add to prince arguments.

Students open bracket,

house, close bracket.

Alright,

let's go ahead and run this python of Hogwarts dot pi

and hit enter now I see their name in their house.

And if I want to clean this up with a nice comma.

So sorry, all you know,

you've been talking way too long in class is way too

long when you run down brand new batteries to zero.

So we're almost done. We're gonna finish this shortly.

Thank you all so much for joining. Let's just pick up where we left off here.

So I now see Hermione Gryffindor, Harry, Gryffindor and so forth.

Well,

we can aesthetically clean this up a little bit by adding a separator with print

like a comma and a space just so that when I run this again,

I now see some commas separating these values,

but recall that students have not just a name, not just a house,

but also that Patronus.

So if we want to print out that two,

we now have the syntax via which to go into that same dictionary for

each student and output their Patronus as well as their house and their name.

So if I run this program one final time now,

I see all of the data in this here dictionary.

So this is a lot to absorb all at once.

I'm sure it's the last of our new data types on top of list.

We have these dictionaries, but again,

a dictionary at the end of the day is just

a collection of values similar to these values here that allow

you to associate keys with values and the first version of

this program associated literally the student's names with their houses.

But then I realized in my next version, wait a minute,

what if every student has not just a name in the house, but a Patronus,

let's actually standardize the names of our keys to be named House and Patronus.

And then the values of those keys can actually be the data like Hermione,

Gryffindor order

and so forth. Questions now on these dictionaries and iteration thereof.

Question Yeah. Let's go to say

ah come on if I'm saying that right?

Yeah, that's right. I'm commode

from India.

I just was wondering if the,

suppose the dictionary is very huge and if I want to look up for a specific student,

so how do I know where to look that student from?

Like can be sorted out in alphabetical order or numeric order or anything like that?

A really good question

thing is stupid or not, I don't know, but I'm very new to this. No, not at all.

And I think that's the right kind of instincts to have, like wait a minute.

At what point does this break? Or can you actually use this at scale? In short answer.

Yes.

One of the features of python is that it

makes these dictionaries very highly performant for you.

That is even if they're very large as they will

be in future weeks when we manipulate more data,

python will find the data you care about quickly for you.

And in fact that is a feature of the language that is

a feature of a dictionary to get you the data quickly.

And there are functions that you can use, you can sort the data,

you can sift through it, you can do very performing operations as we eventually will

allow me then to propose as we wrap up these loops that we solve

just a few final problems that will perhaps evoke fond memories of yesterday here,

at least for me, where in one of my favorite games growing up,

was this one here on the original Nintendo?

And this is a two dimensional world where the characters move up down and right,

not so much to the left,

in jumping over pyramids and obstructions like these.

And allow me to propose that we use this just for inspiration

not to do something that's quite as colorful or graphical as this,

but just to focus on, for instance, this barrier in the middle of the world here

that Mario or Luigi had to jump over.

And so this here seems to be like three bricks stacked on

top of one another and we won't do things quite graphically.

But let's just implement a very simple python based version of this textually

using maybe just hashes for bricks, because there's a pattern here,

one on top of the other, and I bet we can solve this in any number of ways.

Well, let me switch back over to venus code here

and let me propose that we create a program called

Mario dot pi using code in the terminal window.

And then up here, let me start by implementing that same picture as simply as I can

printing out just literally the hash and then the hash and then a third final hash,

this is going to be a very textual approximation of it.

But I think if I run python Mario dot pi,

I've got a very simple version of that same column of bricks, so to speak.

But you can imagine that certainly in a game where

maybe these uh the columns get higher or lower,

it would be nice to write code that's actually a

little more dynamic than that and doesn't just use print,

print, print, which is literally copy and paste, it would seem.

So let me at least adopt some of

today's lessons learned and instead do something like this

for underscore in range of three, let's now print out just one of these at a time.

But the fact that I've now used a three to range means

if I want to change it to something bigger or smaller,

I change it in one place, not in three or more places.

And this code to of course, if I got it right,

is just going to print out the exact same thing.

So we're iterating here.

But let's see if we can now integrate our discussion of writing functions of our

own to begin writing something a little

more dynamic and solving more complicated problems.

Ultimately,

one of the nice things about functions is that they allow

us to not just write code that we can use and reuse

they allow us to create abstractions if you will,

an abstraction is a simplification of

a potentially more complicated idea and we've

seen this a few times over the course of the week's for instance,

we have a function called Hello.

Which granted didn't do all that much. It just printed Hello.

But it allowed me to think about the function as exactly what it does.

Not generically printing something but literally saying hello.

I've been able to get

a number using something similar by defining my own function like get number.

Well, let me go ahead and for instance,

assume for the moment

that I've had the forethought to

in my function main

use a function called print column.

That seems as good a name as any to cruise a function

that prints a column of bricks.

Well, how can I go about now implementing this abstraction? This simple idea.

Print column with actual code.

Well, we've seen before with death we can do just that.

Let me define a function called print column.

Let me accept as its input, generically speaking a parameter called height.

I could call it N or H.

But I'll be a little more explicit now with

heights just so I remind myself what it's doing.

And now I think I can just borrow some of that same code from before for underscore in

range

of heights.

Go ahead and print out

a single hash. And then at the end of this whole program let's just call main.

So I've kind of complicated the code. It doesn't do anything more just yet.

But it's setting me

up for solving what I think are going to be more sophisticated problems.

If I run python of Mario. Dupuy we're back where we began

but I now have a function and abstraction. Print column.

That's going to allow me to think about printing

some chunk of the world of Mario at a time

and I can do this in different ways. To notice that

if I really want, I could do something like this,

I could re implement now print column in different ways,

especially if I am using print column all over

my code or maybe still a colleague of mine,

a friend.

Someone else on the internet is using my print column function. What's also

nice about functions you've written

is you can change the underlying implementation details of them.

But so long as you don't change the name of

the function or its parameters or what it returns.

If anything,

no one else knows the difference,

you can change the internal implementation as much as you want

if you want to improve it or make fixes over time.

So for instance,

another way we could implement print column recall would be something like this,

a bit clever with one hash and then a new line and then maybe

we could do multiplication of strings and then end this line with quote unquote.

Again, it's okay if you're not comfortable with this syntax,

This was a more clever approach we saw in the past.

But if I run python of Mario dot pi here I'll still see a column of three.

But what's important here is that main does not

need to know that the underlying implementation of print column

has changed.

Well let's transition to a different dimension if you will.

And rather than print out just these vertical bricks, let's fast forward in the game

to this part of the world here.

At some part,

Mario Mario encounters these bricks in the sky that if he jumps up

underneath they become coins and so he he gains to a score.

But let's go ahead and focus only on those coins.

And let me propose that we print out oh just these four question marks here

and let me go back to V. S. Code here and let me propose that within V. S.

Code here, just like before we try to abstract this away.

So let me go ahead and get rid of this version

because we're now going horizontal instead of vertical with our output.

And let me just say well print row four times.

Let me just abstract away the problem at hand.

I don't know yet how I'm going to print those four question marks

but let's call it print row four and I'll assume

I'll now solve this problem.

Let's now go down that rabbit hole of solving

the problem define a function called Print row.

It's gonna take a with instead of a hike because it's horizontal instead of vertical

and how can I do this?

Well now we have an opportunity to do string multiplication even more elegantly.

I can say quote unquote question mark

times with.

And this is a very pretty python IQ way of

printing what could otherwise be a loop and that's fine.

But this is going to go ahead and print those question marks for me.

Let's do python of Mario dot py enter. And now I've got four question marks.

It's not nearly as pretty as the more graphical version, but

it is at least a building block toward having now a reusable function like print row.

And why am I doing all this?

Like why are we over engineering the solution to these

problems by having print column in print ro Well,

it's a useful problem solving technique as soon as your world does

not look one dimensional like this or with the column version.

But what about this later in.

Super Mario brothers does Mario have to jump down into this world

where there's a lot of these underworld barriers and this one here,

for instance, looks like a square, It's two dimensional,

there's a height and a width to it.

And that is to say there's a bunch of different ways we could implement

this thing if maybe for discussion it's like a three by three grid,

a three by three square of sorts.

Well, how can we go about solving this year problem. Well, let me propose.

We come back to V. S. Code

and let me propose that we think about this in a couple of different ways.

I could do this. Hmm. Like this.

If I if I know where I'm going, you know, maybe I'm a seasoned programmer.

Let me go ahead and do this.

Let me print out a square, the width and the height of which is three.

That's an abstraction.

I'm just taking for granted for a moment that there is already a function called

Print Square.

That's going to be with three and height three as well.

But someone's got to implement this.

And at the moment there's only me at the keyboard.

So let's go ahead and implement that square.

Let me go ahead and define a function called print square

that takes in a specific size, both for height

and for with.

And here's where we have an opportunity to use some of those loops.

And we can use those loops in a way we haven't yet.

If I want to print out

all of these rows, but also all of these columns,

I now have to think not just cyclically like a loop allows,

but I need to think two dimensionally.

And if you're familiar with like an old school typewriter or even a printer.

Nowadays it generally prints from top to bottom.

So even if you have multiple columns,

you print out one line at a time.

And while you're on that line,

the printer or the typewriter prints from left to right.

And that's kind of the mental model to

have with your black and white terminal window,

all of the output for every example thus far,

starts at the top and goes down to the bottom from top to bottom left to right.

So we have to generate our output are square in that same way.

So let me propose that we do this.

Let me propose that we know we need to

iterate this many times three or more generally size.

So let me do this for I in the range of size. What do I need to do three times?

Well I want to print out what,

123 rows of bricks.

But within each row of bricks, what do I want to print? One, 23 bricks specifically?

So if we go back to our diagram here and I stipulate

that it's indeed meant to be a three by three square,

three wide and three tall,

what do I want to do to print the first row?

I want to print brick brick, brick, brick, brick.

What do I want to print on the second row? Brick. Brick brick.

And the third row. Brick. Brick, brick.

So I'm doing three things three times there's a lot of printing that must happen.

So let me go back to my code here and let me propose now

that we think of this outer loop that I've just started

as representing each of our rose

for I in range of size is going to ensure no matter what I do next,

that I can print out 123 rows or more generally size.

Where size could be three, but it could be smaller or larger.

What do I want to do on each of the rows?

We'll just like an old school typewriter or printer on each row. I want to print out.

Brick, brick, brick. Brick, Brick, brick,

brick. Brick, brick. Well, that sounds like a cycle some kind of loop.

So maybe I can have

inside of one loop, another loop.

I don't want to use I again because I don't want

to use the same variable and mess up my counting.

So I'm gonna buy convention. Use J. Very common to use I and then J maybe K.

But after that you shouldn't keep nesting inside of each other.

Let me go ahead and say for J in range of size two because it's a square. And then

each of these rows, let me print out a single hash but no new line,

but after each row,

let me print only a new line.

So there's a lot

going on here, especially if you've never touched python, let alone loops.

But notice what I've done here too. And I'll add some comments for clarity

for

each row in square

for each

brick

in row,

Prince brick and here is where comments

and more generally pseudo code can really help

explain to yourself and to others what your lines of code are doing online,

eight I'm iterating from I equals zero on up to size so 012

Online, 11 I'm doing the exact same thing but using J from 012.

But that's good because I represent now each of my rows and

while I'm on each of those rows inside of this outer loop,

I'm gonna do brick brick, brick 123123123.

But I don't want my cursor to keep moving to the next line while I'm on a row.

So I'm just overriding that line ending.

But let me ask you a question of the group now, Why online? 16.

Do I have a print here all by itself?

Why do I have a print all by itself? Notice that

it's below the inner loop but inside of the

outer loop, so to speak.

What is that loop online 16 doing ultimately.

What's that doing there? How about we go to

Evelyn your thoughts?

Yeah. Every time you finish a line, you have to add a new line

and

at the end of it.

Perfect.

Print. Print

a new lie.

Perfect. I don't want a new line after every brick.

I only want to do that at the end of

the row and that's why my comments now are perhaps enlightening

notice that this loop here is just Iterating for each brick in the row.

Once I'm done with that inner loop, so to speak.

Once I'm done with these highlighted lines here to Evelyn's point.

I need to print out one blank new line and we've not done this before.

But when you call print with no arguments, all you get is that

automatic line ending the backslash n where the cursor moves to the next line.

So if I now go back to my terminal window and run Mario dot hi,

I think I should get a three by three square and it doesn't quite look like

a square on my screen because these hashes are a little taller than they are wide.

But it

is in fact

three x 3.

But let me propose,

as we've always done here how we might tighten up this code further.

Just for clarity's sake, let me get rid of my comments for a moment.

Just so we can see how many lines of code we have total.

And let me propose that we maybe do this.

Let me propose that you know what this inner loop.

Especially if you're having trouble wrapping your mind

around one loop inside of another loop.

You don't strictly need it. What if we do this trick again?

What if we print out inside of the

outer and only loop each of those hashes times the number of times we want them.

Right? We draw inspiration from an

earlier approach and we run python. Now with Mario dot pi

same result.

But now Prince Square is really nice and compact,

it has one explicit loop and it's still printing out using string multiplication,

all of the hashes at once on that row,

if you like abstraction and you'd like to wrap

your mind more around what the code is doing.

Well, let's do this.

If you're not quite clear on what's going on,

let's propose that you implement a function called print row

passing in size. And let me propose that this print row function,

it's simply taken

that with and print out

the individual hash times

that many times.

In other words, here's an opportunity for abstraction whereby, well,

what does it mean to print a row?

Well, when you're implementing print square,

I don't really care what it means to print a row,

I just need to know that someone is taking care of printing the row.

You can kind of pass the buck to another function altogether.

And how does print row work? Well, it could use a for loop.

It could use this string multiplication trick.

This is a way to take a larger program and this is probably

the most complicated one we've looked at thus far and to decompose it

into the smaller components that once assembled, achieve your final idea.

Let me pause here then and see if

there's any questions on this implementation of Mario

questions on Mario

where these nested for loops

or these functions of our own.

No seeing none. Amazing. Seeing none.

So

seeing no questions.

That's the end of our look at loops in python,

this ability to do things cyclically again and

again and when we combine those with conditional,

this ability to ask and answer questions and

combine them with our functions and variables.

We really now have

most of the building blocks we need to solve much larger, much more interesting,

much more personal questions.

So in the weeks to come we'll start to see

exactly what could go wrong though when we do so.

But we'll introduce you to all the more tools value which you can troubleshoot

those same problems.

Can you bring me back up?

Okay.

Alright.

So you all are amazing and we've been here for like eight or 10

hours I feel so thank you all so much for being part of this.

Are there questions either related to loops or really

anything we've done today or computer science more generally

that I can answer in the few minutes we still have here in the space on campus.

Uh Let's see. Let me

defer to my colleague to spotlight someone here.

Who do we have your question from? Let's see uh eric if that's right.

Hi there.

Uh So I have a question regarding the wild loops.

Um We we were using within the wild loop. We had another loop where you used break. Um

And then outside of the inner loop you had

return function, why would we have a break

from the inner loop and then a return function?

If we could just return within the inner

loop, it's a good question and if you think back to this example,

it was when we were trying to get user input, we were inside of that infinite Loop.

The wild true loop

in that particular case, it really doesn't matter.

And I personally would probably just return

from that function immediately without using break.

However, when your functions get longer and more complicated,

it's generally frowned upon for a programmer to

return suddenly from arbitrary parts of their function,

it tends to be a little clearer

to them down the road and to their colleagues and others

that the function is ending really only at the bottom of the function.

So the reason for using break was just to set up the

stage so that when your programs get longer your functions get longer

you break out so that

the reader knows that you're returning down below.

That's all

good question, other questions that we can field

and I hope you'll forgive. We should just have time for a few.

What's that?

Yeah,

let's see Karen

question from you,

Karen, can you hear us?

Oh yes, I can.

Oh, it's very quiet. Can you speak louder?

I

have a question Sure.

I'm turning the loops

and

conditions

so for example,

you want to reach conditions about languages say like if it's english

that has been spoken or french and that a couple of languages,

will you just use a live live and live or stay and tentative way for all that

combination of the,

of the condition. Can you, can you say it once more?

I'm not sure I followed carter, did you? Were you did you hear it more clearly than I?

It's a little soft here. I'm sorry. Karen

asking

that, say for example,

you're you're writing a program where you have to use different languages,

but you know that there are different, there are a lot of different languages.

So would you like have to use

I live I live in all of the questions in

all of the conditions or there is an alternative,

a simpler way for putting that?

Yeah, really good question. I heard you much better at that time.

So you're referring to a technique called localization to write code

in python or some other language, but have it output different human languages,

english or french or any language around the world.

That is absolutely possible in the easiest way.

Well, the simplest way to do that is exactly your intuition just have if

LF, LF, LF and have all of the human languages in your program

that very quickly becomes unwieldy and messy and hard to maintain.

So there are libraries third party code that you can

use whereby you essentially have what's called a string table,

like a separate file for all of the english words and phrases.

You want a separate file for all the french,

a separate file for every other language as well

and you essentially use variables in your code or

the equivalent thereof that allow the program to dynamically

grab english or french or something else called localization.

I think we have time for just one last question

if that's okay if we could call on lastly Maria,

if I'm saying it right?

Hello babe. Thank you for the amazing lecture.

Uh, he's addiction that it looks like a structure.

Is it, does it look like obstruct? Yes.

If you're coming from C or C plus plus a dictionary is like construct.

But if you know that world, it's technically

implemented as a hash table something a little fancier than just destruct alone,

but same idea

Indeed.

Well, thank you again so much.

I mean it's amazing that we still have like

262 people have stayed awake woken up early.

Thank you all truly personally. So that we can get this course off the ground.

We'll be in touch via email with links

to the upcoming problem set for the class for the final videos and such.

Please feel free to reach out by any CS fifty's communities if you

have any questions and my thanks to two CS fifty's team here,

all behind the scenes who have stayed so much later than we intended.

We'll get,

I'll get better at scheduling for the future weeks so that we

can set expectations and you're not here all day and all night.

But so nice to see you all again. We'll post the souvenir photo online later today,

Good morning, good afternoon or good nights.

