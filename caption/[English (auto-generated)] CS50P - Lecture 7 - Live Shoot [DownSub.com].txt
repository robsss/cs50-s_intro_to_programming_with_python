do you need me to say something

testing one two one two hello function

one two one two

testing one two one two hello world

all right testing one two three

hopefully everyone can hear me okay okay

that was some amazing excitement i see

in zoom thank you so sorry to keep

everyone um we were just

fixing some things i did wrong last week

so that we have the footage and just

getting ready since it's a lot to take

in all at once if you are new here a few

familiar a few perhaps unfamiliar

announcements one everything for today

is at cs50.ly

zoom at least in terms of the course's

slides i will also post links to a what

will be a souvenir photo later today if

you're unfamiliar with using zoom on a

laptop or desktop and therefore might

find yourself getting annoyed by the

chat window which is folks are

interacting tends to you distract with a

lot of pop-ups we suggest that you do

this click on the little triangle to the

left of the

chat window you should see some kind of

pop out option at least in english and

then you can just kind of drag and drop

it to the bottom of your screen this is

technically a work around but at least

you won't see the annoying pop-ups

nearly as frequently if you haven't

already feel free to say hello to the

world and where you are in the world in

the chat window

once we begin do try to keep the chatter

focused on the content specifically as

opposed to just saying hello further

just so folks can uh keep an eye out for

questions and we can answer either i'll

do my best to answer or my colleague

carter who's in back on chat whom you've

seen as well

if you would like to follow along with

today's examples you can go to

code.cs50.io

and at that url will be uh visual studio

code in the cloud which you can sign

into using a free github account uh but

there's no expectation that you follow

along live via that url um just realize

that it's there for you as a resource

but really the goal today is to do a

number of introductions get you excited

about some capabilities of python and

then in the problem set that's

eventually released can you dive in more

hands-on

before we take a few hellos and

questions on camera we do have this

tradition if you'd like to turn on your

camera if you would like to appear in

this souvenir photo turn off your camera

if you would like to opt out i'm going

to go over here and stand in front of

this as usual and in just a moment if

you want to put on your best smile or

wave

our friend wrong shin is going to start

screenshotting the dozens the hundreds

of faces on the zoom tiles

taking one screenshot per page

and then what we will do is stitch them

together in what looks like one massive

zoom room

even though it was originally multiple

screens he's got some fancy artificial

intelligence based software that can

detect your face your name and splice it

all together into one big illusion of a

massive

gallery i'm saying a lot of words just

to get us to the finish line and there

we are now um before we begin might a

few people just like to say hello and

and where you are in the world or what

you're studying just time for a few but

this will let us test the audio as well

let's see wrong shin will

prompt let's see who here

who do we have

how about uh elena do you want to say

hello first

uh hello dave

my name is elena i'm from ukraine kiev

and thank you for opportunity to study

python with you very cool thank you well

welcome and certainly hope this finds

you and your family and all of your

friends faring okay right now welcome to

the class uh someone else if we could

say hello to uh beta if i'm saying that

right

let's see pizza if you can hear me

you seem to have fruit

and a special thanks to you my name is

glad to be your student thank you

welcome to the class as well welcome

aboard how about time for one or two

more rung shin

let's see how about randomly over to the

darth if i'm saying that right

yes

yes uh

good morning sir uh

sir i am from india and i would like to

tell you that you have a great fan base

in india so please do visit india

someday and namaste

thank you welcome to the class and thank

you for the kind words how about one

more hello and i hope you'll forgive if

we don't get to all the raised hands but

we got a lot of learning to do martin if

you'd like to say hello next

yeah

hello hello david i'm from germany

i'm glad to be in your class today and

normally i'm studying um digital

transformation and global

entrepreneurship at the university here

nice well welcome to cs50 as well

well i hope you won't in mind indeed

that we put the rest of the hands down

in just a moment today's lecture is

going to be about something called

regular expressions uh if you're joining

us for the first time or one of the

first few times and this feels like over

your head not to worry you might just be

joining late in the class but what we've

been doing is filming multiple lectures

at a time releasing them one at a time

on the course's website but so if you're

here for the first time not to worry if

it seems all too familiar or

uncomfortable if you go back and start

from the beginning

quite surely you'll do

just fine so give us just a minute or so

to get reset over here then i kind of

come back and pretend like i'm seeing

you for the very first time again and

we'll dive into today's topic it's just

going to be the one lecture on regular

expression so it'll be a little shorter

than usual

but after that we'll do a little bit of

q a and then we'll adjourn for the

morning afternoon or evening be back in

a moment

all right this is cs50's introduction to

programming with python my name is david

malin and this is our week on regular

expressions so a regular expression

otherwise known as a regex is really

just a pattern and indeed it's quite

common in programming to want to use

patterns to match on some kind of data

often user input for instance if the

user types in an email address whether

to your program or a website or an app

on your phone you might ideally want to

be able to validate that they did indeed

type in an email address and not

something completely different so using

regular expressions we're going to have

the newfound capability to define

patterns in our code to compare them

against data that we're receiving from

someone else whether it's just to

validate it or heck even if we want to

clean up a whole lot of data that itself

might be messy because it too came from

us humans before though we use these

regular expressions let me propose that

we solve a few problems using just some

simpler syntax and see what kind of

limitations we run up against let me

propose that i open up vs code here and

let me create a file called validate.pi

the goal at hand being to validate how

about just that a user's email address

they've come to your app they've come to

your website they type in their email

address and we want to say yes or no

this email address looks valid all right

let me go ahead and type code of

validate.pi to create a new tab here and

then within this tab let me go ahead and

start writing some code how about that

keeps things simple initially first let

me go ahead and prompt the user for

their email address and i'll store the

return value of input in a variable

called email asking them what's your

email question mark i'm going to go

ahead and preemptively at least clean up

the user's input a little bit by

minimally just calling strip at the end

of my call to input because recall that

input returns a string or a stir

stirs come with some built-in methods or

functions one of which is strip which

has the effect of stripping off any

leading white space to the left or any

trailing white space to the right so

that's just going to go ahead and at

least avoid the human having

accidentally typed in a space character

we're going to throw it away just in

case now i'm going to do something

simple for a user's input to be an email

address i think we can all agree that

it's got to minimally have an at sign

somewhere in it so let's start simple if

the user has typed in something with an

at sign let's very generously just say

okay valid looks like an email address

and if we're missing that at sign let's

say invalid because clearly it's not an

email address it's not going to be the

best version of my code yet but we'll

start simple so i'm going to ask the

question if there is an at symbol in the

user's email address go ahead and print

out for instance quote unquote valid

else if there's not now i'm pretty

confident that the email address is in

fact

invalid now what is this code doing well

if at sign in email is a pythonic way of

asking is this string quote unquote at

in this other string email no matter

where it is at the beginning the middle

of the end it's going to automatically

search through the entire string for you

automatically i could do this more

verbosely and i could use a for loop or

a while loop and look at every character

in the user's email address looking to

see if it's an at sign but this is one

of the things that's nice about python

you can do more with less so just by

saying if at quote unquote in email

we're achieving that same result we're

going to get back true if it's somewhere

in there thus valid or false if it is

not well let me go ahead now and run

this program in my terminal window with

python of validate.pi and i'm going to

go ahead and give it my email address

mailin harvard.edu enter and indeed it's

valid looks valid is valid but of course

this program is technically broken it's

buggy what would be an example input if

someone might like to volunteer an

answer here that would be considered

valid but you and i know it really isn't

valid

alright this first version is just not

so good just yet alex your thoughts

well yeah thank you uh well please cause

you can type just two science science

and with it and you still be valid can

still be violated according to your

program but

the same exactly we've set a very low

bar here in fact if i go ahead and rerun

python validate.pi and i'll just type in

one at sign that's it no username no

domain name this doesn't really look

like an email address but unfortunately

my code thinks it in fact is because

it's obviously just looking for an at

sign alone well how could we improve

this well minimally in email address i i

think tends to have though this is not

actually a requirement tends to have an

at sign and a single dot at least maybe

somewhere in the domain name so mainland

harvard.edu so let's check for that dot

as well though again strictly speaking

doesn't even have to be that case but

i'm going for my own email address at

least for now as our test case so let me

go ahead and change my code now and say

not only if at is an email but also

dot is in email as well so i'm asking

now two questions i have two boolean

expressions if at an email and i'm

anding them together logically this is a

logical and so to speak so if it's the

case that at is an email and dot is an

email okay now i'm going to go ahead and

say valid all right this would still

seem to work for my email address let me

go ahead and run pythonvalidate.pi

mailin harvard.edu enter and that of

course is valid as expected but here too

we can be a little adversarial and type

in something nonsensical like at dot and

unfortunately that too is going to be

mistaken as valid even though there's

still no username domain name or

anything like that so i think we need to

be a little more methodical here in fact

notice that if i do this like this

the at sign can be anywhere and the dot

can be anywhere but if i'm assuming the

user is going to have a traditional

domain name like harvard.edu or

gmail.com i really want to look for the

dot in the domain name only not

necessarily just the username so let me

go ahead and do this let me go ahead and

introduce a bit more logic here and

instead do this let me go ahead and do

email.split of quote unquote at syn so

email again is a string or a stir stirs

come with methods not just strip but

also another one called split that is

the name implies we'll split one stir

into multiple ones if you give it a

character or more to split on so this is

hopefully going to return to me two

parts from a traditional email address

the username and the domain name and it

turns out i can unpack that sequence of

responses by doing this username comma

domain equals this i could store it in a

list or some other structure but if i

already know in advance what kinds of

values i'm expecting a username and

hopefully a domain i'm going to go ahead

and do it like this instead and just

define two variables at once on one line

of code and now i'm going to be a little

more precise if username

if username

then i'm going to go ahead and say print

valid

else i'm going to go ahead and say print

invalid now this isn't good enough but

i'm at least checking for the presence

of a username now and you might not have

seen this before but if you simply ask a

question like if username and username

is a string well username if username is

going to give me a true answer if

username is anything except none or

quote unquote nothing so there's a

truthy value here whereby if username

has at least one character that's going

to be considered true but if username

has no characters it's going to be

considered a false value effectively but

this isn't good enough i don't want to

just check for username i want to also

check that it's the case that dot is in

the domain name as well so notice here

there's a bit of potential confusion

with the english language here i seem to

be saying if username and dot in domain

as though i'm asking the question if the

username and the dot are in the domain

but that's not what this means these are

two separate boolean expressions if

username and separately

if dot in domain and if i parenthesize

this we could make that even more clear

by putting parentheses there parentheses

here so just to be clear it's really two

boolean expressions that we're adding

together not one longer english-like

sentence now if i go ahead and run this

python of

validate.pie enter i'll do my own email

address again mailin at harvard.edu and

that's valid and it looks like i could

tolerate something like this if i do

mail-in at just say harvard i think at

the moment this is going to be invalid

now maybe the top-level domain harvard

exists but at the moment it looks like

we're looking for something more we're

looking for a top level domain too like

dot edu so for now we'll just consider

this to be invalid

but it's not just that we want to do

it's not just that we want to check for

the presence of a username and the

presence of a dot let's be more specific

let's start to now narrow the scope of

this program not just to be about

generic emails more generally but about

edu addresses so specifically for

someone in us university for instance

whose email address tends to end with

dot edu i can be a little more precise

and you might recall this function

already instead of just saying is there

a dot somewhere in domain let me instead

say and the domain ends with quote

unquote dot edu so now we're being even

more precise we want there to be

minimally a username that's not empty

it's not just quote unquote nothing and

we want the domain name to actually end

with dot edu

but could this be broken still

looking at this version of my code can

someone think of an input that will

break this version now and it will

consider the input to be valid even

though

it's not

any observations here gene if i'm saying

it right

hello can you hear me sure yes if the uh

if the

username

if the

add sign

is not

if the letter of the add sign is where

if the uh if the letter or

if the uh

or

edu for example as

uh

manuka chatted in that chat if what if

that works or if that didn't work okay i

had a little trouble hearing you but i

know your emphasis is on the at sign so

let me try something along those lines

let me go ahead and run python of

validate.pi and just to make sure i

haven't made things even worse let me at

least test my own email address which

does seem to be valid now it seems that

i minimally need to provide a username

because we definitely do have that check

in place so i'm going to go ahead and

say mailin and now i'm going to go ahead

and say at and it looks like i could be

a little malicious here just say

mailinat.edu

as though minimally meeting the

requirements of this of this pattern and

that of course is considered valid but

i'm pretty sure there's no one at malin

at dot edu we need to have some domain

name in there so we're still not being

quite as generous now we could

absolutely continue to iterate on this

program and we could add some more

boolean expressions we could maybe use

some other python methods for checking

more precisely is there something to the

left of the dot to the right of the dot

we could use split multiple times but

honestly this just escalates quickly

like you end up having to write a lot of

code just to express something that's

relatively simple in spirit just format

this like an email address so how can we

go about improving this well it turns

out in python there's a library for

regular expressions it's called

succinctly re and in the re library you

have a lot of capabilities to define and

check for and even replace

patterns again a regular expression is a

pattern and this library the re library

in python is going to let us to define

some of these patterns like a pattern

for an email address and then use some

built-in functions to actually validate

a user's input against that pattern or

even use these patterns to change the

user's input or extract partial

information there from we'll see

examples of all this and more so what

can and should i do with this library

well first and foremost it comes with a

lot of functionality here's the url for

instance to the official documentation

and let me propose that we focus on

using one of the most versatile

functions in the library library namely

this search re.search is the name of the

function in the re module that allows

you to pass in a few arguments the first

is going to be a pattern that you want

to search for in for instance a string

that came from a user the string

argument here is going to be the actual

string that you want to search for that

pattern and then there's a third

argument optionally that's a whole bunch

of flags a flag in general is like a

parameter you can pass in to modify the

behavior of the function but initially

we're not even going to use this we're

just going to pass in a couple of

arguments instead so let me go ahead and

employ this re library this regular

expression library and just improve on

this design incrementally so we're not

going to solve this problem all at once

but we'll take some incremental steps

i'm going to go back to vs code here and

i'm going to go ahead now and get rid of

most of this code but i'm going to go

into the top of my file in first and

fall import this re library so import re

gives me access to that function and

more now after i've gotten the user's

input in the same way as before

stripping off any leading or trailing

white space i'm just going to use this

function super trivially for now even

though this isn't really a big step

forward i'm going to say if re dot

search

contains quote unquote at in the email

address then let's go ahead and print

valid else let's go ahead and print

invalid at the moment this is really no

better than my very first version where

i was just asking python if at sign in

the email address but now i'm at least

beginning to use this library by using

its own re.search function which for now

you can assume returns a true value

effectively if indeed the at sign is an

email just to make sure that this

version does work as i expect let me go

ahead and run python of validate.pi and

enter i'll type in my actual email

address and we're back in business but

of course this is not great because if i

similarly run this version of the

program and just type in an at sign not

an email address and yet my code of

course thinks it is valid so how can i

do better than this well we need a bit

more vocabulary

in the realm of regular expressions in

order to be able to express ourselves a

little more precisely really the pattern

i want to ultimately define is going to

be something like i want there to be

something to the left then an at sign

then something to the right and that

something to the right should end with

edu but should also have something

before the edu like harvard or yale or

any other school in the us as well

well how can i go about doing this well

it turns out that in the world of

regular expressions whether in python or

a lot of other languages as well there

are certain symbols that you can use to

define patterns at the moment i've just

used literal raw text if i go back to my

code here this technically qualifies as

a regular expression i've passed in a

quoted string inside of which is an at

sign now that's not a very interesting

pattern it's just an at sign but it

turns out that once you have access to

regular expressions or a library that

offers that feature you can more

powerfully express yourself as follows

let me reveal that the pattern that you

pass to re.search can take a whole bunch

of special symbols and here's just some

of them in the examples we're about to

see in the patterns we're about to

define

here are the special symbols you can use

a single period a dot to just represent

any character except a new line a blank

line so that is to say if i don't really

care what letters of the alphabet are in

the user's username i just want there to

be one or more characters

in the user's name dot allows me to

express a through z uppercase and

lowercase and a bunch of other letters

as well

star is going to mean in single asterisk

zero or more repetitions so if i say

something star that means that i'm

willing to accept either zero

repetitions that is nothing at all or

more repetitions one or two or three or

three hundred if you see a plus in my

patterns that's going to mean one or

more repetitions that is to say there's

got to be at least one character there

one symbol and then there's optionally

more after that and then you can say

zero or one repetition you can use a

single question mark after a symbol and

that will say i want zero of this

character or one but that's all i'll

expect and then lastly there's going to

be a way to specify a specific number of

symbols if you use these curly braces

and a number represented here

symbolically as m you can specify that

you want m repetitions be it 1 or 2 or 3

or 300 you can specify the number of

repetitions yourself and if you want a

range of repetitions like you want this

few characters or this many characters

you can use curly braces and two numbers

inside called here m and n which would

be a range of m through n repetitions

now what does all of this mean well let

me go back to vs code here and let me

propose that we iterate

on this solution further it's not

sufficient to just check for the at sign

we know that already we minimally want

something to the left and to the right

so how can i represent that i don't

really care what the user's username is

or what letters of the alphabet are in

it be it malen or anyone else's so what

i'm going to do to the left of this

equal sign is i'm going to use a single

period the dot that again indicates any

character except for a new line but i

don't just want a single character

otherwise the person's username could

only be a at such and such or b at such

and such i want it to be multiple such

characters so i'm going to initially use

a star so dot star means give me

something to the left and i'm going to

do another one dot star something to the

right now this isn't perfect but it's at

least a step forward because now what

i'm going to go ahead and do is this i'm

going to rerun python to validate.pi i'm

going to keep testing my own email

address just to make sure i haven't made

things worse and that's now okay

i'm now going to go ahead and type in

some other input like how about just

mainland at with no domain name

whatsoever and you would think this is

going to be invalid

but but but

it's still considered valid

but why is that if i go back to this

chart why is malin at with no domain now

considered valid

what's my mistake here

by having used dot star at dot star as

my regular expression or regex margarita

because you're using the star instead of

the plus sign

exactly the star again means zero or

more repetitions so re.search is

perfectly happy to accept nothing after

the after the at sign because that would

be zero repetitions so i think i

minimally need to evolve this and go

back to my code here and let me go ahead

and change this from dot star to dot

plus and let me change the ending from

dot star to dot plus so that now when i

run my code here let me go ahead and run

python of validate.pi i'm going to test

my email address as always still working

now let me go ahead and type in that

same thing from before that was

accidentally considered valid now i hit

enter finally it's invalid so now we're

making some progress on being a little

more precise as to what it is we're

doing now i'll note here like with

almost everything in programming python

included there's often multiple ways to

solve the same problem

and does anyone see a way in my code

here that i could make a slight tweak if

i forgot that the plus operator exists

and go back to using a star

if i allowed you only to use dots and

only stars could you recreate the notion

of plus

yourself the shawl

um sunny

no um

yeah that's okay you're off the hook

someone else could i recreate this idea

of one or more repetitions by using just

a star in no pluses michael

yes um use another dot

dot dot start yeah because if a dot

means any character we'll just use a dot

and then when you want to say or more

use another dot and then the star so

equivalent to dot plus would have been

dot dot star because the first dot means

any character and the second pair of

characters dot star means zero or more

other characters and to be clear it does

not have to be the same character just

by doing dot or dot star does not mean

your whole username needs to be a or a-a

or a-a-a or a-a-a-a it can vary with

each symbol it just means zero or more

of any character back to back so i could

do this on both the left and the right

which one is better you know it depends

i think an argument could be made that

this is even more clear because it's

obvious now that there's a dot which

means any character and then there's the

dot star but if you're in the habit of

doing this frequently one of the reasons

things like the plus exist is just to

consolidate your code into something a

little more succinct and if you're

familiar with seeing the plus now maybe

this is more readable to you so again

just like with python more generally

you're going to often see different ways

to express the same patterns and

reasonable people might agree or

disagree as to which way is better

than another well let me propose to you

that we can think about both of these

models a little more graphically if this

looks a little cryptic to you let me go

ahead and rewind to the previous

incarnation of this regular expression

which was just a single dot star and let

me go ahead and propose that you can

think of this whole pattern as dot star

at dot star as really being some kind of

flow similar in spirit to our flow

charts from weeks past but this one is

technically more of a state machine so

to speak this is a graphical

representation of what really your code

is doing underneath the hood or what

python is doing for you

what we have here is a depiction of

where the story begins it starts over

here and if you think about a user's

input

what this state machine is going to do

otherwise known as a non-deterministic

finite automaton is it's going to read

the user's input from left to right and

try to match it against this picture as

well in other words this picture is

equivalent to that same regular

expression dot star at dot star and you

can use this depiction as follows

logically if you start over here on the

left and you start processing the user's

input from left to right this state this

circle here in this circle here

represent technically different states

that the picture can be in and when you

start here in this state notice that

there's an arrow up and back down to the

same state what that means is per the

dot above that arrow you can

consume one or two or three or four or

any number of characters from the user's

input and if it's m a l a n each of

those is detected by way of this

placeholder this dot and so you can

start consuming the user's input from

left to right

then eventually though there's going to

have to be an at sign and so pictorially

what happens is that the computer

changes state into a state whereby you

have now read the at sign but after that

you're welcome to read again and again

and again and again any number of

additional symbols and the fact that

this circle here is a double circle one

bigger circle and then a smaller circle

inside of it means that it's a an accept

state a final state whereby the machine

terminates having read the user's whole

input

by contrast if we go back to my other

version of the code where i instead had

dot plus on both the left and the right

you can think of this picture as looking

a little different this one actually has

more states and if you start here again

at start on the left and you start

moving into this first state per the

circle the first thing you might handle

now is minimally any character

represented again by a dot then you can

rep then you can have any number of

other symbols thereby following this

loop here followed by an at sign

followed by at least one symbol followed

by any other

characters that you might want but this

final state here on the right again is a

double circle which means the story ends

there once you've gotten to the end of

the user's input so what is the

re.search function and functions like it

doing they're essentially implementing

that automaton it's a software-based

machine in this case that's

the pattern and it's implementing that

pattern in some sense in via that

graphic by following the characters one

at a time and making sure they not only

match the pattern in vs code here but

that pattern depicted graphically as

well well how can we go upon improving

this code further let me propose now

that we check not only for a username

and also something after the username

like a domain name but minimally

required that the string ends with dot

edu as well well i think i could do this

fairly straightforward not only do i

want there to be something after the at

sign like the domain like harvard i want

the whole thing to end with edu

but there's a little bit of danger here

what have i done wrong by implementing

my regular expression now in this way by

using dot plus

dot plus dot edu

what could go wrong with this version

yeah uh nahal if i'm saying it right

uh yeah uh it

the dot is and uh not mean something

else in this context where it means

three or more repetitions of a character

which is why it will interpret

exactly even though i mean for it to

mean literally dot edu a period and then

dot edu unfortunately in the world of

regular expressions dot means any

character which means that this string

could technically end in a e d u or b e

d u or c e d u and so forth but that's

not in fact that i want so any instincts

now as to how i could fix this problem

and let me demonstrate the problem more

clearly let me go ahead and run this

code here let me go ahead and type in

mailin harvard.edu and as always this

does in fact work but watch what happens

here let me go ahead and do mailin at

harvard and then

mainland at harvard question mark edu

enter

that 2 is valid so i could put any

character there and it's still going to

be accepted but i don't want question

mark edu i want edu literally any

instincts then for how we can solve this

problem here

how can i get this new function

re.search and a regular expression more

generally to literally mean a dot might

you think

we've seen similar problems and similar

solutions in the past uh yashavi if i'm

saying it right

uh i think we can stitch an extra string

behind the

plus

dot plus

yeah not behind the dot plus we don't

want the dot plus to be prefixed with

something but i think you're on the

right track other thoughts for how we

can get a literal.edu uh yorgo

you can use the escape character the

backslash indeed the so-called escape

character which we've seen before

outside of the context of regular

expressions when we talked about new

lines backslash n was a way of telling

the computer i want a new line but

without actually literally hitting enter

and moving the cursor yourself and you

don't want a literal n on the screen so

backslash n was a way to escape and

convey that you want a new line turns

out regular expressions use a very

similar technique to solve this problem

as well and so what i'm going to do here

is exactly that i'm going to put a

single backslash before the dot edu to

make clear that i want literally a dot

edu at the end of this string so that

now when i rerun my code i think mailin

harvard.edu will still be considered

valid and now if i run it again mailin

at harvard question mark edu or any

other character that's not a dot

thankfully now this is considered

invalid

any questions now on this technique

for matching something to the left of

the at sign something to the right and

now endingwith.edu explicitly tolu

yeah um what happens when you use that

inside people

a good question and you kind of called

me out here well when in doubt let's try

let me go ahead and do python

pythonovalidate.pi

mailin

harvard.edu which also is incorrect

unfortunately my code thinks it's valid

so another problem to solve

but a shortcoming for now other

questions

on these regular expressions thus far

akshay

yeah

can you use

curly brackets m

instead of backslash

can you use curly brackets instead of

backslash not in this case if you want a

literal dot backslash dot is the way to

do it literally how about one other

question on regular expressions

yeah over to

uh push

uh hi there can you hear me we can yes

all right um so i've got two questions

um

so the

could you just explain to me what the

plus sorry the the plus does in this

case

and um

if i'm correct just correct me if i'm

wrong um is this the same thing that

google forms uses in order to

categorize data in let's say

if you've got multiple people

sending in requests about some feedback

do they categorize the data that they

get using this particular regular

expression thing a good question so let

me take the first question first what

exactly does this plus mean so if we go

back from a moment ago to our chart

which defines each of these various

symbols recall that dot means any

character except a new line so that

might mean a or b or c or it turns out

the at sign so literally any character

on your keyboard except a new line is

what dot represents a plus meanwhile

represents one or more such characters

so in the context of my actual code if i

go back here this dot at the beginning

of my pattern means any character the

plus sign means one or more of the

previous thing so that means a or a a or

aaa or it doesn't have to be the same

letter again and again it can be a or a

b or a b c it just means one or more

characters is what dot plus means that's

in contrast to dot star which is zero or

more characters which would mean nothing

so no username whatsoever or a username

of length one or two or three or

anything else in answer to your question

about google forms indeed if you've ever

used google forms to not just submit it

but to create a google form one of the

menu options is for response validation

in english at least and what that allows

you to do is specify that the user has

to input an email address or a url

or a

string of some length but there's an

even more powerful feature that some of

you may not have ever noticed and indeed

if you'd like to open up google forms

create a new form temporarily and poke

around you will actually see in english

at least quote unquote regular

expression mentioned as one of the

mechanisms you can use to validate your

user's input into your google form so in

fact after today you can start avoiding

the specific drop downs of like email

address or url or the like and you can

express your own patterns precisely as

well regular expressions can even be

used in vs code itself if you go and

find or do a find and replace in vs code

you can of course just type in words

like you could into microsoft word or

google docs you can also type if you

check the right box regular expressions

and start searching for patterns not

literally

specific values

well let me propose that we now enhance

this implementation further by

introducing a few other symbols because

right now with my code i keep saying

that i want my email address to end with

edu and start with a username but i'm

being a little too generous this does in

fact work as expected for my own email

address mailin

harvard.edu but what if i type in a

sentence like my email address is

mailandharvard.edu and suppose i've

typed that into the program or i've

typed that into a google form

is this going to be considered valid

or invalid

well let's consider it's got the at sign

so we're good there it's got one or more

characters to the left of the at sign

it's got one or more characters to the

right of the at sign it's got a literal

edu somewhere in there to the right of

the at sign and granted there's more

stuff to the right there's literally

this period at the end of my english

sentence but that's okay because at the

moment my regular expression is not so

precise as to say the pattern must start

with the username and end with the dot

edu

technically it's left unsaid what more

can be to the left and what more can be

to the right so when i hit enter now

you'll see that that whole sentence in

english is valid and that's obviously

not what you want in fact consider the

case of using google forms or office 365

to collect data from users if you don't

validate your input your users might

very well type in a full sentence or

something else with a typographical

error not an actual email so if you're

just trying to copy all of the results

that have been typed into your form so

you can paste them into gmail or some

email program it's going to break

because you're going to accidentally

paste something like a whole english

sentence into the program instead of

just an email address which is what your

mailer expects so how can i be more

precise well let me propose we introduce

a few more symbols as well

it turns out in the context of a regular

expression one of these patterns you can

use the carrot symbol the little

triangular mark to represent that you

want this pattern to match the start of

the string specifically not anywhere but

the start of the user string

by contrast you can use a dollar sign in

your regular expression to say that you

want to match the end of the string or

technically just before the new line at

the end of the string but for all

intents and purposes think of carrot as

meaning start of the string and dollar

sign is meaning end of the string

it is a weird thing that one is a carrot

and one is a dollar sign these are not

really things that i think of as

opposites like a parenthesis or

something like that but those are the

symbols the world chose many years ago

so let me go back to vs code now and let

me add this feature to my code here

let me specify that yes i do want to

search for this pattern but i want the

user's input to start with this pattern

and end with this pattern so even though

it's going to start looking even more

cryptic i put a carrot symbol here at

the beginning and i put a dollar sign

here at the end that does not mean i

want the user to type a carrot symbol or

a dollar sign this is special symbology

that indicates to re.search that it

should only look for now an exact match

against this pattern so if i now go back

to my terminal window and i'll leave the

previous result on the screen let me

type the exact same thing my email

address is mailandharvard.edu

enter sorry

period and now i'm going to go ahead and

hit enter now that's considered invalid

but let me clear the screen and just to

make sure i didn't break things let me

type in just my email address and that

too is valid

any questions now on this version of my

regular expression

which note goes further to specify even

more precisely that i want it to match

at the start

and the end

any questions on this one here

yeah uh

me nana sorry if i'm saying that wrong

yeah you got it right okay uh so my

question is after the slash

you have that edu

and then the dollar sign but what

how how does the slash separate the dot

from

before edu and the dot after edu

the slash okay so let me

you want to say it again

uh

i mean okay you have slash and that edu

and then the dollar sign but that is

like one of the regular expression right

it normally is but this backslash that i

deliberately put before this period here

is an escape character it is a way of

telling re.search that i don't want any

character there i literally want a

period there and it's the only way you

can distinguish one from the other if i

got rid of that slash this would mean

that the email address just has to end

with any character then an e then a d

then a u i don't want that i want

literally a period then the e then the d

then the you

okay

oh sorry sorry

i was just

this is actually common convention in

programming and technology in general if

you and i decide on a convention whereby

we're using some character on the

keyboard to mean something special

invariably we create a future problem

for ourself when we want to literally

use that same character and so the

solution in general to that problem is

to somehow escape the character so that

it's clear to the computer that it's not

that special symbol it's literally the

symbol it sees and yes back to you for a

question

okay so we don't even know that we don't

need another

another slash before the dollar sign

no uh because in this case dollar sign

means something special per this chart

here dollar sign by itself does not mean

us dollars or currency it literally

means match the end of the string if

however i wanted the user to literally

type in a dollar sign at the end of

their input the solution would be the

same i would put a backslash before the

dollar sign which means my email address

would have to be something like mailing

at harvard.edu

dollar sign which is obviously not

correct too so backslashes just allow

you to tell the computer to not treat

those symbols specially likes meaning

something special but to treat them

literally instead how about one other

question here on regular expressions

uh yeah let's see trey if i'm saying it

right

uh i got a question about oh you took me

down it was a period and then it was

another one you said you took one off

and then you added one why was that took

one off and then added one

i think there's a

minute

uh so this before when i got rid of the

backslash

or something else you said that one

represents to

make it one plus then you said one was

to make it one with nothing sure so let

me

rewind in time i think what you're

referring to was one of our earlier

versions that initially looked like this

which just meant zero or more characters

then an at sign then zero or more other

characters

we then evolved that to be this dot plus

on both sides which means one or more

characters on the left then an at sign

then one or more characters on the right

and if i'm interpreting your question

correctly one of the points i made

earlier was that if you didn't use plus

or forgot that it exists you could

equivalently achieve the exact same

result with two dots and a star

because the first dot means any

character it's got to be there

the second dot star means zero or more

other characters and same on the right

so it's just another way of expressing

the same idea one or more can be

represented like this with dot dot star

or you can just use the handier syntax

of dot plus which means the same thing

did i interpret your question right

oh i think you froze on us but

trey if you can hear me if that wasn't

the answer to your question just uh

message in the chat to carter and we'll

field it again

all right well let me propose that we

should really be able to do even better

than this not just checking let me

rewind to where we left off

well let me propose that we improve even

upon this version here because it turns

out that we still have some bugs right

it's still the case that i am allowed to

have multiple at signs in my input but

that's not really a valid email address

in fact if i do this again

pythonvalidate.pi and i do mailin

harvard.edu that shouldn't be valid no

one you know has an email address that

looks like that but my program

sorry

[Music]

sorry i broke something oh sorry i broke

it

um

what's that oh the dollar sign

sorry let's rewind all right

all the questions made me break the code

all right but that's good all right let

me rewind to where we just were because

i got confused for a second and you

can't hear him but carter secretly

whispered the solution to me there so

thank you to carter

all right so i dare say there's still

some problems with the regular

expression in this current form because

even though now we're starting to look

for the username at the beginning of the

string from the user and we're looking

for the dot edu literally at the end of

the string from the user those dots are

a little too encompassing right now i am

allowed to type in more than the single

at sign why because at is a character

and dot means any character so honestly

i can have as many at signs as this

thing at the moment as i want for

instance if i run python of validate.pi

mailin harvard.edu still works as

expected but if i also run python to

validate.pi and incorrectly do mainland

at harvard.edu that should be invalid

but it's considered valid instead so i

think we need to be a little more

restrictive when it comes to that dot

and we can't just say oh any old

character there is fine we need to be

more specific well it turns out that

regular expressions also support this

syntax you can use square brackets

inside of your pattern and inside of

those square brackets

include one or more characters that you

want to look for specifically

alternatively you can inside of those

square brackets put a carrot symbol

which unfortunately in this context

means something completely different

from match the start of the string but

this would be the complement operator

inside of these square brackets which

means you cannot match any of these

characters so things are about to look

even more cryptic now but that's why

we're focusing on regular expressions on

their own here

if i don't want to allow any character

which is what a dot is let me go ahead

and i could just say well i only want to

support a or b's or c's or d's or e's or

f's or g's i could type in the whole

alphabet here plus some numbers to

actually include all of the letters that

i do want to allow but honestly a little

simpler would be this i could use a

carrot symbol and then an at sign

which has the effect of saying

this is the set of characters that has

everything except an at sign and i can

do the same thing over here instead of a

dot to the right of the at sign i can do

open bracket

carrot at sign and i admit things are

starting to escalate quickly here but

let's start from the left and go to the

right

this carrot outside of the square

brackets at the very start of my string

as before means match from the start of

the string and let's jump ahead the

dollar sign all the way at the end of

the regular expression means match at

the end of the string so if we can

mentally tick those off as

straightforward let's now focus on

everything else in the middle well to

the left here we have new syntax a

square bracket another carrot an at sign

and a closed square bracket

and then a plus the plus means the same

thing as always it means one or more of

the things to the left

what is the thing to the left well this

is the new syntax

inside of square brackets here i have a

carrot symbol and then an at sign that

just means any character except an at

sign it's a weird syntax but this is how

we can express that simple idea any

character on the keyboard except for

an at sign and heck even other

characters that aren't physically on

your keyboard but that nonetheless exist

then we have a literal at sign then we

have another one of these same things

square bracket carrot at close bracket

which means any character except an at

sign

then one or more of those things

followed by literally a period e d u

so now let me go ahead and do this again

let me rerun python validate.pi and test

my own email address to make sure i've

not made things worse and we're good

now let me go ahead and clear my let's

fix this again now let me go ahead and

clear my screen and run python to

validate.pi again and do mailin at

harvard.edu crossing my fingers this

time and finally this now is invalid why

i'm allowing myself to have one at sign

in the middle of the user's input but

everything to the left per this new

syntax cannot be an at sign it can be

anything but one or more times and

everything to the right of the at sign

can be anything but an at sign

one or more times followed by lastly a

literal dot edu so again the new syntax

is quite simply this square brackets

allow you to specify a set of characters

that you literally type out at your

keyboard abcdef or the complement the

opposite the caret symbol which means

not and then the one or more symbols you

want to exclude

questions now on this syntax here of

having a set of characters or

complementing the set that is taking the

opposite vishal

um

hi am i audible good thank you

uh hey am i audible yes you are

okay okay

so can we not use the curly brackets and

inside that can we not put one

because i think that would be more

concise uh

so you told us about the symbol that

curly bracket m we can tell how many

repetitions we want to have so right

after add sign can we use the curly

brackets m one

so that we can only have one repetition

of the add symbol absolutely

let me rewind slightly just to make the

example simpler for just a moment back

when we had this example here dot star

at dot star i propose that we could make

that one or more characters to the left

and the right or we could just use

pluses instead you could absolutely do

something like usb oh sorry let me do

that again

thank you

uh let's do this

we have to do some movie magic here now

i'm going to go over there absolutely so

we could do this let me go ahead and

pull up vs code and let me delete the

current form of a regular expression and

go back to where we began which was just

dot star at and dot star i could

absolutely do something like this and

require that i want at least one of any

character here and then i could do

something more to have anymore as well

so the curly brace syntax which we saw

on the slide earlier but didn't yet use

absolutely can be used to specify a

specific number of characters but

honestly this is more verbose than is

necessary the best solution arguably or

the simplest at least ultimately is just

to say dot plus but there too another

example of how you can solve the same

problem multiple ways let me go back to

where the regular expression just was

and take other questions as well

questions on the sets of characters or

complementing

that set

yeah

uh anjali

yeah hi can you hear me yes

so can you use that same syntax to say

that you don't want a certain character

throughout the whole string

you could it's going to be uh you could

absolutely use the same character to

exclude um

you could absolutely use this syntax to

exclude a certain character from the

entire string but it would be a little

harder right now because we're still

requiring edu at the end but yes

absolutely

other questions

suleiman if i'm saying it right

uh yeah i was wondering

what happens if the user input strike

edu in the beginning of the string a

good question what happens if the user

types in edu at the beginning of the

screen well let me go back to vs code

here and let's try to solve this in two

different ways first let's look at the

regular expression and see if we can

infer if that's going to be tolerated

well according to the current cryptic

regular expression i'm saying that you

can have any character except the at

sign so that would work i could have the

dot for the dot edu but then i have to

have an at sign so that wouldn't really

work because if i'm just typing in edu

we're not going to pass that constraint

so now let me try this in by running the

program let me type in just

literally.edu that doesn't work

but but but i could do this dot edu at

dot edu that too is invalid but let me

do this

dot edu at

something dot edu

that passes so it's starting to get a

little weird now maybe it's valid maybe

it's not but i think we'll eventually be

more precise too

how about one more question on this

regular expression

and these complementing of sets uh

viniak if i'm saying it right

yes

can we use uh

another domain name

as the string input

can you use another domain name

absolutely i'm using my own just for the

sake of demonstration but you could

absolutely use any domain or top level

domain and i'm using dot edu which is

very u.s centric but this would

absolutely work exactly the same for any

top level domain

all right well let me propose now

that we enhance this all the further

sorry give me a moment

okay

i'm gonna do a little more movie magic

here

all right thank you for humoring us

all right let me go ahead now and

propose that we improve this regular

expression further because if i pull it

up again in vs code here you'll see that

i'm being a little too tolerant still it

turns out that there are certain

requirements for someone's username and

domain name in an email address there is

an official standard in the world for

what an email address can be and what

characters can be in it and this is way

too accommodating of all the characters

in the world except for the at symbol so

let's actually narrow the definition of

what we're going to tolerate in user

names and companies like gmail could

certainly do this as well suppose that

it's not just that i want to exclude at

signs suppose that i only want to allow

for

say characters that normally appear in

words like letters of the alphabet a

through z be it uppercase or lowercase

maybe some numbers in heck maybe even an

underscore could be allowed too well we

can use this same square bracket syntax

to specify a set of characters as

follows i could do a b c d e f g h i j

oh my god this is going to take forever

i'm going to have to type out all 26

letters of the alphabet both lowercase

and uppercase so let me stop doing that

there's a better way already if you want

to specify within these square brackets

a range of letters you can actually just

do a hyphen if you literally do a hyphen

z in these square brackets the computer

is going to know you mean a through z

you do not need to type 26 letters of

the alphabet

if you want to include uppercase letters

as well you just do the same no spaces

no commas you literally just keep typing

a through capital z so i have little a

hyphen little z

big a hyphen big z no spaces no commas

no separators you just keep specifying

those ranges if i additionally want

numbers i could do one zero one two

three four nope you don't need to type

in all 10 decimal digits you can just

say 0 through 9 using a hyphen as well

and if you now want to support

underscores as well which is pretty

common in usernames for email addresses

you can literally just type in

underscore at the at the end notice that

all of these characters are inside of

square brackets which just again means

here is a set of characters that i want

to allow i have not used a carrot symbol

at the beginning of this whole thing

because i don't want to complement it

complement it with an e not complement

it with an i i want don't want to

complement it by making it the opposite

i literally want to accept only these

characters i'm going to go ahead and do

the same thing on the right if i want to

require that the domain names similarly

come from this set of characters which

admittedly is a little too narrow but

it's familiar for now so we'll keep it

simple i'm going to go ahead and paste

that exact same set of characters over

there to the right

and so now it's much more restrictive

now i'm going to go ahead and run

pythonvalidate.pi i'm going to test my

own email address and we're still good

i'm going to clear my screen and run it

once more

this time trying to break it let me go

ahead and do something like how about

david underscore malin at harvard.edu

enter but that too is going to be valid

but if i do something completely wrong

again like malen at

harvard.edu that's still going to be

invalid why because my regular

expression currently only allows for a

single at in the middle because

everything to the left must be

alphanumeric alphabetical or numeric or

an underscore the same thing to the

right followed by the dot edu

now honestly this is a regular

expression that you might be in the

habit of typing in the real world as in

as cryptic as this might look this is

the world of regular expressions so

you'll get more comfortable with this

syntax over time but thankfully some of

these patterns are so common that there

are built-in shortcuts for representing

some of the same information that is to

say you don't have to constantly type

out all of the symbols that you want to

include because odds are some other

programmer has had the same problem so

built into regular expressions

themselves are some additional patterns

you can use and in fact i can go ahead

and get rid of this entire set

a through z lowercase a through z

uppercase zero through nine in an

underscore and just replace it with a

single backslash w backslash w in this

case represents a word character which

is commonly known as a alpha numeric

symbol or the underscore as well i'm

going to do the same thing over here i'm

going to highlight the entire set of

square brackets delete it and replace it

with a single backslash w and now i feel

like we're making progress because even

though it's cryptic and what if it

looked way cryptic a little bit ago um

and even though it would have looked

even more cryptic a little bit ago now

it's at least starting to read a little

more friendly the carrot on the left

means start matching at the beginning of

the string backslash w means any word

character the plus means one or more at

symbol literally then another word

character one or more then a literal dot

then literally edu and then match at the

very end of the string and that's it so

there's more of these too and we won't

use them all here but here is a partial

list

of the patterns you can use within a

regular expression one you have

backslash d for any decimal digit

decimal digit meaning zero through nine

commonly done here too is if you wanna

do the opposite of that the complement

so to speak you can do backslash capital

d which is anything that's not a decimal

digit so it might be letters and

punctuation and other symbols as well

meanwhile backslash s means white space

characters like a single hit of the

space or maybe hitting tab on the

keyboard that's white space backslash

capital s is the opposite or complement

of that anything that's not a white

space character backslash w we've seen a

word character as well as numbers and

the underscore and if you want the

complement or opposite of that you can

use backslash capital w to give you

everything but a word character again

these are just common patterns that so

many people were presumably using in

yesteryear that it's now baked into the

regular expression syntax so that you

can more succinctly express your same

ideas

any questions then on this approach here

where we're now using backslash w

to represent my word character

yeah how about over to

uh bunch if i'm saying it right

oh you're unmuted in zoom but we don't

hear you

yeah there we go

yeah

uh so what i wanna ask about uh was the

uh actually the previous approach like

the square bracket approach

could we accept like uh lists in there

so suppose like if you want to go dot

edu and upload uh suppose.gmail or

something like that could you accept

lists in there

you can you can have multiple possible

matches uh within your same string

let me see if i can find um this for you

yes we'll see this before long but

suppose you wanted to tolerate not

just.edu but maybe.edu or dot com you

could do this you could introduce

parentheses and then you can or those

together i could say com or edu i could

also add in something like in the us or

gov or net or anything else or org or

the like and each of the vertical bars

here means something special it means or

and the parentheses simply group things

together formally you have this syntax

here a or b a or vertical bar b means a

has to match or b has to match where a

and b can be any other patterns you want

in parentheses you can group those

things together so just like math you

can combine ideas into one phrase and do

this thing or the other

and there's other syntax as well that

we'll soon see other questions on these

regular expressions and this syntax here

uh yeah let's go to uh harshit if i'm

saying it right

uh yeah uh i i just want to ask are

spaces bound to a character or a

function

or are they just valid

say that once more spaces

just but if we put spaces in the

expression

what if you want spaces in the

expression

i just wondered for the readability of

the code not in the input by the user

will they break the code or will they be

just accepted

sure so if you want spaces in there you

can't use backslash w alone because that

is only a word character which is

alphabetical numerical or the underscore

but you could do this you could go back

to this approach whereby you use

square brackets and you could say a

through z or a through z

or zero through nine or underscore or

i'm going to hit the space bar a single

space you can put a literal space inside

of the square brackets which will allow

you then to detect a space alternatively

i could still use backslash w but i

could combine it as follows i could say

give me a backslash w or a backslash s

because recall that backslash s is white

space so it's even more than a single

space it could be a tab but by putting

those things in parentheses now you can

match either the thing on the left or

the thing on the right one or more times

how about one other question on these

regular expressions

yeah yoga

hi can you guys hear me yes

perfect so i was going to ask um does

the backslash w um include a dot

yeah because no

no it only includes letters numbers uh

and underscore that is it

and i was wondering you gave an example

at the beginning that had uh spaces like

this is my email so and so um i don't

think our current version

even

quite quite a long while ago stopped

accepting it was that because of the

carrot uh or

because no

the reason i was handling spaces and

other english words when i typed out my

email addresses mailing at harvard.edu

was because we were using initially.star

or dot plus which is any character

and even after that we said anything

except the at sign which includes spaces

only once i started using square

brackets and a through z and 0 through 9

and underscore did we finally get to the

point where we would reject white space

and in fact i can run this here let me

go into the current version of my code

in vs code which is using again the

backslash w's for word characters let me

run pythonvalidate.pi and incorrectly

type in something like my email address

is

mailandharvard.edu period which has

spaces to the left of my username and

that is now invalid because space is not

a word character your go notes too that

technically i'm not allowing dots and

some of you might be thinking wait a

minute my gmail address has a dot in it

that's something we're going to still

have to fix a backslash w is not the end

all here it's just allowing us to

express our previous solution a little

more succinctly now suppose that we want

to improve on this further one thing

we're still not handling well is

uppercase versus lowercase necessary

yeah

now

one thing we're still not handling quite

properly is uppercase versus lowercase

the backslash w technically does handle

lowercase letters and uppercase because

it's the exact same thing as that set

from before which had a little a through

little z and big a through big z but

watch this let me go ahead in my current

form run python to validate dot pi and

just because my caps lock key is down

mainland harvard.edu

shouting my email address

it's going to be okay in terms of the

mailing it's going to be okay in terms

of the harvard because those are

matching the backslash w which does

include lowercase and uppercase but i'm

about to see invalid

why why is mailing at harvard.edu

invalid

when it's in all caps here even though

i'm using backslash w

abe your thoughts

yeah so you

are asking for the

domain.edu in lowercase and you're

typing in uppercase exactly i'm typing

in my email address in all uppercase but

i'm looking for literally.edu and as i

see you with airpods and so many of you

with headphones i apologize for yelling

into my microphone just now to make this

point but let's see if we can't fix that

well if my pattern on line 5 is

expecting it to be lowercase there's

actually a few ways i can solve this one

would be something we've seen before i

could just force the user's input to all

lowercase and i could put onto the end

of my first line dot lower and actually

force it all to lower case alternatively

i could do that a little later instead

of passing an email i could pass in the

lower case version of email because

email addresses should in fact be case

insensitive so that would work too but

there's another mechanism here which is

worth seeing it turns out that that

function before

called re.search supports recall a third

argument as well these so-called flags

and flags are configuration options

typically to a function that allow you

to configure it a little differently and

how might i go about configuring this

call to re.search a little bit

differently in so far as i'm currently

only passing in two arguments well it

turns out that some of the flags you can

pass into this function are these it

turns out that the regular expression

library in python aka re

comes with a few built-in variables so

to speak things that you can think of as

constants

that have meaning to re.search

and they do so as follows if you pass in

as a flag re.ignore case what re.search

is going to do is ignore the case of the

user's input it could be uppercase

lowercase a combination thereof the case

is going to be ignored it will be

treated case insensitively and you can

do other things too that we won't do

here but if you want to handle the

user's input that maybe spans multiple

lines maybe they didn't just type in an

email address but an entire paragraph of

text and you want to match different

lines of that text that is multiple

lines another flag is for

re.multi-line for just that or re.all

whereby you can con you can configure

the dot to repre to recognize not just

any character except new lines but any

character plus new lines as well but for

now let me go ahead and just make use of

this first one let me pass in a third

argument to re.search which is re.ignore

case and now let me rerun this without

clearing my screen i'll again shout

mailin harvard.edu

let me do this again

sorry

now i have to fix that

apologies let me fix this for the video

let me now re-run the program without

clearing my screen python of

validate.pie let me type in again in all

caps effectively shouting mailin

harvard.edu enter and now it's

considered valid because i'm telling

re.search specifically to ignore the

case of the input and that 2 here is

fine and why might i do this approach

rather than call.lower in one of those

other locations

if i don't actually want to change the

user's input for whatever reason i can

still treat it case insensitively

without actually changing the value of

that variable itself

are any final questions now on this

validation of email addresses

any final questions i'm just going to

make a fix here before we proceed

be right with you

okay yes thank you for waiting uh elon

or alan

can you hear me yes what question do you

have uh

so the pattern is a string right

can we use an f string

can you use an f string technically

no

i don't know actually you can okay i'm

secretly talking to carter you can you

guess you can use an f string so that

you could plug in for instance the value

of a variable and pass it into the

function

i hope i said my newfound knowledge with

confidence other questions on this a

pull kit

like access w character could we take it

as an input from the user

could you take the backslash w from the

user

yes

technically yes that's not a problem

we're trying to solve right now we want

the user to provide literal input like

their email address not necessarily a

regular expression but you could imagine

building software that asks the user

especially if they're more advanced

users to type in a regular expression

for some reason to validate something

else against that and in fact that's

what google's doing if you play around

with google forms and create a form with

response validation and select regular

expression google lets you and i type in

our own regular expressions would be a

perf which would be a perfect example of

that how about one final question on

these regular expressions

and then we'll introduce a few more

features as well uh gabtial if i'm

saying it right

hello can you hear yes we can

with this approach with backslash

w if your our user inside an a

i mean family original indicator

this would be considered a value email

right

so long as the user types a word

character like a letter of the alphabet

a through z a number like zero through

nine or an underscore backslash w plus

will recognize their input if they type

in a period or any other symbol

punctuation at the moment it will be

rejected so it might not be a perfect

regex just yet

all right well let me propose two here

all right give me one second

okay

all right let's do this again

all right well let me propose that we

try to solve one other problem here

whereby if i go into the same version as

before which is now ignoring case but i

type in one of my other email addresses

let me go ahead and run python of

validate.pi and this time let me type in

notmailandharvard.edu which i use

primarily but my another email address

of minemail and cs50.harvard.edu

which forwards to the same

let me go ahead and hit enter now and

huh

invalid even though i'm pretty sure that

is in fact my email address well let's

put our finger on the reason why

why at the moment is mainland

cs50.harvard.edu being considered

invalid

even though i'm pretty sure i send and

receive email from that address too

why might that be uh yeah uh pratam

yeah uh because there is a

dot uh

that has come

after the

at symbol

exactly there's a dot after my cs50 and

i'm not expecting any dots there i'm

expecting only again word characters

which is a through z zero through nine

and underscore so i'm going to have to

retool here but how could i go about

doing this well it turns out

theoretically there could be other email

addresses even though they'd be getting

a little excessively long for instance

mailing at

something.cs50.harvard.edu which is not

technically exist but it could you can

have of course multiple dots in a domain

name like we see here wouldn't it be

nice if we could handle that as well

well let me propose that we modify my

regular expression as follows it turns

out that you can group ideas together

and you can not only ask whether or not

this pattern matches or this one using

syntax like a vertical bar b which means

either a or b you can also group things

together and then apply some other

operator to them as well in fact let me

go back to vs code here and let me

propose that if i want to tolerate a sub

domain like cs50 that may or may not be

there

let me go ahead and change it as follows

i could naively do this if i want to

support subdomains i could say well

let's allow for other word characters

plus and then a literal dot and notice

i'll highlight in blue here what i've

just added everything else is the same

but i'm now adding room for another

sequence of one or more word characters

and then a literal dot

so this now i think

if i rerun python and validate.pi will

work for maylin

cs50.harvard.edu enter

unfortunately does anyone see where this

is going let me rerun pythonvalidate.pi

and type in as i keep doing mainland

harvard.edu which up until now has kept

working despite all of my changes but

now

finally i've broken my own email address

so logically what's the solution here

well there's a bunch of ways we could

solve this i could maybe start using two

regular expressions and support you uh

email addresses of the form

username at domain.tld

or username at

subdomain.domain.tld where tld just

means top level domain like edu

or i could maybe just modify this one

because i'd prefer not to have like two

regular expressions or one that's twice

as big

why don't i just specify to re.search

that part of this pattern is optional

what was the symbol we saw earlier that

allows you to specify that the thing

before it is technically optional

can anyone recall what symbol we could

use to effectively represent that

something before it is optional

daniel your thoughts

optional make the object the argument

optional

so we could we could use a vertical bar

and some parentheses and say either

there's something here or there's

nothing we could do that in parentheses

but i think there's actually an even

easier way

how can i specify that what i've

highlighted in blue the new backslash w

plus backslash dot is technically

optional it can either be there or not

philip

actually is a question mark

indeed question mark think back to this

summary here of our first set of symbols

whereby we had not just dot and star and

plus but also a question mark which

means literally zero or one repetitions

which effectively means optional it's

either there one or it's not

zero now how can i translate to that to

this code here well let me go ahead and

surround this part of my pattern with

parentheses

which doesn't mean i want literally a

parenthesis in the user's input i just

want to group these characters together

and in fact this now will still work

i've only added parentheses around the

new part for the subdomain let me run

pythonvalidate.pi

let me run

mailin.cs50.harvard.edu enter that's

still valid but to be clear if i rerun

it again for mailin harvard.edu that is

still invalid but not if i go in here

and say after the parentheses which now

is one logical unit it's one big group

of ideas together i add a single

question mark there this will now tell

re.search that that whole thing in

parentheses can either be there once

or be there not at all zero times so

what does this translate into when i run

it well let me go ahead and rerun it

with malen at cs50.harvard.edu

so that the subdomain's there that works

as before let me clear my screen and run

it again pythonvalidate.pi with mailin

harvard.edu which used to work then

broke is are we back in business now we

are that's now valid again

questions now on this approach where

we've used not just the

question mark but the parentheses as

well

uh yeah

okay yeah he said he works for zero or

one repetition what if you have more

what if you have more that's okay that's

where you could do star star is zero or

more which gives you all the flexibility

in the world

good question others on nikita

uh not yet still muted

uh in zoom you're muted you'll have to

click the there we go

yeah can you hear me yes

yeah so i was just asking that

with question mark there's only one

repetition

it means zero or one repetition so it's

either not there or it is there

and so that's why this pattern now if i

go back to my code even though again it

admittedly looks cryptic let me

highlight everything after the at sign

and before the dollar sign this now

represents

a domain name like harvard.edu or a

subdomain within the domain name why

well this part to the right is the same

as always backslash w plus means

something like harvard or yale

backslash.edu means literally.edu

so the new part is this in parentheses i

have another set of backslash w plus

backslash dot now but it's all in

parentheses i'm now having a question

mark right after that which means that

whole thing in parentheses either can be

there or it can't be there it's either

of those that are acceptable so a

question mark effectively makes

something optional it would not be

correct to remove the parentheses

because what would this mean if i remove

the parentheses that would mean that

only this dot is optional which isn't

really what we want to express i want

the sub domain like cs50 and the

additional dot to be what's there or not

there how about one other question on

regex is here priscilla

um

hi can you hear me yes we can

hi how are you good thank you uh

can i use this for the usernames

like my my username is spree dot ilya

can i use it absolutely we still have

other problems right we're not solving

all of the problems today just yet but

absolutely right now we are not letting

you have a period in your username and

again some of you with gmail accounts or

other accounts you probably have not

just underscores numbers and letters you

might have periods too well we could fix

that not using question mark here per se

but now that we have these parentheses

at our disposal what i could do is this

i could use parentheses to surround the

backslash w to say any word character

which is the same thing again as a

letter or a number or an underscore but

i could also or in using a vertical bar

something else like a literal dot now a

literal dot needs to be escaped

otherwise it represents any character

which would be a regression a step back

but now notice what i've done in

parentheses i'm telling re.search that

those first few characters in your email

address that is your username has to be

a word character like

a through z uppercase or lowercase or

zero through nine or an underscore or a

literal dot we could do this differently

too i could get rid of the parentheses

and the or and i could just use a set of

characters i could again manually say a

through z a through z zero through nine

underscore and then i could do a literal

dot with a backslash period and now i

technically don't even need the upper

case because i'm already telling the

computer to ignore case i can just pick

one or the other which one is better is

really up to you whichever one you think

is more readable would generally be the

better design all right let me propose

that i rewind this in time to where we

left off

which was here

and let me propose that there are indeed

still limitations of this solution not

just with the username not just with the

domain name we're still being a little

too restrictive so would you like to see

the official regular expression that at

least browsers use nowadays whenever you

type in an email address to a web form

and the web form the browser tells you

yes or no your email address is

syntactically valid

ready

ready

here is and this isn't even officially

the right regular expression it's a

simplified version that browsers use

because it catches most mistakes but not

all

here we go

this is the regular expression for a

valid email address at least as browsers

nowadays implement them now it's crazy

cryptic at first glance but note and

it's wrapping onto many lines but it's

just one pattern but just notice the now

familiar symbols there is the carrot

symbol at the very top there is the

dollar sign at the very end there is a

square bracket over here and then some

of these ranges plus other characters

turns out you don't normally see these

characters in email addresses it looks

like you're swearing at someone in their

username but they're valid characters

they're valid officially that doesn't

mean that gmail is going to allow you to

put dollar signs and other punctuation

in your username but officially some

servers might allow that so if you

really want to validate a user's email

address you would actually come up with

or copy paste something like this

but honestly this looks so cryptic and

if you were to type it out manually you

are so likely to make a mistake what's

the better solution here instead

this is where purse past weeks libraries

are your friend surely someone else on

the internet a programmer more

experienced than you even has come up

with code that validates email addresses

properly using this regular expression

or even something more sophisticated

than that so generally if the problem at

hand is to validate input that is pretty

conventional an email address a url

something where there's an official

definition that's independent of you

yourself

find a popular library that you're

comfortable using and use it in your

code to validate email addresses this is

not a wheel necessarily that you

yourself should invent we've used email

addresses though to iteratively start

from something simple too simple and

build on top of that so you could

certainly imagine using regular

expression still to validate things that

aren't email addresses but our data that

are important to you so we at least now

have these building blocks and it turns

out besides these regular expressions in

re.search there are oops ah bad

transition didn't mean to say that yet

sorry

give me one second to get us ready for a

few final demos

uh

sorry let me make this smooth we'll back

up in a moment

just checking some notes

okay sorry

all right let me do a slightly better

transition there

now it turns out besides re.search

there's other functions in the re

library in python that you might find

helpful one for instance is called re

match which is so similar to research

except you don't have to bother with

that first caret symbol anymore re.match

will literally for you automatically

start searching for a match from the

start of the string similar in spirit is

re.full match which is another function

in the re library that also looks for

the start of the string and the end of

the string thereby obviating the need

for you to have to use the carrot symbol

and the dollar sign as well ultimately

though you can use research at least for

now

so long as you use all of that same

syntax to express all of these scenarios

yourself

well let's go ahead and transition now

to a completely different demonstration

altogether whereby we maybe start to not

just validate the user's input but clean

it up it's all too common uh sorry let

me fix this

all right let me rewind sorry everyone

little movie magic

just so we can get a better transition

here

now besides the regular expressions

themselves it turns out there's other

functions in python's re library for

regular expressions among them is this

function here re.match which is actually

very similar to re.search except you

don't have to specify the carrot symbol

at the very beginning of your regex if

you want to match from the start of a

string re.match by design will

automatically start matching from the

start of the string for you similar in

spirit is re.full match which does the

same thing but not only matches at the

start of the string but the end of the

string so that you too don't need to

type in the caret symbol or the dollar

sign as well but let's go ahead and

transition back now to some actual code

whereby we solve a different problem in

spirit rather than just validate the

user's input and make sure it looks the

way we want let's just assume that the

users are not going to type in data

exactly as we want and so we're going to

have to clean up their input this

happens so often when you're using like

a google form or office 365 form or

anything else to collect user input no

matter what your form question says your

users are not necessarily going to

follow those directions they might go

ahead and type in something that's a

little differently formatted than you

might like now you could certainly go

through the results and download a csv

or open the google spreadsheet or

equivalent in excel and just clean up

all the data manually but if you've got

lots of submissions dozens hundreds

thousands of rows in your data set doing

things manually might not be very fun it

might be much more effective to write

code as in python that can allow you to

clean up that data and any future data

as well so let me propose that

we go ahead here and close validate.pi

and let's go ahead and create a new

program altogether called format dot pi

the goal of which is to reformat the

user's input in the format we expect i'm

going to go ahead and run code of format

dot pi and let's suppose that the data

we're going to reformat is the user's

name so not email address but name this

time and we're gonna hope that they type

in their name properly like david malen

but some users might be in the habit for

whatever reason of typing their name

backwards if you will with a comma such

as mailing comma david instead

now it's fine because both are clearly

as readable to the human but if you want

to standardize how those names are

stored in your system perhaps a database

or csv file or something else it would

be nice to at least standardize or

canonicalize the format in which you're

storing your data so that if you print

out the user's name it's always the same

format david malen and there's no commas

or backwardsness to it

so let's go ahead and do something

familiar let's go ahead and give myself

a variable called name and set it equal

to the return value of input asking the

user as we've done many times what's

your name question mark i'm going to go

ahead and proactively at least clean up

some messiness as we keep doing here by

just stripping off any leading or

trailing white space just in case the

user accidentally hits the space bar we

don't want that ultimately

in our data set

and now let me go ahead and do this as

we've done before let me just go ahead

quickly and print out just to make sure

i'm off to the right start hello and

then in curly braces name so making an f

string to format hello comma name now

let me go ahead and clear my screen and

run python of format up hi

let me behave and type in my name as i

normally would david spacemail and enter

and i think the output looks pretty good

it looks as expected grammatically

let me now go ahead though and play this

game again but this time maybe because

i'm not thinking or i'm just in the

habit of doing last name comma first i

do mailin comma david and hit enter

alright well this now is is weird even

though the program is just spitting out

exactly what i typed in arguably this is

not close to correct at least

grammatically it should really say hello

david malin now maybe i could have some

if conditions and i could just reject

the user's input if they type a comma or

get their names backwards somehow but

that's going to be too little too late

if the user has already submitted a form

online and i already have the data and

now i need to go in and clean it up and

it's not going to be fun to go through

manually in google spreadsheets or apple

numbers or microsoft excel and manually

fix a lot of people's names to get rid

of the commas and move the first name

before the last as is conventional in

the us

so let's do this it could be a little

fragile but let's let let's start to

express ourselves a little

programmatically here and ask this

if there is a comma in the person's name

which is pythonic i'm just asking the

question is this shorter string in this

longer string then let me go ahead and

do this let me go ahead and grab that

name in the variable

split on not just the comma but the

space after assuming the human typed in

a space after their name and let me go

ahead and store the result of that

splitting of male and comma david into

two variables let's do last comma first

again unpacking the sequence of values

that comes back

now let me go ahead and reformat the

name so i'm going to forcibly change the

user's name to be as i expect so name is

actually going to be this format string

first name then

last name both in curly braces but

formatted together with a single space

so that i'm overriding the user's input

and updating my name variable

accordingly for the moment to be clear

this program is interactive like the

users like me are typing their name into

the program but imagine the data already

is in a csv file it came in from some

process like a google form or something

else online you could imagine writing

code similar to this but that maybe goes

and reads that file into memory first

maybe it's a csv via a csv reader or

dict reader and then iterating over each

of those names but we'll keep it simple

and just do one name at a time but now

what's kind of interesting here is if i

go back to my terminal window and clear

it and run python of format dot pi and

hit enter i'm going to type in david

spacemailin as before and i think we're

still good but i'm also going to go

ahead and do this python of format dot

pi malin comma david with a space in

between crossing my fingers and hit

enter and voila

that now has been fixed such a simple

thing to be sure but it is so commonly

necessary to clean up user's input here

we see at least one way to do so pretty

easily now to be fair there's some

problems here in fact can someone

imagine a scenario in which this code

really doesn't fix the user's input what

could still go wrong

even with this fix in my code

any thoughts

yeah asanda

um a user can still start with the name

then asana then um

yeah

so if they type in their their name and

then their surname yeah yeah

i think we're okay there though right

because i was able to still type in

david's space mail oh yeah if they type

their in their name comma and then sign

them

oh and then something else yeah so let

me let me try this for instance let me

go ahead and run a program and uh i am

the only david maylin that i know but

suppose i were uh

let's say junior like this and it's

common in english at least to sometimes

put a comma there you don't necessarily

need the comma but i'm one of those

people who uses a comma

that's now really really broken so i've

broken some assumption there and so that

could certainly go wrong here what else

well let me go ahead and run this again

and if i did male and comma david no

space because i'm being a little sloppy

i'm not paying attention which is going

to happen when you have lots of users

ultimately well this really broke now

notice i have a value error an actual

exception why well because split

is supposed to be splitting the string

into two strings by looking for the

comma and a space but if there is no

comma in space it can't split it into

two things and the fact that i have two

variables on the left but i'm only

getting back

one thing on the right means that i

can't do this code quite as this so it's

fragile to be sure but wouldn't it be

nice if we could at least improve it for

instance we now know some regular

expression syntax what if i at least

wanted to make this space optional well

i could use my newfound regular

expression syntax and put a question

mark question mark means zero or one of

the things to the left what's the thing

to the left it's literally a space i

don't even need parentheses if there's

just one thing there so that would be

the start of a pattern that says i must

have a comma and then i may or may not

have a space zero or one space is

thereafter unfortunately the version of

split that's built into the stir

variable as in this case doesn't support

regular expressions if we want our

regular expressions we need to go use

that library here so let me go ahead and

do this let me go in and leave this code

as is but go up to the top now and

import re to import the library for

regular expressions and now let me go

ahead and start changing my approach

here

i'm going to go ahead and do this i'm

going to use a new function called re

sorry i'm going to use the same function

called re dot search and i'm going to

search for a pattern that i think will

be last comma first so let me use my new

found regular expression syntax and

represent a pattern for something like

malin comma space david

how can i do this well inside of my

quotes for re.search i'm going to have

something so dot plus sorry

i'm going to have something so dot plus

then i'm going to have a comma then i'm

going to have a space then i'm going to

have something dot plus now i'm going to

preemptively refine this a little bit i

want this whole pattern to start

matching at the beginning of the user's

input so i'm going to add the caret

right away and i want the end of the

user's input to be matched as well so

that i'm literally expecting any

character one or more times then a comma

then a space than any other character

one or more times and then that is it

and i'm going to pass in the name

variable as before

now when we've used re.search in the

past we really used it just to answer a

question does the user's input match the

following pattern or not true or false

effectively but re.search is actually

more powerful than that you can actually

get back more information and you can do

this you can specify a variable and then

an assignment operator and get back more

precise answers to what has been found

when searched for

but what is it you want to get back well

it turns out there's this other feature

of regular expressions which allow you

to use parentheses not just to group

things together but to capture them it

turns out when you specify parentheses

in a regular expression unbeknownst to

us up until now everything in the

parentheses will be returned to you

as a return value from the re.search

function it's going to allow you to

extract specific amounts of information

from the user's own input you can

reverse this process too by using the

non-capturing version as well you can

use parentheses and then literally a

question mark and a colon and then some

other stuff and that will say don't

bother capturing this i just want to

group things but for now we're going to

use just the parentheses themselves so

how am i going to do this well if i want

to get back the user's last name

and first name

i think what i want to capture is the

dot plus here

and the dot plus here

so i've deliberately surrounded in

parentheses the dot plus both to the

left and the right of the comma not

because i'm grouping them together per

se i'm not adding a question mark i'm

not adding up another plus or a star i'm

using parentheses now for capturing

purposes why well i'm going to do this

next i'm going to still ask a boolean

question like if there are matches then

do this so if matches is not effectively

false like none

i do

expect i've gotten back some matches and

watch what i can do now i can do last

comma first equals whatever matches in

and get back all of the groups of

matches then go ahead and update name

just like before with a format string

and do first and then

last in curly braces as well and then at

the very bottom just like before print

out for instance hello

comma name

so the new code now is everything

highlighted here i'm using research

to search for whether the user typed

their name in last comma first format

but i am more powerfully using re.search

to capture some of the user's input

what's going to get captured anything i

surround it in parentheses will be

returned to me as return values

how do you get at those return values

you ask the variable to which you

assigned them for all of the groups all

of the groups of parentheses that were

captured

so let me go ahead and do this let me go

ahead now and run python of format dot

pi

enter and i'm going to type my name as

usual in this case

nothing happens

with this if condition why because i did

not type a comma and so

this search does not find a comma so

there are no matches so we immediately

just print out hello name nothing

interesting or new there but if i now go

ahead and clear my screen and run python

format up high and do mainland comma

space david enter

we've reformatted my name well how did

this work let me be a little more

explicit now it turns out i don't have

to just say matches.groups i can get

specific groups back that i want so let

me change my code a little bit more let

me go ahead now

and just say this let's update name

uh

well actually let's do this let's say

that the last name is going to be in the

matches but specifically group one the

first name is going to be in the matches

but specifically group two y one and two

because this is the first set of

parentheses to the left of the comma

this is the second set of parentheses to

the right of the comma and based on the

input this would be the user's last name

in this scenario malen this would be the

user's first name david in this scenario

that's why i'm using group 1 for the

last name and group 2 for the first name

and now i'm going to go ahead and say

name equals

fstring again

first and then last

done and let me

refine this one last step before we take

questions i don't really need these

variables if i'm immediately using them

let's just go ahead and tighten this up

further as we've done in the past for

design sake if i want to make the name

the concatenation of the person's first

name and last name let's just do this

matches.group 2 first plus

a space

plus matches dot group one so it's just

up to me to know from left to right this

is group one this is group two so group

one is last group two is first so if i

wanna flip them around and update the

value of name i can explicitly get group

two first concatenate using plus a

single space and then concatenate on

group one

all right that was a lot let me pause to

see if there are questions the key

difference here is we're still using

re.search the exact same way but now i'm

using its return value not just to

answer a question true or false but to

actually get back specific matches

anything i captured so to speak

with parentheses

uh let's see eric if i'm saying that

right

hi uh just a very simple question

why is it here we're using one and two

instead of zero and one

really good question capturing the first

a good observation in almost every other

context we've started counting at zero

and one instead of one and two it turns

out there's something else in location

zero when it comes back from re.search

related to the string itself so

according to the documentation of this

function only

one is the first set of parentheses and

two is the second set and onward from

there just a different convention here

other questions maria

what if we

write nothing like white space comma

white space uh

how we check

true

of condition and second question uh if

we type

mixed with letters not word not words

if uh

it still will work

and i think i i'm not quite sure i heard

your audio correctly carter were you

able to

do you mind saying it again maria your

audio was a little off for me

ah hi all right

sorry uh

if we type whitespace not word not not

name

and the second question if we type as

mixed letters not really worth

can

it will be work for

how it

will fall i think i caught the first

part about white space and so before i

answer directly let me just run this and

make sure i've not broken anything

further let me run python to format pi

let me type in david spacemailin the

right way let me run it once more let me

type it mail and comma david the wrong

way that we're fixing and we're still

good but i think it will still break let

me run it a third time with malen comma

david with no space

and now

it's still broken why because i'm still

looking for

comma

space now how can i fix that one way i

could do that is to add a question mark

here which again is zero or more of the

thing before so if i have a space and

then a question mark literally no need

for any parentheses then i can literally

tolerate both male and comma space david

or malen comma david so let's try again

before this did not work let's do

mainland comma david with no space now

it does actually work so we can tolerate

different amounts of white space if i am

a little more precise with my formula

let me go ahead and try once more let me

very weirdly but possibly hit the

spacebar a few too many times so now

they're really separated this again is

not going to work quite right because

it's going to consume all of that white

space so now i might want to strip left

and right any of the leading white space

on the result or what i could do here is

say this

instead of 0 or

a 1 i could use a star here so space

star and now if i run this once more

with malin comma spacebase base david

enter now we've cleaned up things

further so you can imagine depending on

how messy the data is that you're

cleaning up your regular expressions

might need to get more and more

sophisticated it really depends on just

how many problems we want to solve at

once and if i didn't worry i catch all

of your questions feel free to type in

the chat and carter will uh help proxy

or answer as well other questions now on

this technique

of capturing in parentheses martin

oh you already answered my question okay

it was about the white space okay

excellent well allow me to propose that

we forge ahead further just to clean

this up even more so using a feature

that's actually relatively new to python

itself it is very common when using

regular expressions to do exactly what

i've done here to call a function like

re.search

with capturing parentheses inside such

that you get back a return value that

i'm calling matches you could call it

something else but i'm calling it by

default matches and then notice on the

next line i'm saying if matches wouldn't

it be nice if i could just tighten

things up further and do these all on

the same line well you can sort of let

me go ahead and do this let me get rid

of this if and let me just try to say

something like this if matches equals

research and then colon so combining

my if condition into just one line

instead of those two

in c or c plus or java you would

actually do something like this

surrounding the whole thing with

parentheses sometimes double sets to

suppress any warnings if you want to do

two things at once if you want to not

only assign the return value of

re.search to a variable called matches

but you want to subsequently ask a

boolean question is this effectively

true or false that's what i was doing a

moment ago let me undo this a moment ago

i was getting back the return value and

assigning it to matches and then i was

asking the question well it turns out

this need to have two lines of code

presumably rubbed people wrong for too

long in python and so you can now

combine these two kinds of lines into

one but you need a new operator you

cannot just say if matches equals

research and then an ecolon at the end

you instead need to do this

you need to do

colon equals if and only if you want to

assign something from right to left and

you want to ask an if or an l if

question

on the same line this is affectionately

known as you can see here as the walrus

operator and it's new to python in

recent years and it both allows you to

assign a value as i'm doing from right

to left and

ask a boolean question about it like i'm

doing with the if or equivalently l if

does anyone know why this is called the

walrus operator

if you kind of look at it like this

perhaps if you're familiar with walruses

it kinda sorta looks like a walrus so a

minor detail but a relatively new

feature of python that honestly you'll

probably continue to see online and in

source code and in textbooks and so

forth increasingly so now that it does

exist it does not change the logic at

all if i run python format dot pi and

type mainland comma space david it still

fixes things but it's tightened up my

code just a bit more

all right how about some final examples

here where we go about

sorry let me just organize my thoughts

before we spoil

um

one moment apologies

okay let me rewind

all right let's go ahead and look at one

final problem to solve that of

extracting information now as well so at

this point we've now validated the

user's input by checking whether or not

it meets a certain pattern we've cleaned

up the user's input by checking against

a pattern whether it matches or not and

if it does match we kind of reorganize

some of the user's information so we can

clean up their input and standardize the

format in which we're storing or

printing it in this case let's do one

final example where we're very

specifically extracting information in

order to answer some question so let me

propose this let me go ahead and close

format.pi and create a new file called

twitter.pi the goal of which is to

prompt users for the url of their

twitter profile

and extract from it infer from that url

what is the user's username now why

might you want to do this well one you

might want users to be able to just very

easily copy and paste the url from their

own twitter profile into your form into

your app so that you can figure out what

their uh username is

or you might have a form that asks the

user for their twitter username and

because people aren't necessarily paying

very close attention some people type

their username some people type their

whole url or something else altogether

it would be nice now that you're a

programmer to just be more tolerant of

different types of input and just take

on the burden of canonicalizing

standardizing the data but being

flexible with the users it's arguably a

better user experience if you just let

me copy paste or type in what i want you

clean it up you're the programmer not me

lens for a better experience perhaps

well let me go ahead and do this with

twitter.pie let me first go ahead and

prompt the user here

for a value for a variable that i'll

call url and just ask them to input the

url of their twitter profile i'm going

to go ahead and strip off any leading or

trailing white space just in case users

accidentally hit the bar that's like

literally the least i can do quite

easily but now let's go ahead and do

this suppose that the user's address

is

the following let me print out what they

type in and let me clear my screen and

run python of twitter.pi i'm going to go

ahead and type in for instance https

colon slash

twitter.com

davidjmalen which happens to be my own

twitter username for now we're just

going to print it back onto the screen

just to make sure i've not messed up yet

okay so i've printed back out the exact

same url but the goal at hand is to

extract the username only now let me

just ask perhaps a straightforward

question

logically what do i need to do to get at

the user's username

i don't need code i don't need answers

in python just give me a sense of what i

need do to get the answer i want when

the user types in a url like that ivan

well uh we just ignore what's before the

username and then

just extract the username perfect yeah i

mean it is as simple as that if you know

the usernames at the end well let's just

somehow ignore everything to the

beginning well what's at the beginning

well it's a url so we're probably going

to need to ignore an https a colon slash

a twitter.com and a slash so we just

want to throw all of that away why

because if it's url we know by how

twitter works that the username comes at

the end so let's use that very simple

idea to get at the information we want

well i'm going to try this a few

different ways let me go back into my

program here and instead of just

printing it out which was just to see

what's going on let me do this let me

create a new variable called username

and let me call url.replace

it turns out that if url is a string or

a stir in python it again comes with

multiple methods like strip

and split and others as well one of

which is called replace and replace will

do just that you pass a two arguments

the first of which is what do you want

to replace the second argument is what

do you want to replace it with so if i

want to get rid of as ivan proposed

really just everything before the

username that is the twitter url or the

beginning thereof let's just say this go

ahead and replace https colon slash

twitter.com

close quote that's what i want to

replace and comma second argument what

do you want to replace it with nothing

so i'm literally going to pass in quote

unquote to effectively do a find and

replace that's what the replace method

does just like you can do it in

microsoft word or google docs this is

the programmer's way of doing find and

replace

now let me go ahead and

print out just the username so i'll use

an f string like this i'll say username

colon and then in curly braces username

just to format it nicely all right let

me go ahead and clear my screen and run

python of twitter.pi enter url here we

go https colon slash twitter.com

davidjmalen

enter okay now we've made some progress

done for the day right

well what is suboptimal about this can

anyone critique or find fault with

my program it is working now

but it's a little fragile i bet we could

contrive some scenarios where i think it

works but it doesn't any thoughts alex

yeah thank you well i have a few ideas

actually well first of all

if we if we don't specify

https it will broken secondly if we have

slash at the end it also will be broken

if we if we have like uh question mark

or something after question mark it also

won't work so

let us scenario section oh my god i mean

here we are i was pretending to think i

was done but my god like alex gave us a

whole laundry list of like problems and

just to recap then what if it's not

https it's http slightly less secure but

i should still be able to tolerate that

programmatically uh what if the protocol

is not there what if the user just typed

twitter.com davidjamalin it would be

nice to tolerate that rather than show

an error and make me type in the

protocol why it's not good user

experience what if it had a slash at the

end of the username or a question mark

if you think about urls you've seen on

the web there's very commonly more

information especially if it's been

shared on social media there might be

http parameters so to speak just stuff

there that we don't want there could be

a

www.twitter.com which i'm also not

expecting but does work if you go to

that url too

so there's just so many things that can

go wrong and even if i come back to my

contrived example as earlier what if i

run this program and say this

my username is https colon slash slash

twitter.com

davidjmaylen

enter

well that too just just didn't really

work it got rid of the you actually

okay actually that kind of worked but

the goal here is to actually get the

user's username not an english sentence

describing the user's username so i

would argue that even though i just

accidentally created perfectly correct

english grammar i did not extract the

twitter username correctly i don't want

words like my username is as part of my

input so how can we go about improving

this and maybe chipping away at some of

those problems one by one well let me

clear my screen here let me come back up

to my code and let me not just replace

it but let me do something else instead

i'm going to go ahead and instead of

using replace i'm going to use another

function called remove prefix a prefix

is a string or a substring that comes at

the start of another so if i remove

prefix i don't need a second argument

for this function i just need one what

prefix do you want to remove so this

will at least now fix the problem i just

described of typing in like a whole

sentence where the url is there but it's

not the beginning it's only at the end

so here this still is not correct but we

don't create this weird looking output

that just removes the url part of the

input

my username is https colon slash

twitter.com davidjmaylen a moment ago it

did remove the url and left only the

david j maylin this is not perfect still

but at least now it does not weirdly

remove the url and then leave the

english it's just leaving it alone so

maybe i could handle this better but at

least it's removing it from the part of

the string i might anticipate

well what else could we do here well it

turns out that like regular expressions

just let us express patterns much more

precisely we could spend all day using a

whole bunch of different python

functions like remove prefix or remove

and strip and others and kind of make

our way to the right solution but a

regular expression just allows you to

more succinctly if admittedly more

cryptically express these kinds of

patterns and goals and we've seen from

parentheses which can be used not just

to group symbols together as sets but to

capture information as well we have a

very powerful tool now in our toolkit so

let me do this let me go ahead and start

fresh here and import the re library as

before at the very top of my program i'm

still going to get the user's url via

the same line of code but i'm now going

to use another function as well it turns

out that there's not just re.search or

rd.match or re.full match there's also

re.sub

in the regular expression library where

sub here means substitute and it takes

more arguments but they're fairly

straightforward the first argument to

re.sub is the pattern the regular

expression that you want to look for

then you have a replacement string what

do you want to replace that pattern with

and where do you want to do all that

well you pass in the string that you

want to do the substitution on then

there's some other arguments that i'll

wave my hands at for now among them are

those same flags and also a count like

how many times do you want to do find

and replace do you want it to do all do

you want to do it just one or so forth

you can have further control there too

just like you would in google docs or

microsoft word well let me go back to my

code here

and let me do this i'm going to go ahead

and call re not search but re.sub for

substitute i'm going to pass in the

following regular expression https colon

slash

twitter.com

and then i'm going to close my quote and

now what do i want to replace that with

well like before

with the simple stir replace function i

want to replace it with nothing just get

rid of it altogether but what string do

i want to pass in to do this to the url

from the user

and now let me go ahead and assign the

return value of resub to a variable

called username so our e sub's purpose

in life is again to substitute some

value for some regular expression some

number of times it essentially is find

and replace using regular expressions

and it returns to you the resulting

string once you've done all those

substitutions

so now the very last line of my code can

be the same as before print and i'll use

an f string username colon and then in

curly braces username so i can print out

literally just that

all right let's try this and see what

happens i'll clear my terminal window

run python of twitter.pi and here we go

https colon

twitter.com davidjmaylen

cross my fingers and hit enter okay

now we're in business

but it is still a little fragile and so

let me ask the group

what problem should i now further chip

away at they've been said before but

let's be clear what's one or more

problems that still remain but i think

it's going to be easier to solve them

with regular expressions than with just

a whole bunch of separate python

functions gene

uh

the protocols and the uh

domain prefixes

and the domain

good the protocol so http versus https

maybe the sub domain www should it be

there or not and there's a few other

mistakes here too let me actually stay

with the group what are some other

shortcomings of this current solution

any other problems hector

and hi

um if we use a phrase like you do before

we are going to have the same problem

because it's not a taking a account in

the first part of the

the text example

good i might still allow for like some

words uh some english to the left of the

url because i didn't use like my carrot

symbol so i'll fix that and any final

observations on shortcomings here

think adversarially with my code and

soon with yours what could go wrong uh

nigel if i'm saying it right

uh well it could be a http or there

could be like less than two slashes

okay so it could be http and i think

that was mentioned too in terms of

protocol there could be fewer than two

slashes that i'm not going to worry

about if the user gives me one slash

instead of two that's really user error

and i could be tolerant of it but you

know what at that point i'm okay

yelling at them with an error message

saying please fix your input otherwise

we could be here all day long trying to

handle all possible typos for now i

think in the interest of usability or

user experience ux let's at least be

tolerant of all possible valid inputs or

reasonable inputs if you will so let me

go here and let me start chipping away

at these here what are some problems we

can solve well let me propose that we

first address the issue of matching from

the beginning of the string so let me

add the carrot to the beginning and let

me add not a dollar sign at the end

though right because i don't want to

match all the way to the end because i

want to tolerate a username there so i

think we just want the carrot symbol

there there's a subtle bug that no one

yet mentioned and let me just kind of

highlight it

and see if it jumps out at you now it's

a little subtle here on my screen i've

highlighted in blue

a final bug here maybe some smiles on

the screen yeah can we take one hand

here why am i

highlighting the dot in twitter.com even

though it definitely should be there uh

if i'm saying it right

uh yeah so the dot without a black

backlash meaning any character is of a

new line

yeah exactly it's not it means any

character so i could type in something

like twitter uh question mark com or

twitter anything com and that would

actually be tolerated it's not really

that bad because why would the user do

that but if i want to be correct and i

want to be able to test my own code

properly i should really get this detail

right so that's an easy fix too but it's

a common mistake anytime you're writing

regular expressions that happen to

involve special symbols like dots in a

url or domain name a dollar sign in

something involving currency remember

you might indeed need to escape it with

a backslash like this here all right let

me ask the group about the protocol

specifically to https is a good thing in

the world it means secure there is

encryption being used so generally you

like to see https but you still see

people typing or copy pasting http what

would be the simplest fix here to

tolerate as has been proposed both http

and https i'm going to propose that i

could do this i could do http vertical

bar

or https which again means a or b but i

think i can be smarter than that i can

keep my code a little more succinct any

recommendations here for tolerating

http or https

here too many ways to solve martin

we could try to put in question mark

behind the s perfect just use a question

mark right like both of those would be

viable solutions if you want to be super

explicit in your code fine use

parentheses and say http or https so

that you the reader your boss your

teacher just know exactly what you're

doing but you know if you keep taking

the more verbose approach all the time

it might actually become less readable

certainly once your regular expressions

get this big instead of this big so

let's save space where we can and i

would argue that this is pretty

reasonable so long as you're in the

habit of reading regular expressions and

know that question mark does not mean a

literal question mark but it means zero

or one of the thing before i think we've

effectively made the s optional here now

what else can i do well suppose we want

to tolerate the www dot which may or may

not be there

but it will work if you go to a browser

i could do this www dot

wait i want a backslash there so i don't

repeat the same mistake as before but

this is no good either because i want to

tolerate www being there or not being

there and now i've just required that it

be there but i think i can take the same

approach any recommendations how do i

make the www dot optional just to hammer

this home

how do i make this optional here uh yeah

maria

we can like group

make a square and

question mark perfect so question mark

is the short answer again but we have to

be a little smarter this time as maria's

noted we need parentheses now because if

i just put a question mark after the dot

that just means the dot is optional and

that's wrong because we don't want the

user to type in w-w-w-t-w-i-t-t-e-r

we want the dot to be there or just not

at all with no www so we need to group

this whole thing together put a

parenthesis there and then a parenthesis

not after the third w

after the dot so that that whole thing

is either there or it's not there and

what else could we still do here you

know there's going to be one other thing

we should tolerate and it's been said

before and i'll pluck this one off what

about the protocol like what if the user

just doesn't type or doesn't copy paste

the http colon slash or an https colon

slash right honestly you and i are not

in the habit generally of even typing

the protocol anymore nowadays you just

let the browser figure it out for you

and automatically add it instead

so this one's going to look like more of

a mouthful but if i want this whole

thing here in blue to be optional it's

actually the same solution as maria

offered a moment ago i'm going to go

ahead and put a parenthesis over here

and a parenthesis after the two slashes

and then

a question mark so as to make that whole

thing optional as well and this is okay

it's totally fine to make this whole

thing optional or inside of it this

little thing just the s optional as well

so long as i'm applying the same

principles again and again either on a

small scale or a bigger scale it's

totally fine to nest one of these inside

of the other

questions now on any of these

refinements

to this parsing this analyzing of

twitter

yeah over to

uh

rajvadar if i'm saying it right

yeah can you hear me yes we can

what if we put a vertical bar

besides this www dot

what if we use a vertical bar there so

we could do something like that too we

could do something like this

instead of the question mark i could do

www dot or nothing and just leave that

in the parentheses that too would be

fine i personally tend not to like that

because it's a little less obvious to me

wait a minute is that deliberate or did

i forget to finish my thought by putting

something after the vertical bar but

that too would be allowed there as well

if that's what you mean other questions

on where we left things here where we

made the protocol optional too suleiman

what

happened if we have parameters of

parenthesis and inside we have another

parenthesis and another parenthesis

if you have parentheses inside of

parentheses that too is totally fine and

indeed that should be one of the

reassuring lessons today as complicated

as each of these regular expressions has

admittedly gotten i'm just applying the

exact same principles in the exact same

syntax again and again so it's totally

fine to have parentheses inside of

parentheses if they're each solving

different problems and in fact the

lesson i would really emphasize the most

today is that you will not be happy if

you try to write out a whole complicated

regular expression all at once like if

you're anything like me you will fail

and you will have trouble finding the

mistake because my god look at these

things they are even to me all these

years later cryptic the better way i

would argue whether you're new to

programming or as old to it as i am is

to just take these baby steps these

incremental steps where you do something

simple you make sure it works you add

one more feature make sure it works add

one more feature make sure it works and

hopefully by the end because you've done

each of those steps one at a time the

whole thing will make sense to you but

you'll also have gotten each of those

steps correct

at each turn so please do avoid the

inclination to try to come up with long

sophisticated regular expressions all at

once because it's just not a good use of

a time if you then stare at it trying to

find a mistake that you could have

caught if you did things more

incrementally instead well let me make

some final improvements to this example

here whereby i'm going to go ahead and

make sure that i'm only printing out the

user's username if in fact i detected it

recall that

resub and research

sorry let me figure this out

sorry let me rewind and say this again

um sorry just thinking for a moment

give me just one second

make sure we get this final detail right

okay

all right there still remains arguably

at least one problem with this solution

in that even though i'm calling re.sub

to substitute the url with nothing quote

unquote i then on my final line of code

line six i'm just blindly assuming that

it all worked and i'm going to go ahead

and print out the username but what if

the user if i clear my screen here and

run python of twitter.pi doesn't even

type a twitter url what if they do

something like https colon

www.google.com like completely

unrelatedly for whatever reason enter

that is not their twitter username so we

need to have some conditional logic i

would argue so that for this program's

sake we're only printing out or in a

back-end system we're only saving into

our database or a csv file the username

if we actually matched the proper

pattern so rather than use re.sub which

is useful for cleaning up data as we've

done here to get rid of something we

don't want there why don't we go back to

re.search where we began today and use

it to solve the same problem but in a

way that's conditional whereby i can

confidently say yes or no at the end of

my program here's the username or here

it is not so let me go ahead now and

i'll clear my terminal window here

i'm going to keep most of the i'm going

to keep the first two lines the same

where i import re and i get the url from

the user but this time let's do this

let's this time search for using

re.search instead of re.sub the

following i'm going to start matching at

the beginning of the url of the string

https

question mark to make the s optional

colon slash then i'm going to make my

www

uh optional by putting that in question

marks there then a twitter.com with a

literal dot there so i'll stay ahead of

that issue too then a slash

and then well this is where david j

mayland is supposed to go

how do i detect this well i think i'll

just tolerate anything at the end of the

url here all right dollar sign at the

very end close quote for the moment i'm

going to stipulate that we're not going

to worry about question marks at the end

or hashes like for fragment ids and urls

we're going to assume for simplicity now

that the url just ends with the username

alone

now what am i going to do well i want to

search for this url specifically and i'm

going to ignore case so re.ignore case

applying that same lesson learned from

before

re.search recall will return to you the

matches you've captured well what do i

want to capture well i want to capture

everything to the right of the

twitter.com url here so let me surround

what should be the user's username with

parentheses not for making them optional

but to say capture this set of

characters now re.search recall returns

an answer matches will be my variable

name again but i could call it anything

i want and then i can do this if matches

now i know i can do this let's print out

the format string username colon and

then

uh

what do i want to print out well i think

i want to print out matches dot group

one for my matched username

all right so what am i doing just to

recap line 1 i'm importing the library

line 2 i'm getting the url from the user

so nothing new there line 5 i'm

searching the user's url as indicated

here is the second argument for this

regular expression this pattern i have

surrounded the dot plus

with parentheses

so that they are captured ultimately so

i can extract in this final scenario the

user's username if i indeed got a match

and matches is non-none it is actually

containing some match then and only then

print out username in this way let me

try this now if i run python of

twitter.pi and type in https colon

www.google.com

now nothing gets printed so i've at

least solved the mistake we just saw

where i was just assuming that my code

worked now i'm making sure that i have

searched for and found the twitter url

prefix

all right well let's run this for real

now python of twitter.pie https colon

slash slash twitter.com davidjmalen but

note i could use http i could use www

i'm just going to go ahead here and hit

enter

huh

none

what has gone wrong

this one's a bit more subtle

but why does matches dot group one

contain nothing

wait a minute let me maybe i maybe i did

this wrong maybe maybe do we need the

www let me run it again so here we go

https colon let's add it www.twitter

davidjmaylen all right enter

what is going on

abdullah

if i'm saying it right

yes now we can hear you

uh you have to set group too

didn't hear that you wanna say again

you have to say

i have to say group two well wait oh

right because we had the the sub domain

was optional and to make it optional i

needed to use parentheses here and so i

then said zero or one okay so

that means that actually i'm

unintentionally but by design capturing

the www dot or none of it if it wasn't

there before

but i have a second match over here

because i have a second set of

parentheses so i think yep let me change

matches group one to matches group two

and let's run this python of twitter dot

pi https colon

www.twitter let's do this uh twitter.com

davidjmaylen

enter

and now we've got access to the username

let me go ahead and tighten it up a

little bit further

if you like our new friend it's hard not

to like if we like our old friend the

walrus operator let's go ahead and add

this just to tighten things up let me go

back to vs code here and let me get rid

of the unnecessary condition there and

combine it up here if matches equals

that but let's change the single

assignment operator to the wallace

operator now i've tightened things up

further but i bet i bet i bet there

might be another solution here and

indeed it turns out

that we can come back to this final set

of syntax recall that when we introduced

these parentheses we did it so that we

could do a or b for instance with the

vertical bar that you can even combine

more than just one bar we use the group

to combine ideas like the www dot and

then there's this admittedly weird

syntax at the bottom here up until now

not used there is a non-capturing

version of parentheses if you want to

use parentheses logically because you

need to but you don't want to bother

capturing the result and this would

arguably be a better solution here

because yes if i go back to vs code i do

need to surround the www dot with

parentheses at least as i've written my

regex here because i wanted to put the

question mark after it but i don't need

the www dot coming back in fact let's

only extract the data we care about just

so there's no confusion down the road

for me or my colleagues or my teachers

so what could i do

well the syntax per this slide is to use

a question mark and a colon immediately

after the open parenthesis it looks

weird admittedly those of you who have

prior programming experience might

recognize the syntax from ternary

operators doing an if else all in one

line a question mark colon at the

beginning of that parenthetical means

yes i'm using parentheses to group these

things together but no you do not need

to capture them instead so i can change

my code back now to matches.group one

i'll clear my screen here on python of

twitter.pi i'll again run here

https colon

twitter.com davidjmalen with or without

the www and now i indeed get back that

username

any questions then

on these final

techniques

any questions now yeah over to

yorgo

hi hi thanks david um i have two

questions if that's okay sure so first

well could we

move the carrot right at the beginning

of twitter and then just start from

reading from there and then get rid of

everything else before that the kind of

wwe

uh issues that we had

and then my second question is how would

we

um use kind of i guess

either a list or a a dictionary to to

sort the dot-com kind of thing if

because we have dot code uk and that

kind of start how would we bring that

into uh the re function a good question

and let me clarify your first question

what what did you ask about the carrot

exactly

so could we move the carrot just before

twitter.com so that we don't have to

deal with the https and www a good

question but no if i move the carrot

before twitter.com and throw away the

protocol in the www then the user is

going to have to type in literally

twitter.com

username they can't even type in that

other stuff so that would be a

regression a step back

as for the com and the dot org and edu

and so forth the short answer is there's

many different solutions here if i

wanted to be stringent about com and

suppose that twitter probably owns

multiple domain names even though they

tend to use just this one suppose they

have something like dot org as well you

could use more parentheses here and do

something like this com or org i'd

probably want to go in and add a

question mark colon to make it

non-capturing because i don't care which

it is i just want to tolerate both

alternatively we could capture that we

could do something like this where we do

dot plus so as to actually capture that

and then we could do something like this

if matches dot group

1 now

equals equals com

then we could support this so you could

imagine factoring out the logic just by

extracting the top level domain or tld

and then just using python code maybe a

list maybe a dictionary to validate

elsewhere outside of the regex if it's

in fact what you expect for now though

we kept things simple we focused only on

the dot com in this case

other questions on these regexes

uh akshay over to you

yeah uh my questions from a while back

uh you showed the

cryptic code right from carrick to the

dollar so why can't we use slash w

instead of writing from a to z to the

numbers and just grouping the other

special characters

so i showed multiple approaches for the

username and the

uh domain name back when we were

focusing on email addresses and i did it

just to show the equivalence backslash w

is the same thing as the square brackets

with little a through little z big a

through big z zero through nine and an

underscore i went to backslash w because

it's way faster to type and it's just a

little more semantically clear like

backslash w sounds like word and so it

just reminds me that okay it's a word

character however recall that that

wasn't good enough because some of you

have periods in your username and a

period for better for worse is not part

of backslash w so i could go back and

use the square brackets and add a period

a backslash period to that list of

characters

or i could do backslash w or vertical

bar

backslash dot this is again just to say

there's many different ways to solve

these problems and at least initially i

would go with whichever one is most

comfortable to you and most readable for

you

and others avoid writing a regular

expression like the crazy browser one

which has to be used by someone but

generally probably doesn't need to be in

our own code how about one other

question on regex is here

uh yeah priscilla

okay uh

back before uh

one guy said about the group one and a

group two

there is a mistake or invalid things

that don't come the username

and i'm

i'm stick there

do you remember

something that you put and and

back before the the group one and group

two

can i can i see this again because that

that became invalid

in the name you can get the username

yes so i think i i'm not sure if i'm

hearing this right but before i added

the question mark colon syntax which

came from

this this summary here

i was accidentally capturing the www dot

in part of my then you put then you put

the the the twitter.com

and that's not uh appears the username

oh but notice what i did so let me go

back to that if that's what you mean so

if i change the dot com to

uh com or org like i did before

i no no no no no

really really before

okay i don't want to try it

do you want to try asking in the chat

more specifically and maybe carter can

look through the previous examples if

that's okay that's okay okay of course

sorry for not following well let me let

me rewind for just a moment here

okay

let me go ahead and clear my terminal

and make one final refinement on this

twitter example it turns out that we're

being a little sloppy here even at the

end whereby dot is indeed too

accommodating of old characters indeed

it means any character there even if

it's not allowed so if the user did copy

paste a url that has a question mark or

a hash symbol or just really some odd

punctuation it might get included

accidentally in our parsing that is

extraction of the username and therefore

our answer is still going to be invalid

so i actually went into the

documentation for twitter.com and as of

today the only symbols that twitter

officially supports in usernames are a

through z

zero through nine and underscore our old

friend if you will so it turns out a

better approach here would be especially

if we know something about the domain

twitter specifically let's go ahead and

be more explicit so inside of my

parentheses let's additionally use our

old square brackets and specify that a

through z is allowed

or 0 through 9 is allowed or an

underscore and that's it according to

twitter's own documentation i should not

be as generous as any character i should

only allow these characters i didn't

need to specify capital a through

capital z because why i'm using

re.ignore k so i can handle uppercase or

lowercase insensitively so that's fine

so now let me go ahead and one final

time run python of twitter.com run https

colon

twitter.com somethinglikedavidjmalen

and i'll even put a trailing slash at

the end here

enter

that did not catch it so close here

how can i tolerate those stuff after the

username like a slash like was noted or

a question mark or a hash or something

else

i'm so close now

to tolerating the you the username and

some other stuff at the end yeah your

thoughts

nikita

and uh

yes

so i i think uh

still there

oh we lost your audio i think

let me afraid we can't hear you here so

let me rewind so let me recap what i did

let me go ahead and run python of

twitter.pi typing in https colon slash

twitter.com davidjmaylen but let me put

in a trailing slash as might be the case

enter and now it's ignoring me all

together so now that we know what

character characters to expect for the

username i think we can maybe even get

rid of this dollar sign why the dollar

sign is saying we have to match

everything up until the end of the

user's input but you know what

now i'm okay with there being something

a little more at the end of the url

maybe a slash maybe a question mark

maybe a hash symbol all of which are

valid symbols in a url but are not part

of the user's username but anything that

is a letter of the alphabet or a decimal

digit or an underscore will i know by

definition of twitter's documentation be

part of the username so now if i run

this one more time python of twitter.pie

enter https colon slash twitter.com

davidjmaylen with or without this slash

now

i indeed

damn it

um

i messed it up okay what did i do

apologies that was gonna be our final

flourish here

i'm sorry i see what i did wrong um

let me rewind if that's okay just so

that we get this right

so here we were even though you know

where this is going now

now let me go ahead and make one final

change to this twitter example because i

know a little something about these

usernames and i think i'm being a little

too generous now by just saying dot plus

at the end of the url because again dot

means any character but according to

twitter's own documentation twitter urls

can only contain letters of the alphabet

a through z decimal digits 0 through 9

or underscores and we've seen that

pattern before which is to say that if

there's other characters at the end of

the url probably they can be there but

they're not part of the username maybe

there's a slash maybe there's a question

mark maybe there's a fragment symbol a

hash all of which are valid symbols in a

url but are not going to be part of the

username so how can i go about

tolerating that well at the end of the

url let me use our square brackets again

and say a through z

0 through 9 as well as an underscore i

still want to capture the username so

let me surround it with parentheses

again

but let me also add a plus so that it is

still one or more of those characters so

i at least have a username there let me

go ahead now and i'm ignoring case so i

don't need to bother with uppercase

specifically it will be a case

insensitive search and now let's run

python of twitter.pi typing in a url

like https colon slash twitter.com

davidjaymailan with or without a slash

or other symbols i'm going to go ahead

and hit enter now and my user

thank you

i'm sorry i feel like now i'm just

wasting everyone's time my apologies i

screwed up

that's fine we'll we'll hit that

if everyone doesn't mind let me do this

one last time so that we can

all be happy i apologize

all right here we go

all right let me do one final version of

this twitter program that allows us to

be a little more exact when it comes to

these usernames so first let's make sure

that we

oh

let's do this let's start that way

because that part that change came from

a question so let's leave it like this

all right let's make one final change so

that we're being a little more

consistent with the official definition

of a twitter username right now i'm

being a little ah damn sorry this is

where it was

sorry everyone

all right let's make one final change to

this program so that we're being a

little more specific with the definition

of a twitter username it turns out that

we're being a little too generous over

here whereby we're accepting one or more

of any character i checked the

documentation for twitter and twitter

only supports letters of the alphabet a

through z

numbers zero through nine or underscore

so not just dot which is literally

anything so let me go ahead and be more

precise here at the end of my string let

me go ahead and say this

set of symbols in square brackets i'm

going to go ahead and say a through z

0 through 9 and an underscore because

again those are the only valid symbols i

don't need to bother with an uppercase a

or a lowercase c because we're using

re.ignore case over here but i want to

make sure now that i tolerate not only

one or more of these symbols here but

also maybe some other stuff at the end

of the url i'm now going to be okay with

there being a slash or a question mark

or a hash at the end of the url all of

which are valid symbols in a url but i

know from the twitter's documentation

are not part of the username all right

now i'm going to go ahead and run python

of twitter.pi one final time typing in

https colon slash slash twitter.com

slash david j maylen maybe with maybe

without a trailing slash but hopefully

with my biggest fingers crossed here i'm

going to go ahead now and hit enter

and thankfully my username is indeed

david j maylin so what more is there in

the world of regular expressions and

this own library not just re.search and

also re.sub there's other functions too

there's re.split via which you can split

a string not using a specific character

or characters like a comma and a space

but multiple characters as well

and there's even functions like re.find

all which can allow you to search for

multiple copies of the same pattern in

different places in a string so you can

perhaps manipulate more than just one so

at the end of the day now you've really

learned a whole other language like that

of regular expressions and we've used

them in python but these regular

expressions actually exist in so many

languages too among them javascript and

java and ruby and more so with this new

language even though it's admittedly

cryptic when you use it for the first

time you have this new foundability to

express these patterns that again you

can use to validate data to clean up

data or even extract data and from any

data set you might have in mind that's

it for this week we will see you next

time

we'll do the pickup

okay we're all set can we do q a and

then the pickup

max am i still alive

max

okay

all right so thank you so much for

joining us today we do have a few

minutes for a couple questions if you

would like uh trey can we go over to you

first

uh and the very last thing you said you

said something about separating the um

separating stuff

would you be able to use that with your

csv the thing you did last week would

you better use your regular expressions

with that as well yeah we could have a

really good connection so last week for

those unfamiliar we did file io we

focused on csv files comma separated

values which allowed us to store data in

text files using commas to separate them

trey we could use regular expressions to

parse those files but honestly it gets

painful quickly anytime some of the data

is quoted like number four privet drive

now your regular expression somehow has

to look for or not look for quotation

marks too and therefore treat the commas

separately so it's totally doable but it

ends up becoming pretty complex and so

that's why we would still recommend

using the csv module because someone

else has dealt with all of those

headaches

other questions

uh yeah michael

um

yeah so um first of all i want to say uh

thank you to you for doing these classes

it's really awesome to be able to um

learn this way

remotely and and so many people at once

sure um

the question i had was uh related to the

problem sets

um should we when we're going through

the the the problem sets should we limit

um

what we use to solve them to what was

what's been covered so far in the course

it's a good question um unless we

specify we don't necessarily check that

whether you are or not using more

advanced techniques in so far as each

problem set in each week is really meant

to reinforce certain lessons i would

probably encourage you to limit yourself

to the ideas from that week if only so

that you're really hammering in that

week's ideas um but we're not gonna uh

you won't lose credit for instance if

you're using regular expressions in week

two when really we didn't introduce them

until week seven

okay yeah that's kind of what i was

thinking

other questions time for a few more

yeah vishal

not a question but i just wanted to

thank you uh that uh you are teaching us

you are taking your time out of your

schedule and you are teaching us so i'm

just really grateful that you are

teaching us because i don't think that

honestly i would have been able to study

at such a prestigious college ever

i am just really grateful

and if ever i can do anything

for you

i am

not sure but if there is anything that

you can you want just let people oh well

thank you if you want you can have my

email as well that's very kind i haven't

really ever visited

uh in india you should definitely visit

uh it is a it is also called the city of

lakes so if you ever get a chance to

visit that

uh that that is in india uh you should i

i'll be more than happy to you can stay

at my house as well because well thank

you

thank you yeah no we we've missed

traveling around the world as we did

pre-covet so thank you for joining us

and for the kind offer we do hope to

make our way

to india and elsewhere in the world in

the coming years as things get healthier

maybe time for two more questions if we

could john

yes um

as far as regis expression um

the to limit the maximum and the minimum

amount of characters what if

you could have only

two characters to 16 characters or two

characters to eight characters yes

uh have i got the syntax for you this

one here so we didn't use it in any

demos it was just listed here if you use

curly braces you can specify a specific

number or a range of values for

repetitions so you pretty much have

everything available to you

and i hope folks won't mind that we'll

squeeze in one more question before we

have to uh power down here others

let's see over to

how about uh ivan over to you

yeah so um my question is about sets so

we have a nested set of sets okay so

basically how it affects the order of

groups it's like the whole one group

counting from the outermost set

or it just increments going to the

innermost set you know it's a good

question so for clarity if you're using

parentheses recall that are capturing

information uh you can nest those too

for whatever reason if you want honestly

ivan i always forget i think it's just

like grade school math where i think

they get numbered from outermost to

innermost from left to right um i would

google that if you don't mind like i

would google

nested

capturing parentheses order and see what

pops up that's the kind of thing too

where i try to avoid it just because it

makes you think but i think that's the

answer but i would double check myself

too

well if you don't mind we will post on

the course's website as before today's

souvenir photo thank you so much for

joining us for staying up so late thank

you for humoring me as i start to go off

the rails at the end and get confused by

my own examples it was a long day here

too but we'll clean all of that up when

the final version goes online you get

the uh

live uncensored version here but thank

you all so much we were are off next

week but we'll see you again for the

final weeks in two weeks time so have a

wonderful morning afternoon or evening

this was cs50

you

