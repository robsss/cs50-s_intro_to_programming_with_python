All right. Hello World testing 123. Can you hear me okay?

Well, so nice to see so many people waving.

It's been a couple of weeks since our last lecture, I should say from the get go.

That this might be our last live lecture. We might have one more next week.

It kind of depends on how much I mess up today, but we also have a few pickups.

But the course itself will officially be live in a few weeks.

It is already of course, but we're in the process of editing all this content.

So the new and improved versions of everything you've been seeing live will

be on netflix and Youtube and elsewhere in just a few weeks time.

So thank you for being with us these past several weeks.

We will email you later this week or early next week

if we think there'll be a final live shoot next week.

Beyond this one.

This is CS fifty's introduction to programming with python.

A few F Y I S for those who might be new to the group.

Everything that will do today will be at this U. R. L.

Here including today's slides, source code that I've written in advance.

If you'd like to follow along if carter you wouldn't mind pasting that into the chat.

Uh those of you who are less familiar with zoom

the chat window can be a little noisy,

a little annoying with its pop ups and its alerts.

So if you go to your zoom chat window on a laptop or

desktop not mobile and find the little triangle in the top left corner,

most likely there should be a pop out option or

something similar in your own human language that you will,

that will let you build you to pop out that window and then you can

just drag it into the bottom corner of your screen and essentially just ignore it.

We call this a workaround.

Beyond that.

You can use code dot CS 50 dot io during class today,

which of course is visual studio code in the cloud.

Just requires a free github account. Um, there is no expectation as always

that you need to follow along during class

trying to type everything I'm typing because indeed

the goal of today as with all of these live lectures is intro

introduced the concepts walkthrough demos on my screen and it's in the courses.

Problem sets either now or some weeks from now, if you decide to dive into them

that you really will get your own hands dirty.

So don't worry if you fall behind with the actual code itself,

we have this tradition of course, of a souvenir photo.

Let me change my own screen here.

If you're comfortable, turn on your camera at this point,

let's not screenshot just yet.

Turn on your camera if you'd like to opt

in to appearing in a souvenir photo on the internet

and go ahead and turn your camera off.

If you'd like to opt out and I think we're

good for some waves put on your best internet smile,

maybe a wave of the hand or

funny gesture

any way you'd like to be immortalized if you're unfamiliar with this tradition.

Our colleague function is tabbing through all of the zoom pages of tiles right now.

Hopefully we'll catch you at your best but you really only get one shot at this.

So hopefully it'll work out

if you haven't noticed when we post these online afterward at that same zoom U. R. L.

As before.

There's not only each of us in that photo whose cameras are on but there's a certain

someone named Waldo or depending on your country Wally so keep an eye out for him.

A guy in a red white striped shirt. I think we're good.

So thank you so much to our friend wrong shin will post

that afterward and give us just a moment to get settled.

What we're gonna do today is two things.

One,

we're gonna have the full lecture

on something called object oriented programming.

But first we're gonna spend maybe 10 or so minutes

introducing and filming some content that's actually going

to go back and be added to.

What was lecture one weeks ago.

I realized too late that it would be good to mention a particular topic then.

So what we're gonna do is film these 10 minutes in advance,

then we'll take a short break and then we'll start

with the object oriented stuff but we wanted to do this

today altogether Because you're gonna see this same syntax today

that you ideally would have seen back in lecture one.

So give us just a moment to get ready.

So just to give you a sense of what we're about to

do and this is literally just a youtube video of me.

So if you're seeing two of me, that's not you, that's me.

I'm standing in front of a paused youtube video.

And at the end of lecture one weeks ago, we left off with this example here,

this was a file called parody dot pi parody

refers to whether something is even or odd.

We had this main function at the top that first prompted

the user for data with the input function asking what's X.

It then converted it to an ent we assumed it would be an end,

We didn't deal with exceptions back in lecture one

and then we just did this on line three.

We said if X is even print, even else print odd.

And our implementation of that here was this function is even

that takes in a variable end and then returns n module.

02 equals equals zero.

Which is a clever way of saying if n divided by two has a remainder of zero,

return true, otherwise return false.

This was the final example.

We did in a lecture one about conditional and

conditions were all about if l if and else

turns out there's another newer way to implement the same

idea of condition knows that you're about to see today.

So give us just a moment. We'll reset

and record this part here,

wow.

So it turns out there's another syntax that you can use to implement

the same idea of a conditional whereby you do something optionally based on the

answer to some boolean expression,

and the key word that you can now use in recent versions of python is called.

This match match is a mechanism that if you program before

is similar in spirit to something called switch in other languages,

for instance, let me go ahead here and close out parody dot pi.

And let me go ahead and create a new file called house dot pi.

And in house dot pi. I think what we're gonna do is try to implement a program

that prompts the user for their name and that just outputs what

house they're known to be in in the world of harry potter.

So for instance, let me go ahead and do this.

Let me give myself a variable called name,

set it equal to the return value of the input function, and I'll say something like,

what's your name, question mark.

And then after that,

I'm just going to use a traditional if l if

else construct to decide what house this person is in.

So let me say if name equals equals, say harry as in harry potter.

Well, let's go ahead and print out Harry's house,

which is Gryffindor in the world of harry potter.

L If the name is instead Hermione,

then go ahead and print out also quote

unquote Gryffindor as she's in the same house to

L if name equals equals Ron. Let's go ahead and similarly print out

Gryffindor, quote unquote.

And let's make this a little more interesting. Now, L if name equals quote unquote.

How about Draco Draco malfoy in the books?

Let's go ahead and print out quote unquote slither in.

And just in case someone else's name gets inputted for now,

let's just suppose that we don't recognize them and say by default else, print out,

quote unquote.

Who, question mark, just to convey that we don't actually have a hard coded response

to that particular name. Alright, let me go ahead and run this. Here.

I'm gonna go ahead and run python of house dot pi.

Sorry guys,

sorry, quick fix here. This got saved in the wrong directory. Oh, there we go.

Okay,

let me go ahead now and run this as python of house dot

pi enter and I'll go ahead and type in something like Harry.

And while we see that Harry is indeed in Gryffindor.

Let's run it one more time, python of house dot pi, let's type in Draco this time,

slytherin. And now let's type in an unrecognized name.

Let's go ahead and rerun python of house dot pi.

And let's go ahead and type in pad MMA enter and who?

Because we haven't actually hard coded with an L if condition in

this case what house pad MMA is meant to be in.

Alright, well, it turns out there's other ways to implement this.

Indeed,

there's some redundancy here in that we're checking if

Harry or Hermione or Ron or all in Gryffindor.

I feel like we can at least tighten this code

up a little bit using techniques we've seen already.

So, let me go ahead and do this. Let me go up here and instead do something like this.

Let's get rid of these two blocks of L ifs

leaving just Harry's for a moment and let's use that or keyword again and

say or name equals equals quote unquote Hermione or name equals quote unquote Ron,

thereby consolidating all three cases.

If you will into just one if statement,

then we still have a separate L lift for Draco because he's not in fact in Gryffindor.

And then the final else to catch anyone else.

All right,

let me go ahead now and run this version of the program python of house dot pi.

I'll type in Hermione this time. She too is still in Gryffindor.

Let me try it with Ron. And that too. Still seems to be correct.

Well, it turns out there's another approach altogether.

That can perhaps make your code a little less verbose.

You could imagine how complicated this code might get if

we had not just Harry and Hermione and Ron,

but a whole bunch of other names as well.

For Gryffindor, for slytherin and for all of the other Hogwarts houses.

So you can imagine that code is getting pretty unwieldy pretty fast.

Well, it turns out another technique you can use is indeed this keyword called

Well it turns out another technique you can use is indeed this keyword called match,

which is very similar in spirit,

but the syntax is different and allows you to

express the same ideas a little more compactly.

So let me go back to how stop high and let me

propose that I get rid of my current if LF else approach

and instead do this literally use the keyword match and type the

name of the variable or value that we want to match on.

And then I'm gonna go ahead and include a colon.

And then underneath that I'm going to include literally a keyword called case.

And the first case I want to consider is going

to be harry and I'm gonna put Harry in quotes

because it's a string or a stir and I'm gonna

have another colon at the end of this line.

And indented under that one, I'm gonna go ahead.

And for now print out Gryffindor which of course is harry's house.

Otherwise I'm gonna have another case for quote, unquote Hermione.

And similarly, I'm going to have under that indented print quote,

unquote Griffin door close, quote.

Now I'm gonna have another case for Ron also in quotes with a colon.

Now print, quote, unquote griffin door.

And now I'm gonna have other case for let's say Draco,

this one gets a little more interesting because Draco of course now is in slither

in and then I'm gonna go ahead and leave it as that for now.

So let me go ahead and save this file and go back down to my terminal window.

Running python of house dot pi enter and let's go ahead and try harry.

And he seems still to be in Gryffindor.

Let's run it again for Hermione enter Gryffindor.

Let's skip ahead to Draco and typing Draco's name. He is indeed in slytherin.

Now, let's try another name that we haven't handled a case for like padme again,

enter

and we're just ignored.

There's no output whatsoever because there wasn't a case for pad MMA.

Now we could of course go back in and explicitly add one for pad MMA.

But what if we similarly to the else construct,

just want kind of a catch all that

handles anyone whose name is not explicitly specified.

Well, turns out the syntax for that using this new match statement,

is to still have another case,

but then to use this single underscore character which is used in other context,

in python, but for here it's meant to say whatever case has not yet been handled.

Go ahead and print out as we did before, for instance, quote, unquote. Who

with a question mark at the end.

Now let's go ahead and rerun this

python of house dot Hi Altai Patmos name again.

And this time I think we're at least gonna get an explicit response indicating who.

Whereas previously we did not have the equivalent of that.

Now, I think we've regressed a little bit.

We went from tightening things up by putting Harry and Hermione and

Ron all in the same line in the same if statement.

But here we have now three case statements again for all three of those,

we can tighten these

this code up as well, but the syntax is going to be a little bit different.

I'm gonna go ahead and delete these two middle cases for Hermione and Ron.

And then up here next to Harry's name, before the colon,

I'm gonna go ahead and use a single vertical bar and then a quote, unquote Hermione,

then another single bar, and do quote unquote Ron.

And this is how using this relatively new match statement,

you can say the equivalent of Harry or Hermione or Ron,

but more concisely than you could using an

if statement alone as we implemented it previously.

So, now, one final run of the program with python of house dot pi

let's make sure that Harry is still in Gryffindor.

Let's make sure that Hermione is still in Gryffindor,

let's make sure that Ron is still in Gryffindor.

And indeed all three of them are.

Now, as always with python and programming more generally,

there's going to be different ways you can solve these problems.

This is just another tool in your toolkit. Arguably it has tightened things up.

Arguably it's perhaps a little more readable because

there's a little less syntax going on,

a little less duplication of equal signs and elephant, Elephant,

elephant all over the place.

But ultimately, this would be an equally correct approach to that same problem.

But it turns out with the match statement,

you can do even more powerful forms of matching as well here.

We have used it simply to implement the same idea as that if l if else, construct.

And it's worth noting if you've programmed in some other language,

the syntax here is indeed correct.

You do not need for instance a break statement as has been

peppered throughout and you don't need

something like default or something explicit.

You indeed just use this underscores your catch all at the end of the match.

Okay, let me break the fourth wall. Hopefully that was clear.

But let's pause here and see if there are any questions on match and

then we'll do a few hellos and then we'll dive into object oriented programming.

Any questions or confusion on match or case that I can clear up here.

Yeah. Ansel

Sure. I think we can hear you.

Yes.

Hi, David.

So this has to do with or but what if it was And

what if you were trained to me

several conditions in this case you can't use and what case is going to be used for.

Is this or this or this other thing And that's sensible in the sense that it wouldn't

really make sense for a variable to have this

value and this value and this other value.

Right? It's got to be one or the other. Typically

there is some slightly more sophisticated functionality for the match statement.

But really the intent here is to say or if you

do need to express the and logic that you're describing,

it's best to go back to the more familiar if LF and so forth,

which is a little more versatile because you can ask any questions you want,

even ones that don't involve matching on strings or values more generally

other questions on match or case.

Ah, Yeah.

Um, so

I noticed that you've used all for so harry or harmony or wrong

um,

in other programming languages they tend to use or so two slashes.

Is that, is this a different type of board to the ones there? Because

if you use an oran, let's say java, it's

to do with true and false

news, but I'm not sure.

Yeah,

I was talking with a colleague just before this because it strikes me as strange to,

I don't know why they used the vertical bar.

I would have preferred personally. They just use or for instance,

there is likely something called a pep python enhancement proposal,

pe pe that probably elaborate on why this choice was made.

I haven't had a chance to pull it up myself,

but that too is a distinction with C and C plus plus and java.

They tend to use two vertical bars to indicate logical

or whereas a single vertical bar typically is something called

bit wise or where you can manipulate individual zeros and

ones As for why it's this way in python,

I don't know, but this is one of those just because in essence,

this is the way python chose to do it.

Maybe it's because it's a little more succinct honestly than two vertical bars.

But I'm just guessing

how about a couple more questions on match

or case. Yeah,

I'm saying it right.

Yes, we can hear you.

My question was does this look for an exact match?

And what if if we want to have a similar,

somewhat similar kind of a match?

Not an exact much

really good question short answer. You can do that and more with match.

I wanted to show just the basics here.

So as to show an equivalent to the if LF approach that we previously did.

But yes, if you actually read up on the match keyword,

it's way more powerful than the switch statement is in languages

like C and C plus plus and java and so forth.

I just didn't want to get into the weeds here.

But yes,

you can do things similar in spirit to

regular expression matching and patterns more generally.

It's actually pretty darn powerful.

But feel,

remember now we're filming this for lecture one so we

didn't want things to get too scary too fast.

Another question from the group on match your case Christopher.

Yes, we can.

So I want to know on the case.

Can the kids got to get a

or else or else stealing to end it or you can just be kissed

when you are done?

Oh, uh, that's a good question.

The case with the underscore I believe has to be at the end.

I haven't tinkered enough to know if it could be higher.

I'm not sure what that would mean logically.

Um,

so for now assume that this is indeed the default case

that goes at the bottom rung action just for fun.

Do you mind kind of googling to see if that's

or maybe carter just so we don't distract.

Um well,

let me see if I'm carter can chime in Christopher on zoom

just to clarify that in a bit in the chat window.

How about one more question then we'll

do some hellos and then object oriented programming

questions on match your case. Yeah, Michael.

I got

Yes, we can hear you now.

Okay.

Um, sorry, I was, I was wondering how you would use or if you can use um,

like lists or uh, couples in in the case, in the match case.

Yes. So similar in a house question. You can actually do that too.

So you can match that a variable or a value. Indeed.

Lines up with the contents of a list or a couple or another data structure.

So here too is how matches way more powerful than switches in java C and C plus plus.

Let me defer to an online reference of carter.

You wouldn't mind googling and offering something that looks pretty accessible.

Um You can indeed do that too.

Indeed.

All right,

well let me go ahead and put if we could function put everyone's hands down,

feel free to continue asking questions of carter and the team in the chat.

If you would like,

would anyone now like to just say hello and where you are

in the world just to kick things off as we normally do.

Then we'll reset and dive into object oriented programming.

How about a hello world from

let's see.

Here we go. How about Gustavo?

How you doing? Hello,

thank you. Professor Maitland for everything you guys do.

We are in Memphis Tennessee.

Thank you. Nice to see you both.

One of you is currently blurred and I think your camera is fighting with the focus.

There we go.

Nice to have you both with us today.

Thank you.

And let's see how about another Hello world from the group chris

Now let's go to Yeah.

Yeah.

Hi, can you hear me? We can. Hello, where are you from? Oh yeah.

Hi I'm chris I'm a filipino living here in the US.

So I was a s a p sales and distribution software engineer.

The reason for me to join here is to upscale underneath

And I would like to thank David and everyone from

CS 50 for this opportunity and you guys are awesome.

And let's enjoy learning everyone Well, thank you. Welcome to the class as well.

How about one more?

Hello, If we couldn't function, we might have another mic Still open Putnam,

if I'm saying it right, would you like to say hello?

Well,

yeah, we

can. We can. Yes,

Hello, my name is

and I'm from India. Thank you so much for taking the time,

of course, welcome to the class as well.

Well, let me take a step back and go get ready for object oriented programming.

If you're feeling really good about the match statement,

even if you have questions, because it was pretty straightforward.

Keep in mind that that was week one,

so we're about to accelerate to what is now week eight.

So not to worry if it feels like, wow,

you really got hit with a lot of more technical content quickly.

Again, we've had the past several weeks of building blocks.

Again, this stuff will really sink in once you tackle the courses,

problem sets and write code yourself,

but among the goals for today are to introduce you to a different paradigm

of programming that we've actually been using a little bit along the way,

we just didn't call it object oriented programming.

But this is such a common paradigm in languages

like java and python and so many more nowadays.

That will give you a sense of what problems it solves and

how you can use it ultimately to write more complicated programs,

but in a way that makes them easier ultimately to right.

All right, give me just a moment to reset and will begin momentarily.

All right. This is CS fifty's introduction to programming with python.

My name is David Malin and this is our week on object oriented programming or 00. P.

It turns out that in the world of

programming there's different paradigms of programming languages.

There's different ways of solving problems with code and it's a little

hard to see this at first if you've only learned one language,

but over time if and when you learn other languages besides python,

you'll start to notice certain patterns

and certain capabilities of some languages,

but not another.

Thus far within the world of python.

You and I have largely been writing code

that's procedural in nature whereby we're writing procedures.

Were writing functions and we're sort of doing things top to bottom,

everything is step by step by step as you would expect in general from an algorithm.

But along the way,

we've actually dabbled in another paradigm known as functional programming

with python whereby we've been able to pass functions around.

We even had an anonymous function some weeks ago and

that's evidence of features of a functional programming language,

even though we've just scratched the surface there of

today.

We focus on another paradigm in this one

in more detail namely object oriented programming.

And now,

while some of you might have prior programming

experience and have learned languages like java,

which are by design,

fundamentally object oriented python indeed allows you a bit of flexibility

when it comes to how you solve problems with code.

But it turns out 00 P object oriented programming is a pretty compelling

solution to problems that you invariably encounter as your programs get longer,

larger and more complicated.

So indeed,

Opie for our purposes is going to be a solution to

a problem that builds on so many of the lessons passed.

So let's go ahead and do this.

Let's start by writing a program very procedurally by opening up V. S code here.

I'm gonna go ahead and create a program called student dot pi.

And in this program I want to do something relatively simple initially,

as we might have done some weeks ago now where I just ask a user for their name and maybe

in the context of the harry potter universe there house

and just print out where that student is from.

And let's gradually enhance this program by adding more and more

features to it and see if we don't stumble upon problems

that up until now, we might not have had very elegant, well designed solutions to,

but if we introduce explicitly object

oriented programming is a programming technique,

I bet we can clean up our code and

set the stage for writing even more sophisticated programs,

longer programs down the line.

So in student dot pi let me go ahead and do a name variable,

setting it equal to the return value of input and

just prompt the user for their name like this.

And then let me go ahead and do the same for a house

variable and prompt the user for their house using input like this.

And let's do something super simple. Now let's just go ahead and print out an F string

that says something like name from house.

Just so that I can confirm that the contents of these variables are indeed,

as I expect, I'm not gonna do any error checking or trimming or anything like that.

For now, I'm really just gonna spit back out whatever the user just typed in.

All right, let me go ahead and run python of student dot p

Let's use our go to like harry as in harry potter from Gryffindor.

And when I hit enter now,

let's see if I see that Harry from Gryffindor is indeed the case.

All right.

So I think we have a working program at this point,

but let's now introduce some of those lessons learned way back

from week zero where we started writing our own functions.

Not necessarily because it solves the problem more correctly.

I dare say this is correct as is

but it begins to give us building blocks that we can extend.

So as to solve more complicated programs. So let me go back up to student dot pi

and let's go ahead now and do this.

Let's put the entire logic I just wrote inside of our typical method called main.

And let me invent those three lines so that

at least there now combined into one main method,

but instead of using input online to an input online.

Three.

Why don't we go ahead and assume for the moment that

we've got some function called Get Name in the world.

And let's go ahead and assume we've got another function like

get house in the world that don't take parameters but their

purpose in life is by their names going to be to

get the user's name and to get their users house respectively.

And then I'm going to print out the exact same f string as before.

I of course need to implement these functions now.

So let me go lower in my file and define a function called get underscore name.

Nothing in these parentheses because it's not going to take a parameter

and I'm gonna go ahead and do something like name equals input,

quote unquote name, just like before.

And then I'm gonna go ahead and return name. So it's a super simple function but it's

an abstraction.

I now have a function called Get Name whose

implementation details I don't have to care about anymore.

I just know that the function exists and I can tighten this up.

In fact,

I don't really need a name variable on line eight if I'm

immediately going to return that same name variable on line nine.

So let me just tighten this up a little bit even though it doesn't

change the functionality and just immediately return

the return value of the inputs.

Uh function call here.

Let's do something very similar now forget House,

which will similarly take no arguments.

I'm gonna go ahead and return the return value of input this time prompting the

user for their house and they need one final detail at the very bottom.

Let's continue our habit of doing.

If the name of this file equals equals quote unquote Main.

Then let's go ahead and actually call main and recall that we have that in place.

So that if this eventually becomes part of a module, a library of sorts,

I don't accidentally call main blindly.

I only do it if I mean to run Main from the command line

on this file.

Alright.

So if I didn't make any mistakes here, let me go ahead in my terminal window again.

Run python of student dot pi enter.

Let's type in Harry, enter.

Let's type in Gryffindor,

enter and we're set Harry from Gryffindor seems to still be working.

So we haven't really solved the problem anymore correctly,

but I've laid the foundation to maybe now do

some more interesting things because I've had these building blocks

in place.

All right, But let me propose that we could be doing this a little bit differently.

Get name.

Get House is fine, but at the end of the day,

I'm really trying to get a student from the user, I want their name and their house,

not just one or the other.

So maybe it would be a little cleaner still to define a function called

get students and let get students do all of this work for us.

Now, theoretically get student could call get name and could call get house.

But because these functions are so short,

I think I'm okay with just defining one function called get student.

That similarly won't take any arguments, but it's going to do two things.

It's going to get the student's name by prompting them with input as before.

And it's going to get the students house by also prompting them as before.

And then

now

I want to return the student.

But I think I might have painted myself into

a corner here because I now have two variables.

Name and house.

And yet up until now we've pretty much returned one or the other,

we've returned one value.

So any suggestions for how we can perhaps

solve this problem that I just created for myself

whereby I want to return really a student,

but I currently have a name variable and house variable.

I'd minimally like to return both of those.

Any instincts for how we might solve this even if you've not seen it before,

Mohammed your thoughts,

I believe that we can return a dictionary, include the name and the house.

Yeah,

so we absolutely could return a dictionary addict object

in python whereby maybe one key is name,

one key is house and the values thereof are exactly the values of these variables.

So we could totally do that.

I worried that that might be getting a little complicated.

I wonder if there's a simpler way

instead any other instincts, even if you're not sure it would work.

How about

what do you think?

Written by

return both name in the house.

I like the sound of that, it sounds simple,

I don't have to figure out what a dictionary is gonna look like.

And in fact this too would be a valid approach.

Even if you've not seen this before,

it turns out in python that you can kind of return

multiple values but that's a bit of a white lie.

Or we could take Mohammed's approach of actually returning

a dictionary and putting multiple keys they're in.

So here again we have yet another example of how you can solve the same problem

in at least two ways and I dare say we're about to see even more.

So one way you could solve this problem whereby you want to return multiple values

would be to do something like this.

I could go ahead and literally return not just name,

but I could put a comma and also return House.

This is not necessarily something you can do in other languages,

if you have programs in other languages before, it depends on the language,

but it looks like thanks to this comma,

maybe I can in fact return two values is actually proposed.

Well, if I'm returning two values in this way, online 10,

how do I get both values at the same time?

Well, there's a couple of ways, let me go up to my main function.

I know minimally, I'm gonna have to change the get name and get house to get students,

but what am I going to store the return value in?

I think I could actually do this and we

have seen this technique before where you can unpack,

so to speak,

sequences of values that are coming back and indeed consider this to be exactly

that name comma houses some kind of sequence that I'm returning of values.

Name comma. House.

So if I want to unpack those in store the return values into separate variables,

I can in fact use the commas on the left hand side of my assignment operator,

the equal sign

to do just that now to be clear,

I don't need to call these variables name and House here,

I could simplify this and use just end here and h

here and then I could return just N and H.

But I would argue that's not very clear to the reader as to what's going on.

So I think in this case,

even though it's a coincidence that I've used the same

variable names and get student and get maine in maine

it's a little more readable to someone like me. So I'm gonna leave it as is

well, let's go ahead and see now if this works.

Let me clear my screen down here and run python

of student dot py enter let's again type in Harry.

Let's again type in

Gryffindor or enter.

And voila we still see that Harry is from Gryffindor,

but what are we actually doing here?

What are we actually doing by returning this value? Well, it turns out

that what we've just done

is used a couple a tubal is another type of data in python

that's a collection of values, X, comma y or X, comma Y, comma Z.

It's similar in spirit to a list in that sense,

but it's immutable, it's not mutable.

Now,

what does that mean a list as we've seen it before is

a data structure in python that you can change the values of,

you can go into bracket zero for the first location and change the value there,

you can go to bracket one bracket to bracket

three and actually change the values and lists,

but if you have no intention of changing the values

of variables and you want to return effectively multiple values.

You don't have to even return it as a list.

You can return it as a couple instead just by using a comma

and it turns out we can make explicit that here's the white lie.

I'm not actually returning two values per se whenever

you use a comma in this way online nine,

you're actually returning one value which is a couple

inside of that couple now are two values.

So it's similar in spirit to returning one list with two things here.

I'm returning one couple with two things and the mere fact that I've used a

comma and nothing else tells python that I indeed want to return a couple.

But there's more explicit syntax that we can use instead,

I can actually more verbose lee put explicit

parentheses around the values of this couple.

Just to make more clear to me to the reader that this isn't two values per se.

This is one value with two things inside of it.

And what I can actually do then too is I don't have to unpack this up here, so to speak.

I can actually go up here and maybe give a more apt name like students and I

can name the value or rather name the variable

in which I'm storing the return value of,

get students as quote unquote student.

So maybe this is a little better design now because

I'm sort of Abstracting away what a student is.

It's implemented at the moment as a couple with two values.

But at least now I have a variable called what I mean,

a student but there's gonna be a catch online.

three.

I still want to print out that student's name

and their house but I don't have a name variable

anymore and I don't have a house and I

also don't have a dictionary as was proposed earlier.

So I can't even go at those keys by name.

But what a couple is.

It's very similar in spirit to a list but it is indeed just immutable.

And what I mean by that is I can still

index into it numerically by saying students square bracket zero

for the item in the first location in that couple.

And then over here instead of house, I can say student bracket one

student bracket one is going to give me the second location in that couple.

Let me go ahead and clear my terminal window again.

Run python of student dot py let's type in Harry,

let's type in griffin door enter and we still have some working code.

Let me pause here now and see if there are any questions on

this technique of returning a tubal and indexing into it in this way.

Yeah Gene question

what is the difference between a list and that couple

couple. A good question. A list is a sequence of values. That can be changed.

You can go into location zero or one or two or onward and actually change the value?

That's in it. We're about to see with a couple. It's immutable.

You cannot change its values once you create it as by returning it as I did. That's it.

That is the tubal you are stuck with. That's a good thing.

Sometimes if you want to program defensively and make sure that you

or some other programmer can't change the values inside of some variable.

Or it could be constraining.

If you actually want to be able to change the values, then you can't use a couple.

You're gonna have to use a list instead.

Other questions on this. Use of couple.

Yeah. Emmanuel.

Let's see Emmanuel.

Um

Mhm.

Sorry. Ah

that's okay. We can hear you now.

I didn't have a question. Oh no. Okay. Just saying hello. Nice to meet you.

How about one other question on couples? Yeah.

Sorry, I dropped my hand

my hand. Okay, well, hello to you too. How about one more question or heck, one more.

Hello?

How about Sebastiano if I'm saying it right.

Uh Yeah. Um I just uh what's the I guess what's it like?

Actually use case where you would use a couple versus

you know,

a list or something else? That's similar.

It's a really good question. When would you use a couple versus a list?

When you want to program defensively or in general when

you know that the values in this variable shouldn't change.

So why would you use a data type that allows them to be changed?

It just invites mistakes. Bugs down the line.

Either by you or colleagues who are interacting with your code.

So tubal is just another way where you can

increase the probability of correctness by

just not letting anyone yourself included,

change the contents there in.

So it's just another tool in your toolkit.

But let's make clear then what I mean by immutable again,

I claim that immutable means that you cannot change the value.

Well, let's go ahead and try to do this.

Let me go ahead and run this program once more as is python of student dot p

Let me go ahead and type in, for instance,

how about Patmos name?

And I'm gonna go ahead and say that pad, mas in Gryffindor as in the movies.

And we see padme a from Gryffindor.

But technically I went down this rabbit hole

and looking at harry potter more closely,

technically in the books, padme I believe was from raven claw.

So this is actually a mistake or an inconsistency between the movies and the books.

Let's see if we can't fix this inconsistency in our code.

So how about we do this? If the student's name that's inputted equals pad MMA.

Why don't we override whatever the whatever the houses and change it to be properly,

Gryffindor?

Let me go ahead and do if

students now, If I want to get at Patmos name,

I'm gonna have to do student bracket zero.

I have to know what location the name is in in this topple.

But if that value equals equals pad, MMA. Let's go ahead with this.

If statement and make a change, let's change the students for back at one value.

So the second value for zero indexing.

Let's change it to be another house in the world of harry potter called raven claw.

So I'm just fixing maybe the user's input. They watch the movie.

So they type in padme a Gryffindor. But in the books it was pad MMA from raven claw.

All right, let me go ahead and go down to my terminal window.

Clear my terminal and do python of student up.

I enter I'm going to do harry as well as Gryffindor

just to demonstrate that that is still working as intended.

Let me clear my screen again though and run python of student dot pi on pad MMA.

And I'll put her to in Gryffindor as in the movies. And hit enter

and now I just see a big mess of errors on the screen.

Some kind of exception has been thrown. And indeed a type error has happened.

I'm using a data type wherein there's an error. And what is that error?

Well, couple object does not support item assignment.

It's a little arcane lee expressed that is that's not really very user friendly.

But if you think about what those words

mean topple object does not support item assignment.

So assignment is copying from right to left. So somehow that's invalid.

And here is a manifestation of the mutability of couples.

You cannot change location zero or one or anything inside.

That is a feature that is the design of a couple.

So if I want to override that,

I think I'm going to have to use a different type of data that we've used before,

namely a list.

And that's fine if you want to enable yourself and colleagues

using your code to change the contents of that container.

Well we can go ahead and return not

a couple using explicit parentheses or no parentheses.

Just the comma.

But I can use square brackets and if I'm

using square brackets on the left and the right.

This is indeed explicitly a list.

Same idea. But it's mutable. That is to say you can change the contents of a list.

So making no other changes.

Just returning a list with square brackets instead of

a tubal with parentheses or just the comma.

Let me go ahead now and run python of student dot pi enter

let me type in Harry and griffin door again. That's still working.

Good to see. Let me run this once more and type in pad. MMA and Gryffindor.

As in the movies. But no. Now we've corrected it to be padme a from raven claw

as in the books instead.

Any questions now on tuttle's versus lists or

this idea of immutable bility versus mutability.

Yeah. Leila if I'm saying it right.

Oh.

Uh huh.

Hi, extra la la

hello can be used nest tackle in patterns like a nest placed.

Absolutely.

You can have not only nested lists in python where one

of the elements in a list could be another list.

So you have some square brackets out here,

you might have some other square brackets inside.

You can absolutely do the same with a couple as well.

There's no constraint on the types of values you can put in there.

We've not had occasion to do that in this case, I'm just returning a simple,

simple couple with two elements. But yes, you can absolutely do that too.

Other questions on couples versus lists.

Yeah. Remy over to

um Please I want to um make some clarification.

Is that um the square bracket bracket is used for the least.

And the bracket is we use for the taco.

Can you say that again? The audio broke up a little bit.

Okay. Um

I want to know if the square bracket bracket is used for

only for the list and the bracket is used for the taco.

How do you know that? This is the case?

Mhm.

Okay. For example, um when I see the square bracket um is there many use for the list?

Oh, a really good question uh sort of.

So when you create a value, like a list,

you use square brackets and that would indeed be a visual indicator.

That this is definitely a list.

If you instead see parentheses,

that's a visual indicator when creating a value that it's definitely a couple.

However, somewhat confusingly,

both lists and couples use square brackets when you access the contents of them.

When you index into them at location zero or location one,

you always use square brackets.

So that's the distinction there. Good question.

Allow me to propose. Now if I may that we solve this problem yet another way.

And let's see if we're either making things better or for worse than us

recall that dictionaries or dict objects also exist in python

in a dictionary is this collection of keys and values.

And the upside in particular of a dictionary is that they have better semantics,

right?

You don't just have to assume that

a name is always going to be at location zero.

House is always going to be at location one.

I mean that's the kind of thing, especially if you have 34 or more values.

Eventually you or someone is gonna get confused and forget what the order is.

And you're going to write buggy code.

So a dictionary is a little more powerful

and that you can semantically associate keys,

like little descriptions with the values,

those keys and those values respectively.

So let me go ahead and do this and we can do this in a few different ways.

But let me propose that we focus on get students here.

And let's go ahead and do this. Let me go ahead and

delete the implementation of get student as is

let me create a student variable and initialize

it to an empty dictionary and I can do that with just two curly braces here.

And then let me go ahead and set two keys inside of that dictionary.

Inside of the student there will be quote unquote,

a name key and the value of that is going to be whatever

the return value of input is when I prompt the user for their name

and then the house key inside of that same student dictionary is going to

be the return value of whatever the user types in for their house.

And lastly I'm going to go ahead and return students.

So now I am literally returning one thing still but this time

it's a dict rather than a couple rather than a list.

But there's still two things in it technically for things if you

count the keys and the values but there's two key value pairs.

Now my code up here is gonna have to change a

little bit and let's simplify this and remove for instance now the

pad MMA if statement just to focus on what's changing at hand

and let me go ahead now and leave line to alone.

I'm still gonna have a student variable that

gets assigned the return value of get students.

But what I want to do here now is actually access

the keys inside of that dictionary.

Not by numeric index which was for couples and lists

zero and one but by way of their keys.

Now normally I might be in the habit as I personally am of using double quotes,

quote unquote name inside of there and quote unquote house inside of there.

But before I even run this code and show you a mistake. See an error on the screen.

Does anyone want to call out what I have done wrong here?

This is just an F. String.

I just want to print out the value of the name key,

the value of the house key in this dictionary.

But Aditya what have I done wrong?

Um

Yeah, so I think you should use that capital like name and house here. I mean

to

return it

in the apprentice statement so not a bad idea but

I don't have to do that here because notice on

line eight and nine even though in english I did

prompt the user with capital name and capitalized house.

The the the keys that I put those values in just by convention are indeed lower case.

So I was trying to be grammatical in terms of english on the right but it's

pretty conventional to use all lower case in python for keys and for variable names.

So I think I'm okay with using lowercase name and lowercase house.

Another thought on what I have nonetheless done wrong online. Three Alex.

Yeah, thank you. So you should specify the zero after the name and after the house.

Sorry what should I do after that?

You should specify 00.

So I think not in this case recall that when we introduced dictionaries that use keys

and values and those keys are typically strings

or stirs themselves descriptive strings like name,

quote, unquote and house quote unquote.

We actually get out of the business of using zeroes

and ones and twos and threes because those numbers,

those numeric indices are typically used with couples and with lists.

So let me call in one other person here. What seems to be wrong with line three.

I'm so close though Poonam your thoughts

and I'm excited

indeed.

Your audio is a little garbled for us but I think I heard double quotes

and single quotes so I'm going to assume

that indeed you've identified precisely the issue.

I'm just gonna confuse python right now.

Even though this is an F string inside of double quotes prefixed with an F.

I can't actually use my double quotes inside my

double quotes because that's going to potentially confuse python.

Indeed if I run this program now python of student dot pi and hit enter.

I get a syntax error So the program didn't even run fully.

It just couldn't be understood because it got confused by those double quotes.

So the simplest fix here would indeed just be to use

not double quotes but single quotes around the keys

or conversely flip the double quotes on the outside to single quotes,

then use double quotes on the inside.

You just want to be consistent. So a subtle detail.

But again, this is now specific to dictionary syntax.

This isn't fundamental to how we're solving this current problem at hand.

All right, well let's go ahead and try this.

Let me go ahead now and run python of student dot pi.

Let's go ahead and type in Harry.

Let's type in Gryffindor and hopefully Harry is

back from Gryffindor or no syntax errors,

no other errors.

I think I'm back in business here.

And what I do like to be clear about using a dictionary

is that it is allowing me just better semantics.

Again, I don't have to remember memorize document that zero is name, one is House.

Instead name is name and House is house.

It's just a little clear, a little more expressive.

So that's generally a good thing. Especially if we stored more data about students

than just their name in their house. If you had three fields 45, 10 different fields

no one's gonna want to remember or be able to remember forever which is zero,

which is one which is two and so forth.

Better to introduce

names like name and House in this case but let me tighten this up further and indeed,

I'm typically in the habit of not introducing variables

unnecessarily unless they make the code more readable.

And an alternative way to format the same code would be this

strictly speaking, I don't need to create an empty dictionary,

then add one key to it,

then add a second key to it and then return that dictionary.

I can actually consolidate this all into one statement.

If you will let me go ahead and do this, let me go ahead and say name equals

inputs, return value, house equals inputs, return value.

And then instead of returning any variable name student which

I'm going to propose doesn't need to exist anymore.

Let me just create and return the dictionary all at once.

Let me do quote unquote name in lowercase here and then the variable.

It's storing the user's name, then quote unquote house as my second key,

the value of which is going to be house the variable

Now, is this better? Maybe maybe not.

Maybe the first wave was a little more readable and that's totally

fine to create variables if they improve the readability of your code

but just know that you can also create and return a dictionary on the fly like this,

so to speak all in one line

and I think it's arguably pretty reasonable in this case why

it's just pretty short.

I probably wouldn't do this if it got longer and longer and longer.

I might minimally then start moving my key value pairs, two separate lines.

But this would just be a slightly more compact way of doing this as well.

But let me propose, we do one more change.

Let's go ahead and introduce that same special casing of pad MMA

to fix her house From Gryffindor for instance to raven claw.

How do we do this with dictionaries?

Well, dictionaries like lists are mutable.

You can change what is in them just like you can list. How do you do that?

It's just a little different and tactically.

So let's go back into maine and do this fix.

If the student variable has a name key that equals equals pad MMA. Then indented.

Go ahead and change the value of the house

key inside of that student dictionary to be quote unquote

raven claw instead.

So very similar in spirit to what we did with the list,

but instead of using location zero in one were much more

clearly explicitly semantically using quote unquote

name and quote unquote house.

Because you index into lists and topples using numbers.

But you index into dictionaries using strings as I've done here.

All right, let me go ahead and run python

of student dot pi will again do harry from Gryffindor.

And I think all is Well, let me run it one more time. This time with padme.

Ahu in the movies is from Gryffindor but should really be from raven claw.

Are any questions then on this progression from tumbles to lists to dictionaries.

We haven't necessarily introduced anything new other than those tunnels

which had been available to us all this time.

But the goal at the moment is just to demonstrate this distinction among

these different data types and how they each work a little bit differently.

Uh, strength. If I'm saying that right,

It's a

the right name.

Household name.

Sorry, can you speak a little louder? It's a little quiet for us.

Can you name

post?

How soon can you flip the keys?

Absolutely.

In a dictionary,

the order of the keys is typically remembered but it

doesn't matter in which order you actually set them.

If you're just going to access individual keys anyway,

you could change the order of name and house but still access them in any order.

It's this collection of key value pairs.

Typically the order doesn't matter.

Unless for instance,

you want to iterate over the dictionary in a loop and see the keys in a specific order.

Other questions on dictionaries or lists or topples. Ducks. If I'm saying it right.

Yes, sir, sir. I wanted to ask that. What if

Apple is a list and accommodate

combination of lists.

You could use a combination of lists if you mean putting a list inside of a list.

I would argue that doesn't really solve a problem here

because all I have is one name and one house.

But yes, you can have lists. Inside of lists.

You can have lists inside of dictionaries?

I warned us that a what if a combination of list is there in a couple.

So is the list like we can change the list because people are immutable

correct.

You can change the contents of lists and you can put most anything you want in them,

other lists or strings.

As I've done integers or anything else. Topples.

You can do the exact same thing, but you cannot change them once you've created them.

A dictionary is more like a list in that. It is mutable. You can change it.

But the way you index into a dictionary is by way of these keys.

These strings as we keep seeing

rather than by numbers, those numeric indices.

All right,

well let me propose that there is yet another way of solving this

problem and indeed I would argue that there's now an opportunity to hand,

even though this program isn't particularly complicated.

All I'm doing is collecting a name from the user and a house from the user.

You can imagine wanting longer term to

collect even more information like the students,

patronus or magical spell or a whole bunch of

other information that might belong in a student.

And right now we're just kind of using these very general purpose

data types in python, a couple to combine some values together. A list to do the same.

But let us change it later a dictionary which

is more powerful because it's a little more structured.

It does have keys and it has values, not just values, but you know what? This?

We wouldn't have to be having this conversation if the authors

of python had just given us a data type called students,

right.

Wouldn't it have been nice If there were just a type

of variable I could create in my code called student,

then we wouldn't have to figure out what do we use?

A couple or a list or a dictionary.

But that's pretty reasonable. Right?

You can imagine just us how slippery of a slope that is, so to speak.

If the creators of the language had to anticipate all the possible types of

data that programmers like you and me want to store in your programs.

So they just gave us these general purpose

tools but they gave us another general purpose tool

that's going to allow us to create our own data types as

well and actually give them names and that terminology is a class.

A class is kind of like a blueprint for pieces of data objects so to speak,

A class is kind of like a mold that you can define and give

a name and when you use that mold or you use that blueprint,

you get types of data that are designed exactly as you want.

So ensure classes allow you to invent your own

data types in python and give them a name.

And this is a primary feature of object oriented

programming to be able to create your own objects

in this way and in the case of python and classes even give them some custom names.

So what does this mean in real terms? Well, let me go ahead and come back to V.

S code here.

And let me propose that we introduce a little bit of new syntax.

I'm going to go ahead and clear my terminal window first.

I'm going to go to the top of my file and I'm

just going to start a thought but not finish it yet.

I'm going to use this new keyword for classes called literally class.

So indeed the new keyword we're going to have here.

And if I go back to our slides here,

this would be the official u r l where you

can read up more on this particular feature of python

in the official tutorial class is a new keyword we can use.

Now.

This is coincidentally related to students because students take classes,

but it has nothing to do with the fact that we're dealing with students.

Class is a general purpose term in a lot of languages python among

them that allow you to define these custom containers with custom names.

Four pieces of data. So let's go back to V. S code.

Let's use this new keyword and let me propose that

we create a class called students and by convention,

I'm going to use a capital s here and I'm gonna go ahead

and with a colon get to later the implementation of this class.

So I'm just gonna use dot dot dot, which is a valid placeholder for now.

That just indicates to me that I'm gonna come back to implementing this later,

but as of now it does in fact exist.

I now have a student class defined for me that I can now use in my code here.

How am I going to use it? Well, first of all,

let me go down to get students and let me

change this code to no longer use a dictionary.

But to use this class, I'm going to do this,

I'm gonna give myself a variable called student, as I've done before,

but I'm gonna set it equal to capital students.

Open parenthesis, close parenthesis.

So I'm going to do what appears to be

calling a function and that function student with a

capital s notice matches the name that I gave this class at the top of my file.

Alright, what do I next want to do? I'm gonna go ahead and give this student a name.

Now, if I were still using a dictionary,

I would say student quote unquote name using square brackets,

but this is not a dictionary.

It turns out classes have what for now we'll call attributes,

properties of sorts that allow you to specify values inside of them and

the syntax for that happens to be a dot We've seen dots before.

We've used it in the context of modules and libraries.

More generally,

this is another similar in spirit use of a dot that

allows you to get at something inside of something else.

So student dot name is going to be the syntax I use for giving this student

a name and that name is going to be whatever the return value of name is,

and then I'm going to go ahead and say student

dot house to give another attribute called house and give that

the return value of input here, prompting the user for house.

And then as before, I'm just gonna return student.

But now what's really powerful about

class and object oriented programming more generally

is that I've created this custom data type called literally student capital s.

I've stored one such student in a variable, like I can always do

in a variable called student lower case s but I could call it anything I want,

I just makes sense to college student as well, but lower case for clarity.

And then I'm returning that variable and because of my syntax in lines 14 and 15,

that has the result of putting inside of that class,

a name attribute and a house attribute.

I just need to make one more change up here.

I'm gonna go ahead and remove our padme a code

just so we can focus only on what's new rather than

fixing her house and I'm gonna go in here

and change the syntax that previously was for dictionaries.

Again, dictionaries use square brackets and then strings in quotes,

either single quotes or double quotes depending on the context here though,

I'm gonna change this to be student dot name and

over here I'm gonna change it to be student dot house

and that's just gonna be my new syntax for

getting the contents of what appears to be a class

called students.

Let me go ahead and rerun python of student up.

I enter let's type in Harry's name as before.

Let's put him in Gryffindor, crossing our fingers as we often do.

And Harry is indeed from Gryffindor.

What though have I done? Let's introduce one other bit of terminology here.

It turns out that I can create a class using the class keyword,

but anytime you use a class,

you're creating what are called objects and here is the

word objects as an object oriented programming or rop.

Let me go back to my code here.

And even though I haven't really implemented much of it at all,

I literally just left it with a dot dot dot,

that's enough code lines,

one and two to just invent a new data type called student capital S

that may or may not have some future functionality as well.

That's enough to create a class. What the am I doing online. 11. Online. 11.

What I'm technically doing is creating an object of that class.

So this too is another term of art. You create objects from classes.

So if we go back to that metaphor,

that class is like a blueprint for a house or a class is like a mold.

An object is when you use that blueprint

to build a specific house or something that comes

out of in plaster the mold when you actually use that mold to create such an object.

So a classes.

Again, the definition of a new data type,

the object is the incarnation of or technically instance she ation of.

And another term for objects would actually be an instance.

You have instances of classes as well. So that's a lot of vocabulary.

But at the end of the day it just boils down to this.

You can define your own class which is really your own data type.

You can then store attributes inside of it using this dot notation here and

then you can access those same attributes using code like this here and now.

I have a proper student data type and I don't have to kind of

hack something together using a couple or a list or even a dictionary.

I now have a proper data type called student

that the authors of python didn't give me,

I gave myself

any questions now on classes.

This new keyword class or this idea of these objects or instances thereof.

Yeah, Mohammed.

This is a good question and we've clearly laid the

stage for having that conversation about every data type.

Now we will see that they are mutable but you

can make them immutable so you can get the best of

both worlds now by writing some actual code and we'll write

more code than the dot dot dot in just a bit

other questions on classes or these objects there of rohit

hello? Yes. Rohit

then what would be the properties of those classes?

What would be the properties of those classes?

Yes, Yes.

So at the moment the properties of or the attributes of as

I've been calling them thus far would just be name and house.

It turns out that there may very well be other

attributes built into classes that we may see before long.

But for now the only two attributes that I care about

are the ones that I myself created namely name and House are

again what I would call attributes and in a little bit

we're gonna start calling those same

attributes more technically instance variables.

Name and House as I presented them here in V.

S code are really just variables called name and called House

inside of an object whose type is student

allow me to pause here for just a moment.

We'll take a quick break and we'll come back in about five minutes and

pick up from there and see what more we can do with classes.

We'll be back in five.

Mhm

Alright, we'll give folks a moment to come back.

But first are there any questions still about classes or these objects?

But rest assured. We're about to see many, many, many more features thereof to

any questions though before we resume

Daniel.

It was only like uh how the data is talking to the function.

The function is sulking first to the class

that's for for access the sudden that name and

then the main is asking to the class about

the info that the function gets students give her

I think correct to recap then by line number on line 11 we are creating a

student object from that class template if you

will from that blueprint from that mold.

And we're calling that variable student and then on line 12

and 13 were creating variables inside of that student attributes,

so to speak.

Called name and house.

So it's very similar in spirit to a dictionary but we're gonna

we're about to see that there's even more functionality than a dictionary.

Yeah that was the question that maine is talking that the function main is

talking to the class and it don't talk directly to gets to them function

Correent?

Main is online six is calling get students

and get student is returning a student object.

Okay, okay, correct. Sure. Other questions before we resume?

Yeah. Anjali

Hi so can the attributes be different data types like could

you have an integer as well as name and house.

Absolutely.

We're using strings here but those attributes can be any types of values.

Indeed. Good question other questions on classes. Are these objects

a meal?

A meal.

It's still muted.

Sorry, I was having some difficulties on muting you could the attributes.

Name and house be within the class or or does it have to be um in the function

can be in the class and hold that thought because

you're about to see what more we can do.

This is the very simple way of doing things like a dictionary.

We're about to get way fancier than that.

And how about one more question here to lou

Okay.

Um other that's like basil school can classically called Inside the function.

Can the class B called inside a function?

Absolutely. And we're doing that here.

Notice that inside of my get student function in line 11 is where I'm

inst And she ating a student object and then I'm returning it to maine

and you could even define classes.

Inside of functions if you only want that class to exist inside that function.

That's not something we're going to do.

But on occasion it makes sense to do that when you kind of want to keep a

class private to a function so to speak and not let any other code use it instead.

Alright,

let's go ahead and come back here and we're about

to see a whole bunch more features of these classes.

Alright max ready when you are?

All right.

Mhm.

Okay.

Alright. So what more can we do with these classes?

Well, again,

online 11 is where we're inst and she ating in object

of the student class and assigning it to a student variable.

We're then adding attributes, name and house respectively. Online's 12 and 13.

Currently both of those have values that are technically strings or

stirs because that's what the return value of input is.

But those attributes values could actually be any data type.

We're just keeping things simple and focusing on

defining students in terms of two strings.

Name and house. And then online 14 we're returning that variable.

We're returning that object to maine so that we

can actually print out who is from what house.

Well let's go ahead and add a bit more functionality

here because right now online is 12 and 13.

This is a little manual and it's a little reckless of me

to just be putting anything I want inside of this student object.

It turns out with classes.

Unlike with dictionaries,

we can actually standardize all the more what those attributes can be

and how what kinds of values you can set them to.

So let me go ahead and do this. Let me propose that. It would actually be really nice

if instead of doing this here,

let me go ahead and simplify my code as follows.

Let me go ahead and give myself a local variable called

name and set it equal to the return value of input.

Like we've done many times now already.

Let me give myself one other variable for now called house and

set it equal to the return value of input as well,

prompting the user for their house.

And now instead of creating a student object from my student class and then manually

putting the name attribute inside of it and the house attribute inside of it.

Let me actually do something more powerful. Let me do this.

Let me call that student function which is identical to the class name.

Just by defining a class,

you get a function whose name is identical to

the class name with the capital letter included.

But instead of just doing open parenthesis,

close parenthesis let me pass in the name that I want to fill this

this object with and the house that I want to put in that object as well.

And now let me set the return value as before to be students equals like this.

So what have I done? That's different

fundamentally.

I'm still getting user input in the same way

I'm using input on line 11 and input online.

12. And I just so happen to be storing those return values in local variables.

But now and now we're setting the stage for the

more powerful features of classes and object oriented programming.

More generally notice that I'm deliberately passing to this capital s

student function

name comma House, I'm passing in arguments to the function.

Now the student class is not going to know what to do with those yet.

But now I'm sort of standardizing how I'm passing

data into this student class and ultimately it's going

to give me an opportunity to error check those

inputs to make sure that the name is valid,

that it has a value and it's not just the user hitting enter.

It's going to allow me to ensure that it's a valid house that it's Gryffindor,

or hufflepuff or ravenclaw or slytherin or not just hitting

enter or some random value that the user types in.

Because I'm passing name and house to the student class,

this particular function,

I'm going to have more control over the correctness of my data.

So let's now go up to the student class which up until now I left is just dot dot dot.

It turns out that in the context of classes,

there are a number of not just attributes

or instance variables that you can put inside.

But also methods classes come with certain methods or functions inside of them

that you can define and they just behave in a special way,

by nature of how python works.

These functions allow you to determine

behavior in a standard way. They are indeed special methods in that sense.

Now, what do I mean by this? Well, let me go back to V.

S code here and let me propose that I start to define

a standard function called underscore underscore or dunder as its abbreviated,

innit,

underscore underscore and then I'm gonna go ahead and do open parenthesis

and then I'm gonna put in here literally the word self.

More on that in just a moment.

But now inside of this function I'm going to have an opportunity to customize this

classes, objects

that is to say this underscore underscore

innit method or Dunder innit method is specifically

known as an instance method and it's called exactly this.

This is designed by the authors of python.

And if you want to initialize the contents of an object from a class,

you define this method and we'll see what it's about to do here let

me go back to bs code and let me do something like this.

Self dot name equals name and

self dot house equals house.

But I don't want to just in it this object very generically,

I want this method called in it to take in not just self but name, comma house as well.

Now, what in the world is going on because there's a lot of weird syntax here.

There's this Dunder innit method double underscore in it.

Double underscore there's all of a sudden this parameter

called self and then there's this new syntax.

Self dot name and self dot house.

Now you're seeing really a manifestation of object oriented programming.

It's not all that different fundamentally from what

we've been doing for weeks with dictionaries,

by adding keys to dictionaries.

But in this case we're adding variables, two objects,

a k a instance variables to objects.

Now, what's going on, Let's do this in reverse.

Let's go back to the line of code we wrote earlier online 15.

I am treating the name of this class.

Student with a capital S as a function

and I am passing in two values name and house.

What I've highlighted here on the screen on line

15 is generally known as a constructor call.

This is a line of code That is going

to construct a student object for me using synonyms.

It is going to install Mansi E8, a student object for me.

And again, how is it going to create that object?

It's going to use the student class as a template as a

mold of sorts so that every student is structured the same.

Every student is going to have a name. Every student's gonna have a house.

But because I can pass in arguments to this student function, capital S,

I'm going to be able to customize the contents of that object.

So if you think about the real world,

if you've ever been on a street or a neighborhood

where all of the houses kind of look the same,

but there might be painted differently.

They might be decorated a little bit differently on the outside.

All of those houses might have been built using the

exact same blueprints sort of a mold if you will.

But then you can specialize exactly the finer points of those houses

by painting the outside of different color or planting different trees.

You can style them differently.

Similar

in spirit here, we have a student

blueprint

that's always going to have now a name and a house,

but it's up to you and me to pass in any name in any house that we want

now. Where is this function?

The fact that I'm calling student capital S

and then a parenthesis and closed parenthesis with

arguments inside suggests that there's a function somewhere

in the world that has been defined with death

that's going to be called.

Well, as you might have guessed by now,

the function that will always be called by definition of how

python classes work is a function called Double underscore in it.

Double underscore why?

It's a crazy name,

but it's what the authors of python shows to just implement the initialization

of an object in python.

Now, the only weird thing, especially weird thing I will admit is this,

it would be way clearer to me too if the only two parameters for in it,

we're just name comma house.

Right.

That's how we've defined every function thus far in the class,

you just specify the parameters that you want, the function to accept.

And indeed that lines up with what I'm doing online.

15, I am only passing in two things

to the student function,

but it turns out that the authors of python needs to

give us a little bit of help here because suppose that

you pass in name and house to this emit method and

a method is just a function inside of a class.

What are you going to do with the name and the house?

Like literally where are you going to put them if you

want to remember the name and the house for this student,

you've got to be able to store those values somewhere.

And how do you store them in the current object that has just been inst and she ated.

Well,

the authors of python decided that the convention is going to be that this innit

method also semi secretly takes a third argument

that has to come first by convention.

It's called self, but you could call it technically anything you want.

But the convention is to always call itself

And self as its name implies,

gives you access to the current object that was just created.

What does that mean again? Now, online 14. Now that it's moved down a little bit

this line here is a constructor.

It constructs a student object, but there's nothing in that object. Initially.

There's no name, there's no house, but the object exists in the computer's memory.

It's up to. Now you to store the name and the house inside of that object.

How do you do that?

Well,

python will just automatically call this emit method

for you and it's going to automatically pass in

a reference to

an argument that represents the current object that it just constructed in

memory for you and it's up to you to populate it with

values and what this means is that inside of your innit method

you can literally do self dot name to create a new attribute,

a K a, an instance variable

inside of that otherwise empty object and put this name inside of it.

It allows you to do self dot house and store that value of house.

Now you could call these things anything you want,

they could be and they could be H as before,

but that's really not very self explanatory,

much better to do this kind of convention.

Self dot name equals name.

Self dot house equals house.

And this is like installing into the otherwise empty object,

the value, name and house and storing them in really identically named

instance variables in the object.

And again, an object is just an instance of a class.

Now I know that was a lot of vocabulary, that's a lot of weird syntax.

So any questions on this emit method whose purpose in life again

is to initialize and otherwise empty object when you first create it.

Uh mentally, if I'm saying that right?

Hello, david.

Yeah,

my question is that what is the difference

between the innit method and deport constructor?

A good question.

So in other languages, if you program before, for instance,

java there are x functions that are explicitly

called constructors that indeed construct an object,

they initialize it with values,

python technically, cause this innit method, the initialization method.

It initialize is the value.

It's online. 14 line 15. Now with my code. If I scroll back down

that I'm technically constructing the object,

it turns out there's another special method in python

that we won't talk about in detail today,

called underscore,

underscore new underscore underscore that actually handles the process

of creating an empty object in memory for us.

But generally speaking,

you the programmer don't need to manipulate the new function.

It just works for you.

Instead,

you define your own innit method here and in it function inside of your class.

And that method initialize is the contents of the object.

So there's technically a distinction between constructing the

object with new and initializing it within it.

But in the world of python, you pretty much only worry about

the innit method, python generally does the other part for you.

A good question. Others

ahmed

what about if you want to store more than one name or more than one house?

A good question.

If you want to store more than one name or more than one house,

you can do this in different ways.

You could create other attributes,

technically called instance variables like self dot name,

one self dot name to but we've seen in the past that that is

not a very good design just to have multiple variables to store multiple things.

Maybe instead you have an instance variable called self dot names plural and you

set it equal to a list of names or a list of houses.

Now, in this case,

I don't think that really solves the problem

because I'm trying to implement a student singular.

So it doesn't really make sense to have multiple.

First names, maybe a nickname, maybe a last name.

So we could add those two,

but I don't think we need multiple names per se and in this case multiple houses.

But absolutely you could do that using some of our familiar building blocks, like

lists, other questions

on classes and objects. Neha if I'm saying it right,

Oh, still there we go.

Our class is represented in memory.

These just lists of things kind of tight, tight to each other or

I missed the first part. Can you say again? What's tied to each other?

Our class is represented in the memory.

Like are these lists of things just tied to each other in some way?

Are the classes assigned to each other and

know they're completely independent.

So just because I've created this class doesn't

mean there's any connection to any other classes.

We'll see ways to create multiple classes though.

How are they represented in memory?

Say again. How our classes or objects represented in memory?

How are classes and objects represented in memory?

So the class is technically just code.

It is the code on the top of my file lines,

one through four that defines that blueprint that template if you will,

objects are stored in the computer's memory by taking up some number of bytes.

So you're probably familiar with bytes or kilobytes or megabytes.

There's some chunk of bytes,

probably all in the same location in the computer's memory

or RAM where those where those objects are stored.

But that's what python the program handles for you, python,

the interpreter figures out where in the computer's memory to put it,

you and I the programmers get to think and solve problems at this level python,

the interpreter handles those lower level details for you.

How about one final question on classes and objects, Vasundhara,

if I'm saying it right.

Hi, thank you so much. Now.

My question is if we can the same, do the same thing with the dictionaries

to use classes. Good question.

If you can do the same things as you can with dictionaries,

why should you use classes?

Because we are just scratching the surface now of what you can do with classes,

allow me to go back now to my keyboard and show you more of what you can do with classes.

But in short, you can do much more with classes,

you can ensure the correctness of your data much more with classes.

You can error check things and generally

you can design more complicated software more effectively

and will continue to see today features of

python and object oriented programming more generally,

that allows us to do just that. So let me propose, in fact,

that first let's just tighten up this current implementation,

which again has us with an innate method that just declares

to instance variables self dot name and self dot house,

which again just creates those variables inside of the otherwise

empty object and assigns them values name and house,

respectively.

Let me go ahead and just do one little thing here.

I don't really need this student variable.

Let me just tighten this up so that each time we improve or change the code,

we're focusing really on just the minimal changes alone.

So I've not fundamentally done anything different.

I just got rid of the variable name and I'm just returning

the return value of this student function

that's constructing my new object for me.

So I'm just tightening things up as we've done many times in the past.

Well, what if something goes wrong when in creating this student, for instance,

what if the user does not give us a name and they just hit enter when prompted for name.

Like I don't want to put in my computer's memory,

a sort of bogus student object that has no name, right.

I'd ideally like to check for errors before I even created,

so I don't create a nameless student.

It would just be weird and probably a bug to have an object that has no name.

Similarly,

I don't want the user to be able to type in something

random as their house at least in the world of harry potter.

There's really only four houses at Hogwarts at least.

Or there's again,

Gryffindor and hufflepuff and ravenclaw and slither in a list of four valid houses.

It would be nice if I somehow validated

that the user's input is indeed in that list.

Now, I could do all of that validation in my get student function,

I could check is the name empty.

If so, don't create the student object is the house one of those four houses.

If not, don't create the student object,

but that would be rather decoupled from the student itself.

Right.

Get student currently exists is just my own function in my student dot pi file.

But classes and really object oriented programming more generally

encourages you to encapsulate

inside of a class. All functionality related to that class.

So, if you want to validate that a name exists,

if you want to validate that a house is correct,

that belongs just fundamentally in the class called student itself,

not in some random function that you wrote elsewhere.

Again, this is just methodology because again,

if we think about writing code that gets longer and longer,

more and more complicated.

It should make just intuitive sense that if you keep all the house

and all of the

all of the name and all of the house related code in the student.

It's just better organization. Right, Keep all of the related code together.

And that's probably going to set you up for more success

and indeed that's part of this methodology of object oriented programming.

Let me go ahead now and change my students classes in IT method to do this

if the name is blank. So if not name and we've seen this kind of syntax before.

If you say in python, python, ecklie, if not name,

that's like doing something like this, if name equals equals quote unquote.

But I can do this a little more elegantly.

Just say if not name would be the more python equate to do it. Well, I want to

return an error. Like I might want to do something like this.

Print missing name, but this is not good enough.

It does not suffice to just print out missing name

and then let the rest of the code go through.

Alright, well what can I do instead?

In the past we've seen another technique,

I could do sys dot exit and I could say something like missing

name and I could go up here and I could import sys but

this is a really obnoxious solution to the problem just because you or

maybe a colleague messed up and call the function with an invalid name.

You're going to quit my whole program, like that's really,

really extreme of a response and you probably don't want to do that.

If your programs in the middle of running you might want to clean some stuff up,

you might want to save files, you don't want to just exit a program.

Sometimes in some arbitrary line just because input was invalid.

So I don't think we want to do that either,

but we do now have a mechanism for signaling errors.

Unfortunately, I can't do something like this.

I could try returning none and say uh this student does not exist.

I'm gonna hand you back none instead, but it's too late.

If we scroll back down to where I'm creating the student,

it's online 17 now where I've highlighted this code,

the student has already been created.

There is an object somewhere in the computer's memory

that's structured as a student. It just doesn't have any values inside of it,

but it's too late therefore to return none. That ship has sailed. The object exists.

You can't just suddenly say no, no, there is no object, there is an object.

It's up to you to signal an error.

And how do you signal an error?

What we've actually seen this before,

but we haven't had occasion to create our own errors.

It turns out in python,

there's another keyword related to exceptions

that python itself uses to raise all of

those exceptions we've talked about in the past

when you've caught things like value errors or

other such exceptions that come with python,

well,

it turns out you the programmer can raise that is

create your own exceptions when something just really goes wrong.

Not wrong enough that you want to quit and exit the whole program,

but enough that you need to somehow alert

the programmer that there has been an error.

Something exceptional in a very bad way. Something exceptional has happened.

And let them try to catch that exception as needed.

So let me go back to the s code here and

propose that if the user passes in an invalid name,

it's just empty.

So there's not a name.

Well, what I really want to do is this,

I want to raise a value error and we've seen the value errors before.

We've created value errors accidentally before and generally you and

I have tried to catch them if they happened.

Well,

the flip side of this feature of exceptions in a language like python is that you the

programmer can also raise exceptions when something exceptional

happens and you can even be more precise,

you don't have to raise a generic value error

and let the programmer figure out what went wrong.

You can treat value error and all exceptions

in python like functions and actually passed to them

an explanatory message, like quote, unquote, missing name,

so that at least the programmer when they encounter this error knows, oh,

I messed up,

I didn't make sure that the user has a name and now what you wanna do instead.

Well now, if you're the programmer, you could do something like this,

you could try to create a student except if there's a value error,

then you could handle it in some way.

And I'm gonna wave my hand with a dot dot dot. And how you would handle it.

But you would handle it using try and accept just like we have in the past.

And that would allow you the programmer to try to create the student.

But if something goes wrong, okay, Okay,

I'll handle it nonetheless.

So what's new here again,

is this raise keyword that just lets you and I

actually raise our own exceptions to signal these errors?

Well, let me go back to my code here

and I'm just gonna go ahead and not bother trying or catching this error for now.

We'll just focus on raising it and assume that from our week

on exceptions you could add try and except as needed in places.

Let me go back to the code here and

propose that something else could go wrong with House.

Right? If there is a name we're good.

But if we're given a house but it's invalid,

we should probably raise an exception for that too.

So what if we do this?

If house is not in the list containing Gryffindor, quote, unquote, hufflepuff,

quote, unquote.

Uh Let's see, raven claw, quote, unquote or slither in, quote unquote.

Then with my colon, let's raise another type of value error.

But rather than raise a generic value error.

Let's pass in an argument, quote unquote invalid house.

And so here we now see a capability that we

can do with classes that we can't with dictionaries.

If you add an attribute to a dictionary,

a key to a dictionary it's going in no matter what.

Even if the name is empty, even if the house is a completely random string of text,

that's not one of these four houses, it's going into that dictionary.

But with the class

and by way of this innit method,

you and I can now control exactly what's going to be installed if you will,

inside of this object, you have a little more control now over correctness.

And so now let me go ahead and

uh scroll back down to my terminal window and clear it.

Let me run python of student dot pi. Let me type in something like Harry.

Let me type in Gryffindor, enter. And we see that Indeed Harriet from Gryffindor.

What if I made a mistake though? What if I run python of student dot pi and typed?

Harry is the name But this time typed in number four Privet Drive,

which is where he grew up instead of his proper hogwarts house.

Let me hit enter now. And now you see a value error.

But this isn't one that python generated for us per se. I raised this error.

And therefore if I went in and wrote more code and might get student function.

I could also catch this error with our usual try except syntax.

So all we have now is not just classes in our toolkit,

but even more powers when it comes to

exceptions and not just catching them ourselves,

but raising them ourselves too.

Any questions now

on

this use of classes and in it and now this ability

to raise exceptions when something goes wrong inside of the initialization.

Uh, Giordani, if I'm saying it right.

Yes, yes, I'm sorry, I was muted. So what if

the user has a middle name, name, middle name and last name? How would you fix that?

A good question.

If you wanted the user to if you wanted the students have a first name,

middle name and last name.

We could do this in a bunch of different ways.

The simplest though,

if let me clear my screen here and let me just temporarily do this.

Let me propose that the Senate method taking a first argument,

a middle argument and a last argument.

And then what I think I would do down here is ultimately have first

equals first and then I would do the same thing for middle and last.

So middle and middle and then last and last. And then what I would have to do here

is when I actually ask the user for their name, I might need to really go all out.

I might need to ask them first for their first name and

store that in a variable called first and therefore pass in first.

I might similarly need to ask them for their middle name

and store that in a variable and then pass in a second argument.

Middle and then lastly if you will let me

go ahead and create a third variable called last.

Get the input for their last name and pass that in as well.

I could instead just use one input and just ask them for their whole name.

So type in David malin enter or David,

J malan all three of them and maybe I could use python split function,

maybe a regular expression to tease it apart.

That's probably going to be messy because there's gonna be

people who don't have just two or three names,

they might have four or five.

So maybe sometimes it's better to have multiple prompts,

but that's not a problem because with the class we have

the expressiveness to take in more arguments if we want.

We could even take a list if we wanted but I think we

probably want to have even more error checking then not just for name,

but for first and then maybe for middle and then maybe for last.

So it just is more and more code though,

there would be ways to perhaps consolidate that to let me undo

all of that and see if there are other questions now on classes

Yeah, 50 if I'm saying that right,

correct.

Um that feels like those libraries we import pretty much doing something similar.

I assume this is classes or something I might do at the beginning of a project.

Can I just put them in a different file and

important into my project or my main code as needed.

Absolutely. A really good question.

You could imagine wanting to use this student class, not just in student dot pi,

but in other files or other projects of yours.

And absolutely.

You can create your own library of classes by putting the student class in your

own module or package per our discussion

in the past about libraries more generally.

And absolutely, you can do that.

And later today will we see that we've actually been

using classes you and I before in third party libraries.

So you two can absolutely do the same. How about one more question on classes?

Yeah. ErIC

erIC over to uh so I have two questions.

Question one,

can you have optional variables in classes and two can you have your own error?

Names

like let's be egotistical and say I want to raise eric error

cannot be done. Short answer. Yes.

So you can see these in IT functions are just like python functions more generally,

even though they're special and that they're gonna

get called automatically by python for you.

But if you wanted to make house optional, you could do something like this.

You could give it a default value

in the in IT functions, signature, so to speak, in that first line of code online too.

And that would allow me to not have to pass in house in this case I'm

going to continue to always pass the name

and house but you could make things optional.

And yes, your second question.

If you wanted to have your own error message like an eric error,

you could actually create your own eric error exception.

And we'll see in a little bit that there's actually a

whole suite of exceptions that exist and you too can invent those

as well.

Let me propose though that we now introduce one other aspect of this

whereby we try printing out what a student looks like at the moment.

If I scroll back down to my main function,

I'm still printing the student's name and house very manually.

I'm going inside of the object doing student dot name and I'm going inside of the

object again and getting student dot house just to see where the student is from.

But wouldn't it be nice if I could just

print the student like I've been printing for weeks,

any ints or floats or stir or any other data type?

Well let's see what happens if I just try printing the student

instead of manually going inside and trying to create that sentence myself.

Well in my terminal window let me go ahead and run python of student dot pi again.

Let me type in. Harry,

let me type in Gryffindor and

voila Harry, Whoa Okay. Main student object at O X one oh 2733 E

80. Well, what is going on?

Well, if you were to run the same code,

you might actually see something different on

your computer in terms of that number,

but what you're really seeing is the underlying representation

as a string of this specific object in particular,

you're seeing where in the computer's memory, it is

this number O X one oh 2733.

E 80 refers to essentially a specific location in the computer's memory or RAM.

That's not really that interesting for me

or you or generally speaking programmers,

but it's just the default way of describing via print what this thing is.

But I can override this as well.

It turns out that there are other special methods in python when it comes to classes.

Not just underscore underscore, innit,

underscore underscore but continuing that same pattern

underscore underscore stir underscore underscore.

So this too, is a special method that if you define it

inside of your class,

python will just automatically call this function for you anytime.

Some other function wants to see your object as a string.

Print wants to see your your object as a string, but by default,

if you don't have this method defined in your class,

it's going to print out that very ugly esoteric incarnation thereof,

where it says main dot student object at o x dot dot dot.

Well, how can I then define my own stir function. We'll hear back in V. S code.

Let me propose

that I go in and define, not just underscore underscore

in it, but let me define a second function in this class here as follows.

Death underscore underscore stir underscore underscore their R. And D.

To even though the font and V.

S code is putting the to underscore so close it just looks like a

longer underscore there are indeed two there on the left and the right,

just like for in it.

This one only takes one argument that by convention is

always called self so that you have access to it

and then indented below that after a colon,

I'm going to go ahead and create a format string and return it.

So let me go ahead and return. How about something generic first? Like A student.

So I'm not gonna bother even trying to figure out what this student's name or houses.

I'm just going to always return a student.

Let me go back now to my earlier code which has print student online. 16.

Let me clear my terminal window and rerun python of

student dot pi enter type in harry type in Gryffindor.

Last time I saw that very cryptic output. This time I see more generically a student,

you know, more readable but not very enlightening. Which student is this? Well,

notice that the

double underscore stir method takes in this self argument by default.

It's just the way the python, authors designed this method,

it will always be passed a reference to the current student object.

What do I mean by that when this line of code on line six is called

print because it's hoping it's going to get a string

is going to trigger the underscore underscore

stir underscore underscore method to be called.

And python for you automatically is going to pass into that method a reference to the

object that's trying to be printed so that

you the programmer can do something like this.

Here's an F string with double quotes.

As usual, I'm going to use some curly braces and say print out self dot name

from

self dot house. So there's nothing new in what I've just done,

it's just an F.

String and F on the beginning to double quotes a couple of pairs of curly braces.

But because automatically this stir method

gets past self, so to speak, a reference to the current object,

I can go inside of that object and grab the name.

I can go inside that object again and grab the house.

So now when I go back to my terminal window previously, it just printed out a student.

But now if I run python of student top, I enter Type in Harry,

type in Gryffindor and one more time hit, enter

Harry is again from Gryffindor.

But if I run this yet again, let's for instance, do Draco is from slytherin,

enter Draco's from slytherin.

Now it's customized to the specific object that we're trying to print

questions on this function here.

This thunder stir method.

Again, it's among the special methods that just come with classes in python

questions on this. Yeah. Over to

uh, john is it john?

Yeah, it's john john, thank you for calling on me.

Well, I've been following along writing

in V. S. Code

and

I'm pretty sure I have exactly the same program as you do,

but it's throwing a type error that student

with capital S

takes no arguments.

Student with capital S takes no arguments.

Um, I don't, I can't, I'm not sure offhand.

If you want to copy, paste your code into the chat window?

Let me propose that someone else in the chat room

might be able to answer or my colleague carter,

but I'm not sure I can be that useful without seeing it here.

So if you don't mind, you can, if you want to paste into the chat instead

and let me go on to someone else just because I

won't be able to see the chat in real time.

But carter is keeping an eye out other questions, Michael.

Yes. Um, so two questions.

One is um uh is there anything else that

the underscore underscore underscore stir method can do.

Um The other question is, what's the difference between stir and reaper?

A good question.

So there are many other methods that come with python classes that

start with underscore underscore we're just scratching the surface and well,

pretty much focus primarily on these.

But yes, there are many others and we'll see at least one other in just a little bit.

There is among the others is indeed one called Red pepper,

which is a representation of the python object.

Generally speaking,

the underscore underscore r E P R underscore

underscore method is meant for developers eyes,

it typically has more information than harry from Gryffindor.

It would also say what type of object it

is like a student capital S whereas underscore underscore,

stir underscore underscore is generally meant for users,

the users of the program and it's meant to be even more user friendly.

But both of those can be overridden as you see fit

about one other question on these classes

and implementation thereof. Ilya.

Mhm

Ilya over to

Yes, we can.

Okay, my question is uh we if we have a choice between six or razor room,

can you ask that once more?

I said it can be we have a choice between six or raise the room.

Sorry, are you able to hear?

So I'm sorry, I'm having trouble hearing you. Elliot. Can you ask one more time?

Oh, you froze on me now. Here, I'm afraid

really.

If you can hear me go ahead and ask in the chat,

I'm afraid you froze and I couldn't quite hear you

but ask in the chat and we'll see if we can't

answer that for you too.

Well,

let me propose now that we pick up where we

left off on students and just add even more functionality,

but not just these special methods like double

underscore in it and double underscore stir like

let's create our own methods because there in

lies the real power and flexibility of classes.

If you and I as the programmers can invent new functionality

that's specific to students for instance,

students at Hogwarts over the time in school learn

how to cast a certain type of spell.

So when they say expecto Patronum

something comes out of their wand that typically

resembles an animal or something like that.

It's a special spell that they have to practice and practice.

So let's see if we can't store not just the student's name in their house,

but also their Patronus would actually they conjure when using this spell.

Well let me go ahead and clear my terminal window and in

the top of my code here in the method of students,

let me go ahead and start expecting a third argument in addition to self,

which automatically gets passed in

called Petronas.

And I'm not gonna worry for now on validating the

patronus from an official list of valid patronizes or Petrini,

I'm instead going to go ahead and just blindly assign it to self dot Patronus

equals Patronus and we're going to let the user type whatever they want for now,

but I could certainly add more error checking if I wanted to

limit the Petronas is to a specific list of them here.

Let me go ahead now and prompt the user for

this Patronus as by in my get student method,

get student function

to finding a variable called Patronus or anything else

prompting the user for input for their Patronus.

And now I'm going to go ahead and pass in that third variable here.

So again, similar in spirit to just adding more and more attributes to the class,

I'm going to pass in all three of these values instead of just two.

I'm not gonna do anything interesting with that value yet,

but just to make sure I haven't made things worse by breaking my code.

Let me run python of student dot pi all type in Harry all type in Gryffindor.

And it turns out his Patronus was a stag and hit enter.

I haven't seen what his Petronas is in my

output because I didn't change my stirred method yet.

But at least I don't have any syntax errors,

so at least I have not made anything worse.

But suppose now

I want to have functionality,

not just for initializing a student and printing out a student.

If my class is really meant to be a student.

What I can do is not just remember information about data about students.

What's powerful about classes.

Unlike dictionaries alone is that classes can

have not just variables or instance variables,

so to speak, those attributes.

We keep creating,

they can also have functions built in

a K.

A methods when a function is inside of a class, it's called a method,

but it's still just a function at this point we've seen two functions already.

Two methods

called

double underscore in it and double underscore stir.

But those are special methods and that they just work if you define them,

python calls them automatically for you.

But what if you wanted to create more functionality for a

student so that your class really represents this real world?

Or maybe fantasy world notion of a student where

students not only have names and houses and Patronus is

they also have functionality. They have actions, they can perform like

casting a charm a spell magically.

Could we implement therefore a function called charm that actually uses

their magical knowledge.

Well, let's go ahead and define our very own function as follows.

Let me clear my terminal window,

scroll back up to my student class and

instead of creating yet another function that's special

with double underscores I'm going to invent my

own function or method inside of this class,

I want to give Harry and Hermione and and all

of the other students the ability to cast charms.

So I'm going to define a function that I can completely on my own called charm,

so I can call this function anything I want.

But because it's a method inside of a class.

The convention is that it's always going to take at least one argument

called self by convention so that you have access to the current object,

even if you don't plan to use it per se.

Let me go ahead here and propose that we now output

an appropriate emoji based on what the user's Patronus is.

So for instance, let's do this.

If self dot Patronus equals equals quote unquote stag. Let me go ahead and do this.

Let me actually need a moment here.

You'll see me googling here because I didn't do this in advance. Let me

grab

some emojis from our favorite site,

horse here. Give me a second.

Apologies. We will fix this in post production

horse.

If you'd like to procrastinate and learn about all the

available emojis nowadays you can go ahead and run.

Uh go to emojipedia dot org. If carter you wouldn't mind pasting a U R L.

Let me go ahead and get all of the emojis.

I intend this is gonna be a bit of a spoiler on video here, but we'll crop this out,

turns out I didn't know this until recently.

There's an otter emoji, which it turns out is a spoiler, harmonies, Patronus.

Uh there's also not quite a Jack russell terrier emoji,

but the cutest one seems to be this,

which we'll use for Ron uh Draco does not

have a known patronus never appeared in the book.

So these are just the three emojis that I need.

All right now, this is where we'll edit out in the video. What we just did.

Let me go back to the s code.

Alright. If self dot Patronus equals equals stag. Well, let's go ahead and do this.

Let's return the closest emoji to a stag like this horse emoji here,

L if self dot Patronus equals equals, for instance, Otter,

then let's go ahead and return this emoji here.

If self dot patrons equals equals Otter, let's go ahead and return this emoji here,

namely an emoji of an otter L.

F.

Self dot Patronus equals equals a Jack Russell Terrier for instance,

let's go ahead and return,

we'll fix this in post production.

If L. F. Self dot Petronius equals equals Jack Russell Terrier, quote unquote.

Let's go ahead and return this adorable emoji of a dog.

Otherwise we won't return anything here by default. Well, let's go ahead. Sorry,

I need one more

to cheat

and make this all seem like it happened in real time.

Let me go back to our favorite site Emojipedia.

I need a wand.

Okay,

um,

okay,

L. F. Self dot patronus equals equals Jack Russell Terrier.

Then let's go ahead and return this adorable dog here. So what have I now done?

I have created a method called charm inside of my student class

that's going to allow a particular student to cast a charm,

but it's going to check what their specific patronus is so that what we see

on the screen is an emoji appropriate to the charm that has been cast.

Well,

let me scroll back down now to my function here

in maine and instead of printing out the student's name,

let's actually do this.

Let's print out the text of the spell that comes from the books itself,

expecto Patronum

exclamation points.

And then after that, let me go ahead and print out not the student themselves,

but whatever the return value is of the charm method.

So I've invented a method called charm inside of a student class,

which means that any student object is going to

have access to not just double underscore in it,

double underscore stir.

It's also going to have access to a method called charm.

That method called charm recall returns one of these three emoji if at

least the Patronus is a stag and otter or a Jack russell terrier,

respectively.

And so when I return that value and then printed on what's now line 26 I

should see whatever magical creature comes out of the end of the students want well,

let's try this.

Let me go back down to

my terminal window. Let me go ahead and run python of student dot pi, enter.

Let's type in Harry,

let's type in Gryffindor and let's type in stag for his patroness and

now expecto Patronum and we see the stag actually printed on the screen

if though I were to do this for instance,

for say Draco who's in slytherin who doesn't have a Patronus.

So I'm just gonna go ahead and hit enter?

Well,

expecto Patronum and nothing seems to happen here where it says none

because that's assumed to be the default value in this case.

If, if I make one change, actually, let me think for a moment, um

I'm going to have to rewind to get this right, forgive me.

Mm hmm.

It's true.

Give me just a moment to think.

Oh no, that's okay, actually.

Mhm,

mhm.

Sorry, I was just thinking how best to get this. Right?

Let me, let me rerun that again.

So let me go back down to my terminal now

and run python of student dot P and let's type in

Harry as the first student who is of course in

Gryffindor and whose patronus is a stag and we should see

expecto Patronum and then the stag comes out of the wand.

If though we were to do this now for Draco perhaps who doesn't have a patronus?

So I'm not gonna type one in, let's go ahead and type in Draco

from slither in and here for Petronas.

I'm just going to hit enter, we see him try to say expecto patronum,

but we actually see none on the screen. Why?

Because I actually haven't returned a value from

my charm method in this particular case.

So let's go ahead and at least have a default here,

how about we go back into charm and do this else?

If we don't recognize the Patronus or there just isn't one there,

the user just hit enter, as I did for Draco.

Let's go ahead and return just this generic magical wand as

though he's uh he's moved his wand and sort of,

it just fizzles.

Nothing comes out. Well, let's try this once more.

Let me go ahead and run python of student dot pi. Type in Draco for the name.

How about slither in for the house, Petronas?

I'm just going to hit enter and he yells expecto patronum and

just it fizzles and nothing comes out of the magical wand.

Emoji here

questions now on what I've done by implementing this charm method.

Again, to get here, we added a Patronus variable

in our get student function

that actually gets a third value from the user and then passes it in as a new argument

to our innit method for tom

Yeah. Hi, uh so

um

yes, we can hear you.

Yeah, so like what I understand this, like this is a method

and

can we like to call a method outside the function?

Like the str function

str is also in the third and this is also a method. So how do we distinguish?

Like, can we call it from outside the program?

Can we call it from outside the class?

Yeah, I would say.

Absolutely. And we're seeing that already.

If I scroll back down to my main function,

which is outside of the class because it's all the way down in the file,

it's all left aligned,

just like the class notice online 28 I'm calling student dot

charm and I'm accessing a method that's inside of the student object

even though my main function is outside of the class

and what's different between our inner function or method

and our stir method that we've seen before.

Those are called automatically when you try to create a student or

when you try to print a student for the first time.

We're now seeing a method that I invented inside of the student class

that I can call anywhere I want and if I'm

calling it outside of the class like I am here,

I just use the name of the variable containing

that student object and I just do dot charm

just like I could access the individual attributes or

instance variables inside of that object as well.

Other questions on

classes and this new method charm tray. If I'm saying that right,

you used to put a,

if you go up on your code

in the method and the

and apprentices

you are

you put itself

are you, is that you said That's gonna be uh

initialize,

I guess it's supposed to be like an initialized but like in in the top part you didn't,

you didn't define it the same way.

Do you have to keep like writing like you say class,

students would you have to put the class on why you didn't put the class right there.

So notice the indentation here.

So on line one I've of course said class student colon

and then everything below that is indented at the moment.

That means that my innit method,

my stir method and this new charm method are all inside of part of that class.

By convention.

Then each of these methods inside of a class should expect that python

will automatically pass in at least one argument to every method in a class

and that argument will always be a reference to the current object,

the hairy object or the Draco object that is

currently trying to cast a charm or be printed.

So whenever you create a method inside of a class,

you should always have it take at least one argument called self

and then zero or more other arguments that are entirely up to you

in it for instance, takes three more name. House Patronus

stir takes zero more charm. Take zero more.

But the convention is to always call that default

argument self And python just automatically gives you access

to the current object.

Other questions. How about one more on classes

and charms. Ducks? If I'm saying it right.

Yes sir

sir. I just wanted to ask that you have put the emojis in

double quotes so it doesn't take the emojis as a formal strings or something else.

Yes. If unfamiliar in emoji is just a character.

It's part of a mapping of numbers to letters known as Unicode.

And so whenever you see these emoji on the screen,

like the horse or the otter or the dog here specifically,

that's really just like a key from your keyboard.

You and I on macs and Pcs can't typically type it

because you see english characters or some other human language.

But emoji are increasingly available via menus and drop down and in my

case copy paste on Macs and PCS and android devices and iphones.

They are just characters even though they look like pictures,

you can think of it like a graphical font almost.

So they're just text.

And indeed, if you put them between double quotes or single quotes,

you can print emoji just like you can any other human character as well.

Well,

let me propose now that we remove this Petronas code just to simplify

our world and focus on some of the other core capabilities of classes.

So at the risk of disappointing,

I'm going to get rid of all of these beautiful emoji and charms

and I'm gonna go ahead and stop asking the user now for their patronus

and I'm gonna stop passing it into in it here and I'm gonna stop doing this here.

And I'm going to instead just go ahead and restore our use of print

students here and I'm gonna go ahead and get rid of Petronas down here.

So it's essentially undo all of the fun charms we just created.

So we're now back at the point in the story where

we have a student class with only two methods in it and stir

the first of those takes of course itself as the first argument as it always will.

Plus two more now. Name and House. No more Patronus.

We're validating name up here,

we're validating house down here and then we're assigning name and

house respectively to to instance variables called name and house also.

But we used itself to get access to the current object to store those values there in.

We then still have our stir method here which

takes one argument by default self and that's it.

And that function is going to be called automatically.

Any time you want to convert a student object to a string,

just like print might want to do here.

So let me go ahead and just make sure I haven't broken anything.

Let me run python of student dot P All type

in Harry all type in Gryffindor or enter okay,

we're back in business.

Gone are the charms and Patronus is,

but at least I'm back to a situation where I have names and houses.

But it turns out

at the moment our use of classes is not very robust,

even though we have this mechanism very cleverly if I may in

our innit method of making sure that we're validating name and house,

making sure that name is not blank and making sure that

house is a valid house among those four Hogwarts houses.

It turns out that classes will still let me get at those attributes,

those so called instance variables using dot notation.

Anyway, let me scroll down then and try to do this a little adversarial e

suppose that online 16, I go ahead and call get students which exists as before

and then I store the return value in

a student variable Again online 16 that will ensure

that gets student gets called which calls input and

input and then it calls the student constructor,

which invokes automatically this innit method.

So, by way of how we've laid out my code,

we're going to ensure that name is not blank

and house is definitely one of those four values.

My error correction or error checking is in place.

But if I'm a little adversarial, I can still circumvent it. Suppose that fine.

I'm gonna you're gonna require me to type in Harry and Gryffindor or

I'm gonna go ahead and type in student dot house equals quote,

unquote number four privet drive and you're not gonna be able to stop me.

Why?

Well,

it turns out with classes and objects there of you and I

can still access those instance variables using this familiar dot notation.

That's how we began the story of classes. Just setting these attributes ourselves.

But you can also read these attributes themselves and change them later if you want.

And this will effectively circumvent

the if condition and the other if conditions in our innate method

because that is only called when you first create the student object.

There's nothing stopping me at the moment

from just changing the house or the name after.

So if I now clear my terminal window and run python of student dot hi,

I'll still type in harry and Gryffindor to meet my

requirements that the house be one of those four,

but when it's printed notice, I've still overridden it.

So it seems that while classes do allow us

a little more control over the data we're storing,

it doesn't necessarily prevent the user, be it, rather the programmer,

be it myself or maybe a colleague from still kind of messing things up.

So here too,

in the spirit of programming a little more defensively allow

me to introduce another feature of python as well,

namely properties.

So, a property

is really just an attribute that has even more

defense mechanisms put into place a little more functionality

implemented by you to prevent programmers like me and

you from messing things up like these attributes.

So, again,

a property is going to be an attribute that you and

I just have more control over how we just write a

little more code using some python conventions and how we're going

to do that is going to use in just a moment,

a feature keyword known as at property, which is technically a function.

Property is a function in python,

but we're about to see some new at syntax that allows you to decorate

functions and this too is a term of art in the world of python,

you can have decorators which are functions that modify

the behavior of other functions if you will.

And we'll leave it at that without going too much into the weeds.

And we'll see by example how you can

use these decorators specifically to define properties.

So let me go back to V. S. Code here

and let me propose

that I do this.

I'm gonna go ahead and create how about a property called house as follows

inside of my student class.

I'm going to go ahead and below my innit method and below my stir method,

I'm going to go ahead and define a function called house.

That takes as it always must one argument at least called self.

And what I'm gonna do now is return uh self dot house.

So I'm just going to define a method called house whose

sole purpose in life is to return the value of house.

But I'm going to define one other method curiously also called house,

but that's gonna take into as arguments,

two values self as always and also a value called house.

And I'm gonna now do this,

I'm going to say sell rather

I'm going to do self dot house equals house.

Now, what have I done?

Well, let me just temporarily add some comments here in a moment.

We're going to start referring to this generally as a getter.

And down here, I'm going to refer to this as a setter

And this is terminology you frequently see in the world of java,

some of you have programmed in java before.

But as the names imply, a getter is a function for a class that gets some

attribute. A setter

is a function in some class that sets some value.

And now, even though we're not done and there's a bit of a mistake in the code.

I've already written intuitively, what we're going to do is this

we're trying to prevent programmers myself included from circumventing my error

checking that I put into place for name and house.

How can I do that? Well, we don't have that many building blocks and programming.

We've had things like variables for data and we have functions for actions.

Well, why don't we do this? Why don't we somehow require

that in order to access an attribute.

You go through some function and let's require that in order to set some attribute,

you go through some function.

And conventionally those functions are called a

getter function and a setter function.

And why are we using functions or in this case methods inside of a class?

Well, once you have functions,

those are just actions or verbs that you and I can create ourselves.

We can put any error correction I want in these functions

because it's code that's gonna get executed top to bottom.

So how can I now prevent the user from setting the house to an invalid value.

Let me borrow some logic from before rather than blindly do this.

Just set self dot house equal to the house value that's passed in.

Let's add our error checking there.

So if house is not in the following list of gryffindor or harmful puff

or slither or

raven claw or slither in just as before. Let's go ahead and raise the value error.

Just to signify that something has gone wrong. I'll be more explicit.

I'll include a message like invalid house, quote unquote.

Otherwise I'm going to proceed on now. Line 21 2 set self dot house to house.

So I just copied if you will or retyped my

error checking inside of this so called setter function.

Now, why have I done that?

Well, to be clear whenever the user or the programmer writes code like this

student dot house equals.

What's about to happen magically is python will not

just let the programmer access student dot house directly.

That attribute that instance variable Ak self dot house,

it's instead going to magically automatically

call this setter function for me. How does python know to do that?

Well, if it sees that on the left hand side

there is self dot house. Where house is the name of the getter or setter

and then it sees an equal sign indicating assignment.

That's just enough of a visual clue to say wait a minute.

I'm not gonna let you access that attribute directly.

I'm going to use the setter instead. Why?

Because the equal sign means I'm trying to set,

I'm trying to assign a value from right to left into that attribute.

So what python is gonna do automatically is call this function for me.

And that's amazing because now I can execute code and algorithm to check.

Do I want to let the user the programmer set that attribute to that value?

If not,

I'm gonna raise the value air and you're just not gonna be able to do it if so fine,

I'll go ahead and set it for you.

But in order to do this we need a little more syntax and I'm

going to get rid of my comments and I'm going to use that decorator.

I need to tell python to treat this method as a getter.

And then the syntax for the center is a little different.

You now say house dot setter. I wish one was getter and the other was setter.

That's not the way they designed it.

When you wanted to find a getter,

you just say at property above the function and you name the

function exactly like you would like the property be called quote,

unquote house.

Once you do that,

you can now use a new decorator that's sort of automatically created for you called

at house because I called it house and then you literally say at house dot setter

and this whole line on line 17 is a clue to python that here comes

a function whose name is identical but notice that it takes two arguments both self.

So you have access to the contents of the object

and house.

Which is just going to be a stir that comes from the programmer from like

the human input return value so that you can set that value as well.

But there's one fix I need to make now here. Everything else I think is still good.

However, watch this. I no longer need this error check here. Why?

Because

if I scroll back down to my code here, I claimed a moment ago that code like this

with

uh student dot house equals is going to automatically

get python to call my center for me.

Guess what?

Even up here in my in it method calling self dot house equals is also going to call

my setter method which is amazing because now I

can keep all of my error checking in one place

in the center and it will now get called either when

I create the object for the first time because of in

it or even if the U of the programmer tries to

circumvent that innit method and change the value of this attribute.

My center will also get called my setter will get called anytime I access

dot house

but there's one fix I need to make.

Unfortunately I have collided names right now if we go up here on line five,

this is an instance variable.

It's a string inside of myself inside of the current

student object called name and this is another instance variable

called house.

Unfortunately if I have an instance variable called name and house,

I cannot also have functions called house,

they're going to collide,

you've got to decide do you want the variable to be called

house or do you want the function to be called house?

Unfortunately you can't have both because now python

is going to confuse one for the other.

So the conventional fix for this is to do this

to have the setter

not store the value that's passed in in self dot house but to use

an almost identical name but to use a little indicator that you means,

you know, you're doing this correctly.

You typically by convention put an underscore in front of

the instance variables name

and when you return it up here you similarly put an underscore.

So now technically my instance variable is called underscore house but my property

which is a fancier attribute if you will is called house alone,

huge amount of syntax.

I know, but it's a very powerful feature and again,

this is why you can graduate from dictionaries alone

and have so much more functionality at your disposal.

Let me go ahead and clear my terminal window and run python of student dot pi enter

name. Alright, let's go ahead and type in harry,

let's go ahead and type in Gryffindor, crossing my fingers as always and now look

invalid house. This is a good thing why?

Because notice in my main function I'm still trying maliciously if you will

to change Harry's house to not be one of the four valid ones,

I'm trying to change it to his childhood home of

number four privet drive but because python knows that wait a

minute you're trying to assign that is set a value and

that value aka house is now defined as a property.

You're going to have to go through the setter

function instead to even let you change that value.

And because I have this raised value error if the House is not as

intended you're not going to be allowed to change it to an invalid value.

So I'm protecting the data on the way in through the Senate method

and I'm even defending the data if you try to override it there.

So I think the only solution for me, the programmer is don't try to break my own code.

Let me remove that line because it's just not going to work.

Let me run python of student dot pi and again, type in Harry type in Gryffindor enter

and Harry is indeed from Gryffindor.

If I did something incorrect like Harry From # four Privet

Drive,

enter we're again going to see the value error because my code just doesn't

let that value in via manual input now or via that adversarial change.

Alright, that was a lot.

But any question on

properties

and properties again, give us the ability to define getters and setters,

respectively.

Using new syntax like at property but ultimately they're allowing us

to decorate some functions we wrote with this special behavior Nikita,

can you hear? Yes, we can.

Yeah.

So my question is while we're using getters and setters,

it's it's just for it's just for the purpose so that we can

find out that function and that method that function in in our goal,

is it

my radar?

Well, the I think if I'm hearing your corruption correctly,

the reason that I'm going through the trouble of defining this getter or setter

is because I want to make sure that programmers cannot do things like this.

If I'm going through the trouble of validating

the attributes for these student objects,

I don't want you to be able to go in there and just change them at will I want

to have some control over that object so that you

can just trust that it's going to be correct.

As designed.

So using a getter and setter really just enables python

to automatically detect when you're trying to manually set a

value the equal sign and the dot as I've highlighted

here is enough of a clue to python to realize,

wait a minute you're trying to set a value.

Let me see if this class has a setter defined and if so

I'm gonna call that and I'm not just gonna blindly assign

the value from right to left.

So it's just giving me more control

other questions on properties.

Yeah. And Andres

Yes, thank you.

That means that when we use getters we just have used one argument

and if we use setters is always going to be two arguments,

it's not normal

correct. It's always going to be one argument

self for the getter

to arguments for the center self and something else.

And the intuition for that is if you're getting a value you don't

need to pass anything else in because you already know the object.

It's called student in this case.

So you're just going to get the value of that property.

But if you want to set the property to something else,

you've got to pass in that argument,

you've got to pass in the value to which you want to set it.

So it's always zero or one.

However you see it as one or two because again,

any function inside of a class A K A method is going to be

automatically past self so that you have access to that current object in memory.

How about one other question on properties or the like Philip

Oh yes. Hello. I just wanted to know

like okay, we are using this underscore house in centers in order to not,

not to collide with with method with with functioning,

but why didn't we use the same underscore house in any method?

Maybe

maybe I missed it. But

a good question.

So even though I'm using the underscore house here in

my center and the underscore house here in my getter,

I deliberately did not use it

up here.

The reason for that

is that by using self dot house and this equal sign,

that's the same pattern that I want python to recognize.

I want python to automatically call the center

even when I'm passing in the house via the innit method.

If I were to change this to do this,

that would circumvent the center

and now there's no error checking in it whatsoever.

So it's such a fine line.

The only thing standing between us and error checking or no error checking

is the presence or absence of this underscore.

But that's typically the convention by not using the underscore their,

make sure that even that assignment goes through the

center so that honestly I don't have to copy,

paste the same error checking in to places I can put it just

in the center. So it's better design.

And that's why I manually retyped it at first but then I deleted it

from in it.

Well allow me to propose that we make one other change to this file.

Might as well go ahead and define a property for name as well and let

me go ahead and do this may be above the house property just to keep things

in the same order as I define them earlier,

let me give myself another property.

This one is going to be called name,

it's going to take one argument called self as always.

And this one very similarly it's just gonna return self dot underscore name.

So I'm going to anticipate then I'm gonna have to rename

name also so that I don't have that same collision as before.

But now let me go ahead and define

another center. This one for name. So the convention is at name dot setter. Why name?

Because the property I just created

is called name.

So the getter and setter sort of work in conjunction in that. In this way if you will

let me go down under at name setter and define another function also called name.

But the key thing here is that it's not identical. It's not the exact same function.

Name and the exact same number of arguments.

The center again takes a second argument and I can call it anything I want.

But I'm gonna call it name because that's what's being passed in

and I'm gonna put my error checking here.

If not name, just like we used to do,

let's go ahead and raise the value error

and let's put an explanatory message like missing,

name, quote, unquote.

Otherwise let's go ahead and update self dot underscore

name to equal name and I don't have to change

in it except to get rid of this duplicate air checking now because again,

if I use self dot name equals here and self dot house equals here with

no underscore both of those assignments are going

to go through my two setter functions.

Now

let me go ahead and go back to my terminal window.

Run python of student dot pi

enter.

Let's type in Harry, let's type in Gryffindor and it does not work

griffin door.

What did we do wrong?

It's nothing.

Oh okay.

And it does not work because I didn't delete the number four privet drive.

So let me pretend like that didn't happen

before we run this.

Let me go ahead and remove this adversarial code

which we know won't work because we're catching it.

Let me go back down to my terminal window and run python of student dot py enter.

Let's type in Harry, let's type in Gryffindor and that seems to work.

Let's try though again to run python of student

dot pi with Harry from number four privet drive.

This will not work a value error with invalid house

because that's not one of the four Hogwarts houses.

And now for good measure let's run it one more time and let's not even give it a name,

let's just hit

enter when prompted.

I can type anything for the house, I'll go ahead and still give it griffin door enter

now we get another value error but this one is for missing name

so we seem now to have all the more of a

defense mechanism in place to ensure that name is as we expect

it's got to have some value that's not blank and houses

as we expect it's got to have one of those four values

but at the risk of bursting everyone's bubble and making you

wonder why did we just go through all of that?

Unfortunately, python really focuses on conventions,

not hard constraints

and by that, I mean this, if I go back into my main function

After I've gotten a student online 30

and I try to adversary lee do something like this.

Student dot house equals quote unquote number four privet drive.

We know this won't work because my center for house is going to catch this.

Watch again,

python of student dot pi

Let's type in Harry

Let's type in Gryffindor which will at least pass our check that's induced by in it.

But line 31 is going to trigger the same center to be

called and we're going to raise a value air saying invalid house

unfortunately.

And if some of you are already thinking a

little adversary really tragically look what you can do,

you can change dot house to be dot underscore house. Why?

Well the instance variable is now called underscore house.

The property is called house no underscore but

the underlying attribute implemented as an instance variable

is still called

underscore house and tragically

python of student dot pi.

Let's type in harry, let's type in Gryffindor, which is correct,

but watch what happens now.

Oh my God,

we slipped through.

So what was the point of all of this emphasis from me on doing things the right way.

The python IQ way by having this getter and setter?

Well, unlike languages like java

that just prevent you from doing things like this,

python itself allows you to specify that certain instance variables can

be public and accessible to anyone's code or protected or private,

which means that no one else should be able to change these values.

In the world of python,

it's just the honor system.

It's not baked into the language itself that there is a notion

of visibility public or private or even somewhere in between protected.

Instead you're on the honor system. And the convention generally is

if an instance variable starts with an underscore,

please don't touch it. Like just don't like that's on you.

If you touch that variable and break things.

The

underscore is meant to signify a convention that this is meant to be private,

but it really just means please don't touch this.

Sometimes if there's two underscores,

which you can use to that's an even greater effort by programmers just say,

really don't touch this.

But technically speaking,

there's nothing stopping

but tech. Sorry,

let's get rid of this. So we end on a good note before break,

but technically speaking there's nothing stopping you or

me from circumventing all of these mechanisms,

these properties, these getters and setters

were ultimately just on the

honor system not to do so when we see instance variables prefixed

with one or perhaps even to underscores,

Let's go ahead here and take a 10 minute break.

And when we come back, we'll see some final capabilities

Of object oriented programming

in Python.

See you in 10.

why?

Alright, we are back, we'll give folks a moment to resume. Um Any questions?

I know that was a lot.

This has been dense already,

but this is where we're sort of graduating to a new paradigm of programming

and rest assured if you've only been watching

the lectures live the past few weeks but

haven't actually done all of the assignments and

not all of the assignments are even up.

It's okay if you're feeling like programming,

just got very real michael questions.

Yeah.

So would it be accurate to say that the property

of of an object would have to be defined by

one of these functions are defined as a function rather

than So it is that's distinct from an attributes,

such as the way we had it before.

Self dot name was just a variable

uh correct.

So the terminology here is an attribute is anything that comes after a dot

in the context of an object and that could be an instance variable,

which is just a variable inside the object or it

could be a function like one of these properties.

So a property yes. Is always a function in python.

That's how they are defined by a getter and a setter.

Oh, we lost your mike. You want to meet again.

It's not letting me. There we go.

There we go. Okay. Um so our property is always defined with the property decorator

for all intensive purposes. Yes.

A decorator though is just syntactic sugar for

what would otherwise be an explicit function call?

Maybe carter if you don't mind googling python property function.

There's an alternative syntax, Michael,

but I would say that no one does it that way because

the decorator is meant to make things prettier and just more readable.

Okay. So would a method be a property as well or are those distinct?

Only a method is only a property If you the programmer

define it as a property as via the app property keyword.

Okay. Thank you. Sure. Other questions.

Yeah. Gene.

Hello? Hello.

Oh

my question is,

can decorators

be customizable

for example, at my own decorator?

And if so how

uh let me defer the how to another time or perhaps to a U. R. L.

That that carter can paste into the chat.

But yes, a decorator is just a function that gets called on another function.

The at sign is a special syntax to just make this easy.

But this is similar to Michael's question.

There's other ways to invoke decorators.

The at property decorator comes with python, it is not something we invented.

It just works with the language. You can create any decorator you want.

If you take CS fifty's course on web programming,

you'll see ones that allow you to decorate routes in web applications.

For CS fifty's check.

50 program we use decorators to indicate that a

function is a check so anyone can create decorators,

but at property it just comes with python.

That's a property function that comes with python.

And let me see if carter can just point you at some related reading.

How about time for one or two more questions before we resume

Maria.

Hello David. How we can save all this data for each student.

How can we save all? As in if you had multiple students in memory

So different ways. So right now we're as complicated as these examples are.

I'm trying to keep them as simple as possible

by only dealing with one student at a time.

And of course when the program ends we

throw away harry's information or Draco's information.

If you think back a couple of weeks to our file io

lecture you could imagine storing all of this data in a C.

S. V. Permanently.

You could imagine now maybe reading from that C. S. V.

And instead of reading the data into a dict reader,

like a dictionary reader you could actually read it into a list of objects,

each of which is a student class.

So this is just another way of allowing us to represent the data.

Or again if you take CS fifty's web programming class taught by a colleague of ours

you can store the data in a database to and you can manipulate the

data with python code and classes but you can save it in a database.

All we're doing today is giving you more tools

to manipulate data wallets in the computer's memory.

How about one final question before we resume

jean Luc

I wanted to ask if it's possible like for the for the user actually too

add more data for example. I don't know if you have information about

um a second name, like another variable like

short answer. Yes.

I mean we I've been using name and house so that

we have something canonical but also simple with just two strings.

You can put any number of instance variables or even properties inside of a class.

And indeed in a bit we'll see some examples of

classes that actually have many more values inside of them.

Yeah. But what what what is the user not the developer? What is the user?

I mean can we grant the user like access to the variable like to add some data? So yeah.

Good question. Let me come back to this line of code here.

Um And user,

let's assume that the user is the non programmer who's just using the keyboard.

So I think you mean the programmer like me or you who is using this student class?

Yes. You could do something like this.

You could say student dot something equals 123.

There's nothing stopping the programmer for putting any number

of pieces of data inside of the object.

Um Generally though just don't do that. You shouldn't do that.

Python is not gonna stop you from doing that but you just shouldn't do that.

And this is a this is part of the python mindset. It's very different from java, java.

Which is very commonly used in enterprise applications where

you really want things to be very correct,

very testable.

Not circumvent herbal, that's a feature of java.

It's also really annoying sometimes because you can't

do things you might want to do.

Python is nice,

ruby is nice because it supports even a feature known as monkey patching,

whereby you can actually

change the inside contents of objects and classes and

that's actually really useful if you want to add

functionality to someone else's code without them having thought

of to put that functionality in its place.

But the downside is it's really easy to break things and do things you shouldn't.

So the python mindset is please don't do that,

but if you really want to, you can

All right, let me get reset here and well, we won't have this.

This latter portion of the lecture will not be nearly as long,

I don't think as the first part, but we'll give you some final building blocks.

You're gonna some of this will still feel technical. It's gonna feel like a lot.

But again,

especially if you go back and start or finish all of the

courses problem sets as they're released weekly up until this one.

Hopefully you should find that this material with object oriented programming,

not only gives you a few new tools in your toolkit again, so to speak,

but hopefully what's your appetite for just doing more and more programming

because now you have just more ways of designing better software.

These are solutions to problems that again we tried to

motivate early on by creating code that was a little uh

a little messier, a little less um a little less structured

if you will. All right, give us just a moment here to get set again.

Yeah.

Alright. So this is a lot all at once.

This introduction to object oriented programming.

But it might come as quite a surprise that even though

we might have identified 00 P by name in weeks past,

we've all been using classes and objects for weeks now in this class.

In fact, if you think back on one of the very first things we did in this class,

we used integers and just got integers from the user.

But if you haven't already,

if you go and dig into the documentation for integers which again lives at this.

U r L here.

You would actually find that in

itself is and has been for weeks a class.

And in fact This is the signature of the constructor

called for an end whereby you pass an X.

Like a number, quote,

unquote 50 or quote unquote something else you pass and optionally

the base 10 for decimal two for binary or anything else.

And that in function will actually return to you all this time an object of type.

That is to say it is a class.

It is a template,

a blueprint for creating integers in memory and any time you

and I have converted a string for instance to an ant.

You and I have been creating an object of

type plant that was calling apparently the underscore underscore innit

underscore underscore method that someone else the authors of

python wrote to give us back that proper integer.

Besides that,

if you can believe it stirs strings in python have been

classes since the first week of this class as well.

If you look up the documentation for a stir which lives in a similar U R L.

There you will find that when you install an she ate that is create a stir.

It takes optionally

a parameter called object here.

The default value of which is just quote unquote which

allows you to create an effect an empty string,

a blank string if you will.

But any time you and I have created stirs or even used explicitly this stir function,

you're getting back an object of type stir

anytime you and I have forced a string to

lowercase per the documentation using syntax like this.

You and I have been taking an object of type stir

and forcing it all to lowercase by calling a method called

lower a method that the authors of python built into the

stir class but it's been there from the get go.

So this notion of methods is not even new today.

You would have been doing it for this long if you've ever called strip

to remove the leading and the trailing whitespace from a string in python,

you are calling another method that came with

python written by the authors of python.

And even though we didn't call it a class at the

time a stir all this time has been a class and

instances of strings are themselves objects and those objects

come therefore with these functions built in a K.

A methods

that allow us to do things like forced to lower case

and strip whitespace from the beginning and end.

Let's do another list anytime you've created a list

either either sent tactically with square brackets or

literally with L I S T open parenthesis.

Close parenthesis, which is also possible.

You have been using a class if you go to the documentation for list at this.

Similar U R L here or more specifically the tutorial unlisted here in python,

you will see that a list

is and has been since the early weeks of this class, a class itself.

And that click list class

takes as part of its

initialization and optional iterable something that can

be iterated over like one comma two,

comma three or some list of values.

And you can then get back a list containing

those same iterable values.

If you've ever appended something to a list in this class as I have myself in the past.

You've been using a method called append.

That comes with the list class that per the X

here takes an argument that allows you to append something

to the current list a K a self.

In the context of that method,

we can do this all day long if you've used a dictionary or addict in python,

I've actually all this time been calling them dict objects and that's for a reason.

Dicked itself is a class in python.

If you pull up its official documentation here and you'll

see that it is defined indeed as itself a class.

And that class comes with methods as well.

And so anytime we've manipulated dictionaries,

we've been in underneath the hood using all of those

same methods and in fact we can see this.

If we're really curious, let me go back over here to V.

S code and let me go ahead and create a

new file that very simply does something like play around

with data types and let me go ahead and create

a new file for instance called say type dot pi.

Just so that I can poke around inside of some values and type dot pi.

I'm just gonna go ahead and do this.

I'm going to print out whatever the type is of say the number 50 and this is a function

you've not necessarily seen me use already and it's not

one you would frequently use in your own code.

There are other ways to detect if you need to what the type is of a variable.

But in this case

type of 50 is just going to tell me and then

print out what the data type is of that value Now.

Hopefully all of us could guess that 50 is indeed going to be an integer.

That is an end,

but we can see it in this way and this

too is what's powerful about knowing a bit of programming.

If you want to know the answer to a question,

just try it out. Like I am here.

So let me go ahead and run python of type dot pi enter and there it is.

When you print out the type of the number 50

you'll see on the screen in this cryptic syntax class,

quote, unquote end.

This is not something that you probably want to show to the user but if you yourself

just want to poke around and see what's

going on or maybe use that information somehow.

It's certainly at your disposal to use with this type function for that.

Let's change it around a little bit

Instead of passing is the argument to type 50 as an end.

Let's type something also familiar like Hello,

comma world in double or single quotes.

Let me go back to my terminal window,

clear the screen and run python of type dot pi again.

And now voila there it is all this time. A stir is also a class.

We can do this a few more times for instance, let's go ahead and change Hello world

to just an empty list, Open square bracket,

closed square bracket and this is starting to look a little cryptic but again,

notice what I'm doing in square brackets is an empty list.

We've done that before.

That is the sole argument to this new type function and that's just being passed to

the print function so that the return value of type is the argument to print.

So if I now run this code python of type dot pi

there it is a list is a class two.

You might recall that I said that you can

also create an empty list by literally doing list,

open parenthesis, close parenthesis.

This is a bit of an inconsistency

as we can now identify that in

and stir and now list. They're technically all lower case.

And I went to great lengths of creating my student class

to have that capital s.

That's a convention because in

and stir and list and others come with python.

They decided to make their built in data

types even though their classes all lower case,

but the convention,

the recommendation in the python community when creating your classes Indeed,

to capitalize the first letter as I did in something like student

capital s but list, open parenthesis,

close parenthesis is identical to really just to empty square brackets.

If I clear my screen and run type dot Hi again, you see the exact same thing,

the class is called list.

Let's do one more. Let me change list to be not square brackets, but curly braces.

We've done this before any time I've done two

curly braces with nothing in between this of course,

is an empty dictionary or a dict object in python.

Well, we can see that now.

Let me clear my screen, run python of type dot pi enter and there it is.

Class dict, It's been there this whole time,

we just didn't call it a class until today.

I can similarly do this one explicitly instead of two curly braces.

Let's write out dict with two parentheses. Now we have a lot of parentheses again,

like with list,

but this is just making even more clear that the type of addict object is indeed

the class dict itself.

So this is to say that as new as a lot of today's idea and

syntax might be you've actually been using it

perhaps unbeknownst to you for weeks now,

we now just have terminology to describe what it is.

We've been doing all this time and you now have the expressiveness with some

practice to create your own classes inside

of which are your own instance variables.

Perhaps wrapped with those properties and your own instance methods.

But it turns out there's other types of methods in the world thus far,

I've been deliberate in calling all of our variables,

instance variables and all of our methods.

Instance methods.

It turns out there's other types of variables and methods out there.

And one of those is called class methods,

it turns out that sometimes it's not really necessary or

sensible to associate a function with objects of a class,

but rather with the class itself,

an instance or an object of a class is a very specific incarnation thereof.

Again on that neighborhood that has a lot of identical looking buildings,

but they're all a little bit different because of different paints and such.

Sometimes you might have functionality related to each of those houses

that isn't distinct or unique for any of the houses,

its functionality that's going to be exactly the

same no matter the house in question.

Same in the world of object oriented programming.

Sometimes you want some functionality,

some action to be associated with the class itself,

no matter what the specific objects own values or instance variables are.

And for that we have a keyword

called at Classmethod, this is another decorator,

really another function that you can use to

specify that this method is not by default,

implicitly an instance method that has access to self, the object itself.

This is a class method that's not going to have access to self,

but it does know what class it's inside.

So what do I mean by this?

Well,

let me go back to the s code here and let me propose that we create a new file this time

implementing the notion of a the sorting hat from the world of harry potter as well.

To stay on theme, I'm gonna go ahead and run code of hat dot pi.

And in hat dot pi, let's implement the notion of this sorting hat if unfamiliar

in the books and in the films,

there is literally a pointy hat that when a student put it on their head,

that sorting hat, so to speak, decides what house the student is in,

whether it's Gryffindor or something else.

So let's implement encode this notion of a sorting hat

such that when we pass to the sorting hat,

the name of a student like quote unquote harry.

This sorting hat implemented in code will tell

us what house that students should be in.

All right, well let's go ahead and do this

in hat dot pi first. Let's go ahead and define a class called hat.

And then let's get back to implementing it itself.

And I find this to be a helpful technique, not just with teaching,

but when writing code like I know I want a hat class,

I don't necessarily know what I wanted to do yet.

So I'm going to create this sort of placeholder dot dot dot. So I'll come back to that,

let's now try to use this class as though it existed and from there, I perhaps can

realize exactly what functionality that class needs to have to support my use case

let me go ahead and create a variable called hat.

In all lowercase and inst an she ate a hat object.

So no matter what the hat class ends up looking like this

is the common syntax for instance creating an object of a certain class

in the past we saw student all lowercase equals capital student open parenthesis,

close parenthesis.

And then eventually we added in things like name and house. For now

let's assume that the hat is much simpler than a

student and it only has sorting capabilities so I'm not

going to even pass any arguments there to indeed let

me assume that the sorting hat has one function.

One method inside of it called sort.

And so if I do hat dot sort, quote unquote Harry,

let's propose that that prints out what house that student should be in.

So that's it. I'm going to encapsulate that is tucked away inside of a hat class.

All of this requisite functionality

and I'm going to print out onto the screen what hat? What house Harry belongs in.

All right now, I think I need to get into the weeds of actually initializing

this class.

We'll let me go ahead and do this.

If I don't care to parameter arise hat I just want to for instance sort values.

Let's go ahead and define this function sort first.

So let's define sort as taking the first argument self,

which is always going to be the case when defining an instance method as before,

but the sort method clearly takes one argument

from the programmer me namely the student's name

and again we've seen this dichotomy before,

even though I'm trying to pass in one argument.

When I define the method, it's gotta take that many arguments plus one more self,

which is always going to be automatically passed in by python first.

Alright, what do I want to do?

Well, let's go ahead and do something like this.

Print quote unquote or rather print

this name. How about quote unquote is in

quote unquote. Some house.

I'm going again use some placeholder code for myself

because I'm not quite sure how to finish implementing

the sorting hat.

But I think that's enough to just test where my coat is at Now.

Let me go ahead and run python of hat dot pi and hit enter.

And it looks like indeed Harry is in some house.

We're not done yet because it's clearly not doing anything interesting,

but at least is running correctly with no errors.

Well,

let's go ahead now and decide where what

house Harry should actually be in by introducing a

bit of randomness and choosing house randomly while I can do this in a few ways.

Let me go ahead and do this. I need to have a list of houses somewhere.

So where can I put that? I can solve this problem in different ways.

Let me propose that I do this. Let me define a method called in it as I've done before.

That takes itself. But no other arguments.

And whenever the sorting hat is in stan she hated let's do this.

Let's create a houses, instance variable plural that equals this list.

Gryffindor,

comma hufflepuff, comma, raven claw, comma, slytherin.

So the exact same list that we've used before and I'm

storing it in an instance variable inside of this class.

I'm not taking any arguments beyond self in it,

but I just need this list of values somewhere for instance.

So what can I do here?

Well, let me go ahead and replace some house with the actual house.

Well, what can I do here? Well, I want to put a house there.

Well, let's go ahead and create a variable called house.

And if you think back to our discussion of libraries in the random module,

there is a function called choice.

That if you pass in a list of choices like self dot houses,

that will pick a random house out of those four and then online seven,

I can pass it in if I want to tighten this up.

Let me just go ahead and highlight that code.

Get rid of the variable is technically unnecessary.

And because the line of code is still pretty short, I'm okay with just putting it all

in one line. But I could certainly use the variable like I did a moment ago.

So what have I done

in my in it function.

I have defined a initialization of the object that stores

and self dot houses the list of four houses.

And then in sort I'm accessing that same list, but I'm randomly choosing

the set of houses there now. Why have I done it in this way?

This too is general convention.

Anytime you have a list of things that who knows, maybe will change over time.

Places like Harvard have constructed new houses over the years,

so you might have to change the list of available houses.

It didn't happen in seven books or films of Harry potter,

but you could imagine maybe Hogwarts eventually has 1/5 house.

So there's generally some value

inputting list of constants toward the top of your file, toward the top of the class.

So it's just obvious what the list of values is.

You don't want to necessarily tuck it away in some function

like sort especially if you might want to use that function.

Sorry. Especially if you want to use that list in multiple functions.

Not just short, but if I kept adding to this class,

you might want to use that same list of houses and multiple functions.

So let's keep it in the object itself by storing it in self dot houses.

Alright, well, we're about to change the course of history here.

Perhaps let me do python of hat top I.

And I think we're about to assign Harry to one of those four houses randomly.

Huh? Name error. Name random is not defined. Well, wait a minute.

Where did I go wrong here?

Thinking back to our class on libraries,

why did my code break and not tell me where harry is to be.

Yeah, Gene,

you do not import the random library.

Exactly If the random library or module is something I want to use.

I need to tell python that at the top of my file.

So let me go up here and do import random and then below that,

let me go ahead and clear my terminal window and try again, python of hat dot pi,

crossing my fingers, seeing where Harry is going to end up

and okay.

Harry as of now is officially in hufflepuff despite everything you've read or seen.

Well, let's run this again.

Let me clear my window and run python of hat dot

pi and now he's in ravenclaw that's consistent with using random.

Let's clear that and run it again. He's still in ravenclaw.

But that could happen even though there's four choices. Let's do it again,

hufflepuff back in hufflepuff. We can't seem to get the right answer, so to speak.

Now he's in gryffindor, albeit randomly.

So we seem to have a program that based on these limited

tests seems to indeed be assigning Harry to a house randomly.

Now I'm somewhat lazily just letting sort print out this value.

I could do something else.

Like return a string and then let me on line 13 do the printing for me.

But for now I think we have an example

of a class called hat.

That nonetheless applies some of our lessons learned thus far today

where I've created a class because a sorting hat is frankly,

well I was about to say real world entity,

but really a fantasy world entity and indeed that's

a perhaps common heuristic or mental model to have.

When should you use a class to represent something in your code?

Very often when you're trying to represent some real

world entity or fantasy world entity like a student,

which is something in the real world, like a sorting hat, which okay, doesn't exist,

but hats certainly do so quite reasonable to have a class for hat

and that's not always the case that classes represent real world entities,

but indeed we've seen thus far that in and stir and list and

dict these are all structures that you might have in the real world.

We have integers and strings of text and other things.

So it rather makes sense to represent even those things. More technically

using a class as well. You could use just a dictionary to represent a student or a hat.

But again, with classes come all this and even more functionality,

but I honestly am not using classes in really the right way here. Why?

Well in the world of harry potter, there really is only to my knowledge,

one sorting hat and yet here I have gone and implemented a class called hat

and again a class is like a blueprint, a template,

a mold that allows you to create one or more objects thereof.

Now,

most of my programs thus far have been pretty simple and I've just created

one student but certainly if I spent more time in wrote more code,

you could imagine writing one program

that has a list of students. Many more students

than just the one we keep demonstrating.

Yet. It would be a little weird.

It's a little inconsistent with the real or the fantasy world of harry potter

to in stan she ate 123 or more sorting hats

there really is just one

really one singleton if you will,

which is a term of art in a lot of context of programming.

So let me propose that we actually improve the design of the

sorting hat so that we don't have to install Tan she ate

a sorting hat because right now this is kind of allowing me

to do something like hat one equals hat hat two equals hat.

Hat three equals and so forth. I don't really need that capability.

I really just need to represent the sorting hat with a class

but I don't really need to install an she ate it.

Why? Because it already exists. I need just one.

So it turns out in python

that up until now we've been using as I keep calling them

instance methods.

Writing functions inside of classes that are automatically passed.

A reference to self, the current object, but sometimes you just don't need that.

Sometimes it suffices to just know what the classes and assume

that there might not even be any objects of that class.

So in this sense you can use a class really as a container for data

and or functionality that is just somehow conceptually

related things related to a sorting hat.

And there's this other decorator or function called class

method that allows us to do just this.

So let me go back to my code here and let me propose that

if I'm not going to instacheck, she ate

multiple houses.

I don't really need this emit method because that's

really meant to initialize specific objects from that blueprint,

that template that mold.

So let me get rid of this. But if I get rid of this, I no longer have access to self.

But that's okay because it turns out in addition to their existing

class methods,

there are also what we might call class variables

and class variables exist within the class itself.

And there's just one

copy of that variable for all of the objects there

of they all share if you will the same variable,

be it an inch or stir or in this case a list.

So what I've done here is defined inside of

my hats class in class variable called houses.

I don't say self because self is no longer relevant.

Self refers to specific objects. I want a variable inside of this class.

A a class variable that equals that list because it's inside of this hat now, class,

I can use that list in any of my functions.

I've only got one now called sort but if I had more

it would be accessible to all of those methods as well.

And with sort it also doesn't really make sense

to sort within a specific sorting hat because again,

I only want there to be one.

So I can actually specify that this is a class method

by saying at classmethod and I don't pass in self anymore.

I actually by convention pass in

the reference to the class itself.

It's typically written as C L S Y Well,

if you wrote c l a s s that would actually

conflict with the keyword class that we keep using up here.

So the world realized that oops, we can't reuse that same phrase here.

So let's just call this class.

This is useful in some context including this one. Why?

Well, notice what I can now do,

I can now change self to be just class. Why?

Because houses now not an instance, variable accessible via self dot houses.

It is now a class variable accessible via class dot houses or technically CLS

dot houses in this case.

But now the final flourishes this.

Now I don't have to install banshee ate any hat objects as I used to on here line 13.

I can just use functionality that comes with this class.

So I'm going to delete that line altogether.

I'm gonna capitalize the hat on this new line 13 and just say hat dot sort,

quote unquote Harry.

So what have I done?

I've not bothered instance creating an object of type hat I am just accessing a

class method inside of the hat class that you know what is just gonna work.

This is how class methods work.

You use the name of the class capital letter in all dot method.

Name passing in any arguments you want,

Python is going to automatically pass in some variable

via which you can refer to that class in

that function that you've implemented inside of that class

so that I can do something like this.

It's not that I want a variable called houses locally in this function

I want the variable called houses that's associated with this current class.

So I can still access this same list that I defined on line six

And now if I go back down here to my terminal and run python of hat top, I enter

Harry is still in hufflepuff. Once more, Harry is still in hufflepuff. Once more.

Harry is back in Gryffindor. At least randomly

questions now on these class variables or these

class methods which are in contrast with instance

variables and instance methods and the one thing

at least that's a little strange here,

is that even though there's a decorator called at classmethod.

There is not one called at instance method.

A method is just automatically a so called instant method

when you define it without any decorator.

Yordani, if I'm saying it right,

Hi, can you hear me?

Good question. Can you have?

Because I know when you create a class,

sometimes it gets bigger because you keep adding methods, can you have a class

inside another class?

You can you can define one class inside of another.

Generally speaking, this isn't done, but there are cases where it can be helpful,

especially for larger, more sophisticated programs.

So yes, it is possible

other questions on classes or class methods or class variables. Daniel.

The question was about the self dot houses.

When you when we remove it, we and we passed the data.

The variable is created itself before when we put self dot houses,

we were telling the the the classroom

create that variable

when you start or why we remove themselves.

So in the previous examples,

both of the hat demonstration and also all of the student demonstrations, we were

uh creating a student object by calling student capital s open

parenthesis close parenthesis with eventually name in the house passed in.

And then we were using the double the double underscore innit method to

initialize the self dot name and the self dot house instance variables there in

to those respective values

in this latest version of the sorting hat,

I haven't bothered with self anywhere only because conceptually I don't

need or want there to be multiple hats in the world.

I'm just using the class

is kind of a container

to bundle up this list of houses. This sorting functionality.

Maybe eventually I'll add more functionality to it, but that's it.

And so sometimes you can use object oriented programming in this

somewhat different way when you want there to be functionality,

but it's not specific to any one specific

hat it's specific to the sorting hat itself.

How about one other question now on

these class variables or methods?

Just another way of using object oriented

programming but to solve somewhat different problems,

Yan,

can you hear me now? Yes, we can. Okay, that's great.

So, I want to ask if, well, what's the difference between the class head

and I know like a function

of hat

because it seems the same to me

because you know, you can print

in a function, you can define a list of houses within a function.

So why is it a class? A good question.

So why are we using a class at all and not just having a file called hat dot pie with

a variable called houses and a function called sort like

why are we adding this complexity in this particular case?

We don't necessarily need to, I could absolutely go in here.

I could get rid of the class.

I could undo this indentation,

I could get rid of this decorator and I could get

rid of the hat dot and I could just do this.

And additionally, let's see, let's get rid of class here.

Let's get rid of class here and now run python of hat dot pi enter and it still works.

Put harry in the wrong house. But that's what happened. What happens randomly.

That's fine too.

What we're introducing today by way of object oriented programming,

it's just a different way of modeling the world.

It's not really compelling with an example like this, frankly,

that's relatively simple.

It's not very complex. There's not much functionality.

Honestly, the version that we just typed up these 10 lines,

this is fine, this solves this problem.

But as our code gets longer as we start collaborating with other people

is the problems we're trying to solve with could get more sophisticated,

you're going to find that your code gets messy quickly and you're

gonna find that you have a huge number of functions for instance,

in one file and some of them are related to each other,

but some of them are not Well at that point,

wouldn't it be nice to just organize them a little differently.

And in the world of harry potter, let's have a class for students,

let's have a class for professor, let's have a class for the sorting hat,

let's have a class for something else.

And so once your world gets much more complicated than some of the demonstrations

we do here in class when we want to focus on individual ideas.

Object oriented programming is just a way of encapsulating related data,

that is variables related functionality that is methods

inside of things that have names. These things are called classes.

So it's just another way to solve problems.

And when we focused on libraries a couple of weeks

back that too was another solution to the same problem.

You can define your own modules or packages,

put some of your data and or functionality in there and that's fine too.

And sometimes which one you should use overlaps.

If you're familiar with ven diagrams,

the overlapping region might mean that you could use a class,

you could use a module or package, you could just use a single local file

over time you'll develop an instinct and maybe even a personal preference for

which tool to use.

Alright,

let me propose now that we apply the same idea of

a class method to clean up one other thing as well.

Let me close hat dot pi and reopen student dot pi as

we left it earlier and let me go ahead and simplify it.

Just a little bit.

I'm gonna go ahead and get rid of the

property's not because there's anything wrong with them,

but just because I want us to focus on some

of the key ideas when we began with this program.

So I'm gonna go ahead and keep maine as well.

I'm not gonna adversary lee try to change harry's address there.

I'm gonna instead go ahead though and just print the student

but this is the thing I want to focus on here.

This in our previous student examples was kind of

a missed opportunity to clean up my code.

Well what do I mean by that?

Well, up here at the top of this file,

even though I've simplified it by getting rid of

the properties and all of that error checking,

because I want to focus on the essence of this class.

Now, just the student's name in the house and the printing thereof.

This is by nature of classes and object oriented programming,

theoretically all of my students specific functionality

that is to say if I have functionality and data related to a student,

you the programmer,

my colleague would assume that it's all bundled up encapsulated, so to speak,

inside of the student class.

And yet if you scroll down further,

what is this like there's a function called get student that just exists

elsewhere in this file that prompts the user for a name prompts.

The user for a house creates the student object and then returns it

like that's not wrong. Like it works. And we saw many many times it kept working.

But this is a little weird right because what if this is a function that helps you

get a student helps you get the name of a student and the house of a student.

Why isn't that functionality in the class itself after all is

my code gets more and more complicated and does more things.

I'm going to be looking at the student class for all student related functionality.

I'm not going to be scrolling down expecting that.

Oh,

maybe there's some other student functionality just

kind of randomly later in this file.

So it's not wrong.

But this is again evidence of maybe bad design, not so much with this small program,

but this is an example.

Again of code smell like something smells a little off here.

Like this is probably going to get

us in trouble by separating related functionality.

So again, it's a design principle, not a correctness concern,

but class methods allow us to address this to

let me go ahead and do this. I'm going to delete get student altogether,

leaving only main as my other function here And inside

of my student class I'm going to do this,

I'm going to define a function even more simply called

get And by nature of how class methods work,

it's going to take in the name of the

class itself or reference there to as an argument.

And I'm going to move the functionality from get students into the student class.

I'm going to do this.

Name equals input,

quote unquote name, House equals input, quote unquote house.

And then what this function is going to do

is return a new student object by calling class,

which again, is just an automatically passed in reference to the class itself,

passing in name and house.

And I will admit this syntax seems a little strange that now I'm calling CLS

and I'm passing in these arguments but let me do one final fix here.

Let me go to the top of this function and more explicitly say this is a class method,

this solves a potential chicken and the egg problem, so to speak,

whereby one needs to come before the other, potentially.

So what am I doing here

inside of my student class? I now have a function called get

It is I shall claim a class method, what does that mean?

It just means I can call this method without winstanley.

She ating a student object first

there in lies the potential chicken and the egg problem. And if unfamiliar.

That's an expression meaning well,

did the world have chickens first that laid eggs?

Or was there an egg that then born yielded the chickens. But how did the egg get there?

It's the sort of weird circular problem and that's what we're facing here.

It would be weird if you had to create a student object

in order to call get in order to get another student object.

Like that sounds messy.

Let's just get a student via a class method that by

definition does not require you to create a student object first.

Just like the hat in its final form. We use the hat class

to just say hat, capital h dot. Sorry, we didn't need to create a hat first.

We just use the class itself.

So what am I going to do here now?

Let me go down to maine and instead of saying get students, notice what I can now do

student dot get and everything else can stay the same.

All I've done now is I've migrated all of my logic from get student

which was its own standalone function but clearly related to students by name.

I've moved the same code really to inside of the student class

in a more simply named function called get But I could still call,

it gets student if I want, it just sees a little redundant to call.

It gets students in a student class. So I'm simplifying

So I have a method called get but I'm calling it

a class method to avoid that chicken and the egg problem.

I want to be able to call get without having a student object in my universe already.

And the syntax for that is at classmethod.

The convention is to give this method at least

one argument by convention called CLS for class,

which is just gonna be a reference to the class itself.

Lines 11 and 12 are identical to what they've always been and get students.

The only new syntax here is this but this again

is one of the features of object oriented programming.

You can now, instant she ate

a student object by just using CLS that's passed in.

I technically could use student capital s but

it turns out I'm doing what's more conventional

because this will both solve and avoid problems

down the line with more complicated code.

This line here on line 13 just means create an object of the current class.

What class is that? Well, whatever CLS is. Well that by definition of how it all works

is going to be student

and I want you to initialize it as always with name

and house. So now scrolling down my code is this and this is just nice to read.

You did perhaps have to acquire a taste for this and

I sound a little odd saying this is nice to read,

but indeed student dot yet just tells me what's going on.

I'm going to get a student.

I don't need a separate function written by

me called get students in the file itself.

The get functionality is built into the class.

All my student related code now is together.

So let me go down to my terminal window and run python of student dot pi enter,

let's type in harry let's type in Gryffindor and we're back to where we began.

But but but everything related to students now is in this here class.

The only other thing in the file is main and this conditional that we always use

to avoid accidentally executing Main when we're making

a module or package or the like.

So again, a solution to a problem.

Not a big one in the case of a relatively small program,

but one that you will eventually encounter is your programs

get longer and longer with more and more entities to represent

questions. Now on this

use of a class method

disability just to

hide functionality inside of a class, so as to call it directly Michael?

Yeah.

So, uh with the way that this program is laid out here,

um does the does the class have to be defined before

the main function in terms of the order of the,

of the program? A really good, a really good question.

So, when in doubt, let's try this. So let's try to change the order.

Let's move main to the top, which I've often encouraged.

So let's go ahead and above the class do this.

And notice now that technically line two is mentioning student,

which does not exist until a line six and below

let me go ahead and clear my terminal and run python of student dot p

so far so good. Harry, Gryffindor. Okay. And indeed Harry is from Gryffindor.

The reason Michael,

it does not matter in this case is because

we're not actually calling main until the very end.

And just as in the past,

that means that python has a chance to read everything top to bottom left to right.

So everything exists,

I would say generally classes are defined at the top of the file.

However,

it would be even maybe cleaner to move the class's

definition to its own file and then import it.

So essentially to make reusable code by putting it into your

own module or package so that not just this program,

but many others can use that definition of students as well.

Other questions now

on classes, class methods or the like erIC

and I apologize, I misspelled I misspelled your your exception name earlier,

I realized now on zoom's window,

nobody can spell it. It's fine.

Um,

under the class method get are we using CLS parentheses simply because we're

passing a list or is there any other reason why we're using CLS,

parenthesis

and the name. Common House. Nothing to do with the list. This stands for class.

The problem is class is a special word

that is meant to be used up here. You shouldn't be using it as the name of a parameter.

So the convention in the python world is to abbreviate it as CLS,

you can call it anything.

You could call it X. But the convention would have us generally right.

CLS and its just a way of python giving me a reference to that current class.

I mean specifically in reference to returning um,

parenthesis named Common house as opposed to just return name.

Common House.

Yeah.

Name comma House. So you could do. I'm not sure I'm following correctly.

What I'm really doing is this,

but I'm generalizing it by using the past

in variable that technically refers to student.

This is not a list, this is not a couple.

This is a function call to the student constructor that's going to

build me a student object and invoke ultimately the initialization function.

Um, we're very early on when we had a previous function, we we simply had to return,

um, named Common House.

We didn't have it in parentheses or anything.

It's specifically in reference to that. That was very early on.

That was like version one or two.

When I was returning deliberately a couple and couples were fine,

but they have to be numerically indexed with zero.

And the one thing they were immutable, which means I couldn't change them.

So there's nothing wrong with this approach, Version one.

But with classes today's whole claim is that

you just get a lot more capabilities instead.

That's all that's happening.

How About one More Question On Classes Here?

Yeah. Over to Phillip.

Mm hmm.

Yeah. Okay. Uh, so, uh, okay.

As I understood quite on, allow allow this very, very many things to do.

But I wanted to ask is there a way to like declare all the all the possible,

all the possible attributes of the class?

Because

it looks so inconsistent. I mean, especially after languages like java. So we just

didn't declare

possible attributes anywhere.

Um, well, so my takeaway there is, this is python's approach to these principles.

Different languages like java just take a

different approach but have very similar features.

The syntax just tends to vary and this is

how the python community chose to implement this idea.

The right mental model ultimately is that these instance variables,

instant methods

belong to or operate on specific objects,

a specific student specific hat class variables and

class methods operate on the entire class itself

or in turn all objects of that class which we've not seen in a demonstration of,

but it's sort of a higher level concepts and there's yet another

uh called static methods which we won't get into.

But there's other ways to do things in python like this too.

Alright,

allow me to give me just one moment to reorient and

we've got to final features and then we are a wrap.

So give me just one moment

to forge ahead here. Alright,

so it turns out besides these class methods

which are distinct from those instance methods,

which to be fair, do not have their own decorator.

They just are by default instance method.

There's yet other types of methods you can have in classes in python.

They tend to be called static methods and they

too come with another decorator called at static method,

which is a rabbit hole.

We won't go down but realize that there is yet other

functionality that you can leverage with an object oriented programming,

but what we thought we'd do is focus really on some final core features that you see,

not just in python,

but other languages as well and perhaps one of the most compelling

features of object oriented programming that

we haven't yet used explicitly though.

It turns out we've seen implicitly over the past weeks,

is this notion of inheritance?

It turns out via object oriented programming,

there's actually an opportunity to design your classes in a hierarchical fashion,

whereby you can have one class inherit from or borrow attributes,

that is methods or variables from another class, if they all have those in common.

So what do I mean by this here?

Well, let me propose that we implement over in v s code here,

a brand new file called wizard dot pi.

Let me go ahead and write,

let me go ahead and run code of wizard dot pi.

And let me propose that we implement a couple of classes this time

focusing not just on students but on professors at Hogwarts as well.

There are certainly similarities there, all wizards or witches,

but let's focus really on what some of those differences and similarities now are.

So let me go ahead and starting roughly from scratch.

Let me define a student class called students

and in that student class, let me go ahead and define a

innit method as before that takes as its first argument. Self as before.

And let's assume as before that a student has a name and a house.

All right, then, I'm going to define in this, a very simple line,

like self dot name equals name and self dot house equals house.

So this is like the very earliest version

of our class based implementation of the students

now.

It turns out in the world of harry potter,

there's also professors as well and they themselves

might have been students in the past,

but they're all humans in some form.

And so there are some shared attributes. Let's see,

let me define another class called professor

and inside of the professor class, let's define its own innit method.

First argument is always going to be self.

And how about we claim that a professor has of course a name but not a house

because they don't live in the house is

necessarily except for the few heads of houses.

So we're just gonna say that a professor is defined

by their name and the subject area that they teach,

they certainly have other attributes, we could model,

but my goal here is to have one attribute in common like name and one

other attribute for each that's different house

for a student and subject for a professor

and in this implementation of in it,

I'm going to do self dot name equals name and self dot subject equal subject.

Now, even though most of us,

all of us are new today to object oriented programming

at least explicitly when we ourselves are implementing classes,

do you see any opportunities here perhaps

for good design,

just applying general principles from week past where we somehow factored out

common code to just tighten things up and improve.

Not just the correctness, but maybe the design of our already correct code.

Any instincts here for what we could do better even

if you're not sure how to do it better.

What seems suboptimal here, What seems perhaps duplicative

angina if I'm saying it right.

Um name there's um name and houses repeated in both classes.

Close

careful which houses not repeated in both.

Notice that a professor has a name and a subject. So what is repeated

is distributed. But yeah, so name is repeated now.

Not a big deal certainly, but suppose we went in and added Patronus,

which again was the spell that a specific wizard conjures.

You could imagine that now a student has a

name in common and a Patronus in common in terms

of the attributes with the professor and the only thing

that things that might differ our house and subject,

you can imagine making a longer list

of attributes of students and professors respectively.

At which point there might be a lot more duplication than we see here.

But it's absolutely the case. That name right now is common to both of them.

And so it feels like there should be an opportunity to improve this.

And there is,

let me propose now that we recognize that students

and professors are really both wizards or witches.

And so they do have some common characteristics or attributes in common.

So let me go ahead and propose this.

Let me go ahead and propose that we create a class, for instance called wizard

and a wizard is going to have an innate method

called in it as always.

That takes the first argument self and then takes an argument called name.

Which is the functionality that for now is common to all wizards in the world,

whether they're young students or older professors,

name is what they have in common.

Let's add some error checking here as we used to.

So I'm adding a bit more functionality now.

So if not name, let's go ahead and raise a value error like quote, unquote,

missing names.

So we're adding some good error checking there.

Otherwise we're assigning to self dot name, that person's name.

We're not bothering with properties, getters, or setters.

This time we're keeping things simple just to focus on what's new here.

Well, how now can I somehow capture the fact that a student and a professor?

It is nonetheless a wizard at the end of the day.

How can I capture that kind of hierarchy? If you will?

Well,

it turns out that I can specify explicitly that student

inherits from a class called wizard and Professor can also inherit

from a class called wizard as well.

This is like the programmer's way of drawing a family

tree of sorts and it's not really a family tree,

but it is some kind of hierarchical relationship where

if we think of wizard is being here,

it's like the common definition to all wizards and witches in the world.

Well then we have student and professor sort of related to descending

from that common definition of a wizard in the wizarding world.

So how do I now borrow some of that same functionality?

I will admit and I will warn that this syntax is a little bit scary at first,

perhaps a little bit cryptic, but there is a way to factor out this commonality.

I'm gonna go ahead and delete this line here where I set self dot

name equal to name and I'm going to delete the identical line here.

I somehow want to modify the innit method for

students and for professor to somehow leverage the code I

already wrote in the wizard class to handle the error

checking of and the setting of the wizard's name.

Now, how can I do that? Well, it turns out in python, there's a special keyword

that you can use inside of any subclass,

a descendant class and I'm deliberately using family tree type terminology here.

The parent class here is wizard.

One of the child classes or sub classes here is students and the

other child class or subclass here is Professor just to use common terminology.

So if I want to call within the students in IT method, my parents

initialization functionality

in an ideal world, it would be a function called parent,

but it's not instead you say super referring to the super class,

which is the one conceptually above it, wizard in this case and you say super

without any arguments are needed. And then you say dot underscore underscore

underscore underscore and then you pass in

whatever that super classes in its method needs

the only thing it needs is a name because the

only thing all wizards have in common in the wizarding world

is their name.

Otherwise,

students more specifically have names and houses and

professors more specifically have names and subjects.

So this line of code,

which is admittedly one of the most cryptic lines we've

seen yet with all the parentheses and dots and underscores,

just means in the student classes in IT method,

please call the super classes in IT method passing

and only name and let it do its thing,

initialize the object that's now in memory with all

of the name related information and then online 11,

let me additionally customize that object with

the stuff that is students specific.

So I'm gonna add self dot house equals house

down here in the wizard class, I'm gonna similarly do the same,

I'm gonna say super open parenthesis.

Close parenthesis dot underscore underscore

underscore underscore

passing in name as well.

But online 17, I'm going to now pass, I'm now going to assign from right to left,

subject to self dot subject.

Just a further tweak this wizard object to be

that of a professor instead of a student.

So with object oriented programming to and classes specifically,

you have the ability not just to encapsulate

and represent real world entities with these classes,

You can also impose hierarchy.

So that if you've got two classes in the world,

to real world entities that somehow share common functionality,

we have a way to have one inherit from the other

sub classes from super classes. And now let's just try this out.

If I got all this code, Right,

let me go to the bottom of my file and let me do something like this.

Let me go ahead and say something like, well,

let's create a wizard equals the wizard constructor,

passing an albus for a wizard who wasn't the

head of the house and wasn't a student though,

perhaps in the past.

So he's just going to be thought of as a wizard more generally,

then I'm going to have a student called Harry who is

going to be of course a student object like this.

And then, lastly, I can have a professor who's going to be of course a professor,

capital P in this case, just like capital S and capital W like Severus,

who was in fact a professor

and not just the head of the school itself.

So if I were to continue writing code and I'm going

to go ahead and add some dot dot dots here,

just to imply that there should probably be some

more functionality in this file for printing out something

like so and so is from this house or so and so teaches this subject for now.

It's really just the structure and the only

new ideas here with this notion of inheritance

is that by adding parentheses and the name of a class when defining a class,

you can say that this class should inherit all of the functionality

from the super class.

And were additionally saying with super that we still have the ability to call

that super class's own innit method to do any of the stuff that's common

two students and professors alike.

Any questions now on this idea of

inheritance, which is a key feature of a lot of object oriented

programming languages?

Sebastiano?

Yeah, I think so, yes.

Um, so is there any situation where,

because from what I've seen so far, a lot of times,

there's like a lot of nesting if you do super, does it go one up?

Is there any situation where, you know, it's nested in another class as well?

Um, above wizard,

let's say like wizard has something nested there and then

you're trying to pull something from it and you know,

how does that affect if if it's something about that?

A really good question. If you were to have a super super class.

So your hierarchy is even taller than the

two levels of hierarchy that we currently have.

Absolutely.

But what's nice about object oriented,

what's nice about inheritance as the name

implies is just as you might have inherited

certain traits as a human from your

grandfather and grandmother or your great grandfather,

or great grandmother,

some of those properties can actually trickle down to you, so to speak,

in the context of code as well.

So when you descend from another class,

that is when you subclass a super class or a super super class,

you actually do inherit all of the functionality, not just from one level above you,

but from two or three.

So you can indeed access some of that functionality as well,

and you can even override it if you want

some of these classes to behave a little bit differently

than others.

Other questions on inheritance,

Anjali.

So it's kind of similar to the last one,

but can you have like two parents on the same level?

A really good question.

So there are ways to implement uh descendants from

multiple parents and there's different ways to do this.

Not just in python, but other languages.

We've kept things simple here though by having a single inheritance path.

Good question. How about one more question on inheritance?

Yeah, Gene,

hello, My question is, can we have multiple arguments in super

that

double underscore in it?

Yes,

you can have multiple arguments passed to the innit method if they are appropriate.

In this case, I've only passed in name on line 10 and I've only passed a name online,

18.

Why?

Well, if we scroll up to line to where I defined the innit method for the wizard class,

I'm only sorry, you're not seeing this?

Let me rewind.

Yes, but in this case I'm only passing in name online 18.

And I'm only passing in name online 10. Why? Because online too.

When I define the method for the Wizard class, I only expect a single argument,

but I could absolutely have under common functionality

like I could add in a patronus.

If both students and professors have patronus is that can come out of their wands,

I could have two arguments instead.

All right, let me give me one moment to regroup before we dive in

to the final topic

here.

Okay,

so it turns out, let's see. We started over there.

Okay,

let me just give the team a walk over here. Movie Magic.

So it turns out even though we've only introduced this

notion of inheritance as it relates to you writing code,

we've been using this feature of object oriented programming now

for quite some time in the form of exceptions.

Indeed, if you look at the official documentation for exceptions in python,

you'll see that there's not even the ones we've

seen in class like value error and others.

There's any number of others as well,

but they are all themselves hierarchical in nature.

This is just a subset of the available exceptions that come built into python.

And you can actually, as a programmer create your own exceptions as well.

But as this chart here captures hierarchically,

all exceptions we've seen thus far actually descend from or inherit from

super classes already.

So for instance, at the bottom of this list here is value error,

which we've seen quite a bit.

And if you follow the line straight up on this asking rendition of this chart,

you'll see that value error has a parent class or

super class called exception and the exception class meanwhile,

has a parent class called base exception.

Why did the authors of python do this?

Well,

it turns out that whether you have a value error or a

key error or an assertion error or any number of others,

there's a lot of functionality common to all of those types of errors that you want.

All

that you want a programmer to be able to use.

And so it turns out that the authors of python decided, you know what,

let's not have a dozen or more different classes

that all just have copy pasted similar functionality.

Let's create this hierarchy.

So that even though the exceptions towards the bottom of this list are very precise,

they at least inherit that is borrow some very common functionality up above.

So it turns out that when you use the try and except keyword in python.

Generally speaking,

we've tried to catch very specific exceptions like value error,

but technically you could capture the parents

or even the grandparents exception forgiven exception,

especially if you're not necessarily sure which one

is going to get raised or better yet.

There could be many exceptions that get raised but you want to handle them

all the same and you don't want to necessarily enumerate them in parentheses,

separated by commas,

you want to say you want to handle all exceptions of a certain super class

in much the same way.

So this has been latent this whole time,

anytime we've seen or used or caught or now raised exceptions and built into python,

is this hierarchy in if you were to invent your own exception

generally you wouldn't want to start from scratch,

you would want to descend from that is subclass one of

these existing exceptions and add your own twist on it,

your own functionality as well.

Well,

there's one final feature of object oriented programming that

we'd like to share with you today and that it

will perhaps be quite the eye opener is what

you can really do now that you have classes at

your disposal and this to surprise has been a

feature you and I have been taking for granted for

weeks now this has just worked but it's been implemented

in a way that you can now leverage yourself,

it turns out that python and some other languages to support this notion of operator

overloading whereby you can take very common symbols like plus or minus or other,

such syntax on the on the keyboard and

you can implement your own interpretation thereof.

Plus does not have to equal addition and minus. Does not have to equal subtraction.

In fact you and I have already seen

another context in which plus means something else.

Plus has not always in python meant addition per se. What else has python used?

Plus four. Do you recall?

Yeah.

Commission.

Say again.

For concatenation for joining two strings for adding to a list.

Can you use Plus as well?

So Plus has actually been funny enough overloaded by the

authors of python for us and so we can use

the same symbol in much the same way as addition

but with different data types to solve slightly different problems.

Well let me propose that we go back over to V. S.

Code here and let me go ahead and create a new final file called vault dot pi.

So code of vault dot pi.

And let me propose that we implement the idea of a vault at Gringotts.

Keeping on theme where in there's a bank in the world

of harry potter and within this bank families and individuals have vaults

containing all sorts of money in the wizarding world and the

type of money that exists in the world of harry potter.

Our coins called galleons and sickles and coconuts

and those are in descending order of value.

And so inside of the vault might be a whole bunch of coins, gold, silver and bronze,

essentially.

Each of those denominations tucked away.

So how can I go about implementing,

first of all the idea of a vault so that I can store for instance, for harry potter,

How much coinage is in his family's vault or for one reason only the same.

Well let me go ahead in vault up high and first create

a class called vault essentially meant to represent a bank vault.

Perfect.

Another real world or fantasy world entity that I want to represent with code.

I could use a couple or a list or a dictionary.

But again,

I'm going to get a lot more functionality

with classes and we'll see one final flourish

with operators

inside of this vault class. Let's go ahead and do this.

Let me define my innate method,

taking its first argument of self. And let me define three arguments to this.

When you create a vault in my code here,

I want to be able to initialize it with some number of galleons,

some number of sickles and some number of coconuts.

I want to use the programmer to be able to pass in

one or more of those values ideally but they can be optional.

So I'll give them defaults.

So let's go ahead and define a parameter called Galleons whose default

value will be zero sickles whose default value will also be zero.

And Canucks whose default value will be zero as well.

So the programmer can pass in one or two or three or heck even none of those.

And they all have some implied defaults.

How do I want to remember those values that are passed in? Well, let me do this.

Self dot galleons equals galleons and self dot sickles

equals sickles and self dot ca nuts equals coconuts.

And so I could add some error checking, especially if you don't pass in a number.

I could turn these into properties to do even more validation,

but let's keep it simple and as always focused only on the new ideas.

So I'm just going to trust that these values were passed

in and I'm gonna immediately assign them to these instance variables.

What now do I want to do?

Well, let's come up with a way of printing out what is in someone's vault ultimately.

But first let's do this,

let's create a vault for the potters by creating via assignment a new vault.

And let's say that the potters have 100 galleons, 50 sickles and 20 for coconuts.

Alright, and that's in that vault. And let's print out for instance, potter.

Alright, let's run this code and see how it works.

Now let me go ahead and run python, a volta pie, enter.

Okay.

Seems to work. No syntax errors or anything else, but this is not very enlightening.

How do I fix this? Thinking back to what we've done before.

How do I enable my code to print out a vault, but in a more user friendly way.

Like how many galleons sickles and peanuts are in it, Anjali,

you have to use the underscore underscore stir exactly.

I need to use one of those special methods that comes with classes and

define for myself how I want a vault to be printed as a string.

So let me go ahead and do that.

Let me define the stir method, taking itself as its sole argument here.

And let's just return a very simple string that just reveals what's in the vault.

So I'm going to return a formatted

string

inside of which is self dot galleons and then the word galleons.

So I know which those are.

Then let's do self dot sickles and let's output the word sickles.

And then lastly let's output self dot ca nuts and then

the nuts here. So I know in this string.

Just how many of each of those coins I have in this particular families vault.

Alright, let me go ahead and run python of vault dot pi,

changing nothing else except the stir method.

And now we see indeed that harry has 100 galleons, 50 sickles and 25 coconuts.

Alright well let's do one thing more here.

Below that, let's go ahead and define a Weasley variable

and Ron never seem to have quite as much money in the vault as did Harry.

So let's say that the Weasley vault, we'll have 25 50 and 100.

So I'll just reverse the order of those denominations rather than Harry's 150. 25.

And now let me go ahead and print Weasley

like this.

And let's go ahead and clear my terminal window.

Run python,

a vault dot pi this time that stir method will

be invoked twice once for each of those vault objects.

And we'll see indeed that the first one for Harry's got 150

25 respectively versus runs 25 50 and 100 respectively.

But now let's do something interesting.

Suppose that you wanted to combine the contents of two vaults,

be it Harry and Ron's or any other two people?

How would you go about doing this in code?

Well, if I wanted to combine the vaults for someone, I could do this.

Well,

I could do galleons equals let's do potter dot galleons plus weasley dot galleons.

That gives me a variable called galleons.

That has the sum of Harry and Ron's galleons.

Let's next do sickles equals potter dot sickles plus Weasley dot sickles.

And then lastly,

let's do coconuts equals potter dot doughnuts plus Weasley dot ca nuts.

I've got three variables. What can I now do with these values.

Well, let's create a third,

a new vault total will be the name of this variable equals a new vault,

capital V notice.

And now let's pass in those three new variables galleons,

sickles and peanuts

and that's it. And let's print out this total vault.

So we should now see three vaults, One for harry for Ron.

And the combination, the addition of the to

let me go ahead and rerun python evolved a pie and there we have it.

What was 150 25

25 50 and 100 combined through addition. Now is 125. 100 125.

So pretty straightforward using techniques from weeks ago where we're

just declaring a few new variables and doing some addition.

But wouldn't it be cool if I could do something like this,

wouldn't it be cool if I could just somehow not manually create

my own vault and do all of this annoying math up here,

what if I could just do potter plus weaselly and get rid of all of this logic here.

Like wouldn't it be nice if I overload the

operator Now we know as plus just like stir does

just like list does to allow me to add two vaults together on the left and the right,

while it turns out in python

and through operator overloading there is a way to do just this.

If you consult the documentation, there are,

there's this and so many other special methods that come with classes.

The third one will see here

Is this one here

underscore underscore,

add underscore underscore and you'll see that it very generically

is described in the documentation is working for any object,

be it a vault or stir or a list or something else.

By convention.

It's going to take a first argument called self and then

it's going to take some other argument by convention called other

Self in effect is going to be referring to whatever

object is on the left of a plus sign,

other is going to be referring to whatever's on the right hand side of a plus sign,

thereby giving us a way of describing in code

the operandi on the left and the operandi on the right of the operator.

Plus in between

that is to say if I go back to the S code here,

what I'm trying to do is implement support for this.

Well, let me try without writing any other code just yet,

python of all to pI enter

type error. Unsupported operation types for vault and vault.

That is to say, python at this moment,

does not know what it means to add two vaults together.

Right?

You and I might have an instinct probably want to

combine the galleons and the sickles and the canucks,

respectively.

Python doesn't know that. It just knows that you have a new class called vault.

But let's teach python to do this. Let me clear my terminal window.

Let me scroll back up to the class itself where at the

moment I only have two special methods in it and stir.

But let's add this third.

Let me go into the class here and define underscore underscore

and underscore underscore as always the first argument's gonna be Self.

And by convention this one needs to take a second one called other.

So I could technically name these anything I want but I'll stick with convention.

And now again,

self is going to refer by convention to whatever

the left hand operandi is in this case,

for instance, down here, potter

other by convention is going to refer to whatever the second operandi is here.

Down here. Indeed.

Weasley and the operator is plus implemented by way of this uh sorry,

this ad function here.

So how do I go about now adding these values?

I'm gonna go ahead and say galleons equal self dot galleons

plus other dot galleons,

thereby generalizing away from potter and Weasley specifically to self

and other whatever two vaults happen to get added together.

Sickles is going to equal self dot sickles plus other dot sickles.

And lastly coconuts is going to equal self dot ca nuts plus

other

dot can nuts. And now that I have those three variables, those three somes

I'm just going to return a new vault that contains that many galleons,

sickles and coconuts altogether.

So now I've defined this new special method called add

that should now just make plus work for two vaults.

Alright, let's see,

let me run down to my terminal window python of alta pie and hit enter and voila.

And now we've implemented an overloaded operator plus to do what you and I

as humans would hope would be the case when you add two vaults together.

But I've now written the code more

specifically to teach python what it means concretely

to add two vaults together and it's with

very similar coding effect underneath the hood.

That python is doing this for two strings to concatenate them together.

To joining two lists into a new list with lists and so many other classes as well.

Any questions now on operator overloading

or this example here?

Yeah. Over to ERIC.

So, uh, let's say you wanted, well let's let's say student had a a purse variable.

Um how would you go about creating a function for adding a student and

A vault for 2, 2 separate classes? How would that be possible?

A good question.

If you wanted to implement support for adding two things, Two classes,

let me think for a moment.

Um

let me see what happens here. I don't know off hand. Let's do this.

Let's create a stir and see what happens if I add potter plus a stir

stir object. Yeah, Okay, so it would work.

I'm just figuring this out as I go here erIC.

So just to be clear what I did was I just changed Weasley to stir just to see

what would happen when I add a vault plus a stir and it will work theoretically why?

Because so long as the type of value on the left has

an add method implemented other can be any type that you want,

you just have to decide and code what it's gonna mean conceptually to add a

vault plus a string which in this case probably doesn't make any sense at all.

But it's possible it's going to be the operandi on the left and

I'm inferring that I did not know the answer a moment ago.

I'm inferring that because what I got was an attribute error ah here online 11.

Because python did not like this other dot galleons didn't work

but I could make it work by figuring something out.

Really good question. I didn't know that one myself.

Other questions on operator overloading?

Yeah, for deep.

Yes we can.

Okay. Um

can you define new operators in python?

Can you define new operators in python?

Ah This is your good questions today,

carter's gonna quickly google if he doesn't mind.

I don't think so.

There is a very long but precise list of operators that you can overload.

I do not believe you can assign arbitrary characters to be operators in python.

Uh let me defer to carter in the chat to revoke.

Okay, I'm seeing two of my colleagues are saying no not possible.

So I'm gonna go with my first instinct. No.

Otherwise they'd be kind of cool, you can make emoji do whatever you want to.

How about one final question on operator overloading?

Yeah.

Uh Treva Treva if I'm saying it right,

is that the only operation you can do

is a

as far as like can you do a subtraction as well, You can you can do so many others.

Let me know if carter you don't mind pulling up this U. R. L. Here.

So this link here, special method names and today's slides.

You'll see a long list of all of the operators that you can overload.

You can do less than equals than plus equals minus equals, pretty much any symbol.

You've seen me type on the screen can be overloaded in the context of classes.

All right,

let me come back here just a moment

and

we can wrap up together and we'll do some casual Q and A in just a moment.

So ultimately, what have we done today?

We've introduced this notion of object oriented programming that's

actually been with us for all of these weeks,

albeit underneath the hood when manipulated integers and strings

and and then lists and then dictionaries and more.

But as of today,

what you now have is the coding fundamentals

via which you can implement your own classes.

You can implement overloaded definitions for your own operators and

you can ultimately use object oriented programming and classes specifically

to model your world, be it the real world or fantasy world,

with all the more tools in your toolkit?

You could absolutely continue to write code

that uses topples or lists or dictionaries.

But ultimately,

with classes do you have the ability to tag attributes with actual names.

Do you have the ability via properties and methods more generally to

validate that the data you're putting in is as you expect.

And you have so many other forms of functionality built

into classes that eventually as your programs get more complicated,

you'll probably acquire an instinct to reach for a class far more frequently

than something more generic.

Next time we'll wrap up with a few other features of Python,

but as of now this was CS 50.

Mm hmm.

Okay. We can do Q and A.

Okay.

Alright. We're officially wrapped here.

But let me see if we have some casual questions here from the group, Michael,

talking about the a lot of differences between python

and and uh say java in terms of um,

having

private and public uh, scoping and stuff like that in terms of the uh,

was it where you were able to override the the attributes of a of an object?

Um,

I was wondering what the security implications of that are like

if that is something that can be exploited by um,

you know, by malicious uh, programmers,

um and whether or not that uh is indicative of of a

something less secure in python than with other languages like java.

It's a good question. So short answer. Yes.

If you had an especially large project where

you might not necessarily be able to trust

everyone 100% and you don't necessarily have the

ability to audit every single line of code.

If it's a developing quickly

theoretically,

someone could be writing code that's accessing

variables or state that they really shouldn't be

at the end of the day though, in python, it's just possible to do that.

This is one of the reasons people might gravitate toward another language that has

more visibility constraints in place because it

does just lockdown data more tightly.

With that said, when the developer has access to the code itself,

sort of all bets are off anyway because they have access to the entire

code base and theoretically could make changes

to or poke holes in the visibility section

settings like public or protected or private. But in general, that is yes.

An appeal of other languages like Java and that you just don't have

these kinds of worries whether it's for security or just correctness reasons.

And in fact, this is one of my own hangups with python,

like I kind of like the public and private nature of languages like Java,

I don't really love this sort of honor system that we're on,

where we're just supposed to don't do that even though you can,

because it isn't it? Yeah, I was just gonna is it?

Um so it's only it's only a concern in terms of having access to the code base though,

like there's no um,

there's no other issues that that could be exploited without access to the

code base uh know that even that's um not necessarily the case,

it depends on what the code is doing.

If the code bases somehow trusting

that user input is safe.

That could be an attack mechanism because someone

could somehow inject code into the system.

Even a user, not a programmer that somehow accesses the contents of objects,

gets people's passwords or whatnot because they're lying there in memory.

So I think the short answer is that it is yes.

A better defense mechanism just to kind of lock yourself out of this. But even then,

you know,

a smart enough programmer could poke holes in it just

by nature of having access to the code base.

So there are there are there ways of mitigating that within python?

No.

Is the short answer like this is a feature of

the language um not a bug or anything like that

or or it's a lack of feature if you will other questions on this or anything else,

Ansel

Yes. What do you recommend next?

For those who want to go deeper into finance python, But for finance?

Oh, um there's nothing really specific about oo for the world of finance.

Um it depends what you're implementing,

like object oriented programming is just a tool in your toolkit.

So you now have the ability to represent different forms of entities you can imagine

representing a company or a portfolio of stocks or any number of

other things using classes instead of more generic lists or dictionaries.

If you want to learn more,

the thing to learn more about is just object

oriented programming more generally that it really isn't tied to

financial applications with that said there's probably some Youtube tutorial

or book or course that do intersect the two,

but there's nothing inherent about those two worlds necessarily.

So I I don't have a good answer other than google in that case,

but I would skew your terms towards the oo stuff,

not so much the finance stuff if you want to get good at these primitives.

Other questions from Ahmed,

if if I'm wondering if we convened this course,

we will prepare to CS 50 Ai course or we still have to learn more about python.

Um You don't this course,

CS 50 P will teach you way more about python then we teach you in CS 50 X In CS 50 x.

Though you'll learn more about programming more generally,

problem solving. And so I you could try to go straight from this class to CS 50 AI.

But generally speaking,

having more programming experience under your belt will make

the Ai class a little more accessible because you'll

just be a more comfortable programmer and you can

really focus on the Ai stuff in the class,

Not just the programming stuff.

How about time for a couple more questions?

Yeah. Sandra from Singer writes.

Um Hello,

my question is are we gonna are we going to have a final project for its calls?

No. So we at the moment we plan for their only to be problem sets.

So when you reach the final problem set, you have successfully finished.

And how about one other question if we could mentally and then max let's

not cut film but we can drop off just so we can reach film.

One thing

metal.

Yeah. David, my question is, can we use unitary operator overloading?

And the biden?

Which operator again?

Unity operator overloading? Unity operator. I'm not sure. Oh, unitary operators?

Um

Good question. I'm trying to

are there, can you think of any function carter

like in C Plus plus, you can overload plus plus and minus minus.

Those don't exist in c python?

I'm just trying to think of an example

if you email me, I'll try to remember, I can't think of one off the top of my head,

but I'm guessing I'm just blanking at the moment on the spot.

Alright, allow me to officially wrap us here. We will be in touch next week via email.

If we have one final shoot, otherwise the content will continue to go on the website.

Thank you so much for joining us and have a wonderful morning, afternoon or evening.

This was

CS 50

